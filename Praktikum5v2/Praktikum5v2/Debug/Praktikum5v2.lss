
Praktikum5v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000362c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00802000  0000362c  000036c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000285  00802084  00802084  00003744  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003744  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000037a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  000037e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000124e3  00000000  00000000  00003dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000575c  00000000  00000000  000162df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a407  00000000  00000000  0001ba3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013ec  00000000  00000000  00025e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003b029  00000000  00000000  00027230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009f82  00000000  00000000  00062259  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000820  00000000  00000000  0006c1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c6a3  00000000  00000000  0006c9fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c2       	rjmp	.+1202   	; 0x4e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c7       	rjmp	.+3606   	; 0xe50 <__vector_14>
      3a:	00 00       	nop
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c2       	rjmp	.+1146   	; 0x4e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c2       	rjmp	.+1106   	; 0x4e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c2       	rjmp	.+1102   	; 0x4e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	23 c2       	rjmp	.+1094   	; 0x4e4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	21 c2       	rjmp	.+1090   	; 0x4e4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1f c2       	rjmp	.+1086   	; 0x4e4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1d c2       	rjmp	.+1082   	; 0x4e4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c2       	rjmp	.+1046   	; 0x4e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c2       	rjmp	.+1042   	; 0x4e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c2       	rjmp	.+1034   	; 0x4e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c2       	rjmp	.+1030   	; 0x4e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ff c1       	rjmp	.+1022   	; 0x4e4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fd c1       	rjmp	.+1018   	; 0x4e4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fb c1       	rjmp	.+1014   	; 0x4e4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f9 c1       	rjmp	.+1010   	; 0x4e4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f7 c1       	rjmp	.+1006   	; 0x4e4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f5 c1       	rjmp	.+1002   	; 0x4e4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f3 c1       	rjmp	.+998    	; 0x4e4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f1 c1       	rjmp	.+994    	; 0x4e4 <__bad_interrupt>
     102:	00 00       	nop
     104:	ef c1       	rjmp	.+990    	; 0x4e4 <__bad_interrupt>
     106:	00 00       	nop
     108:	ed c1       	rjmp	.+986    	; 0x4e4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	eb c1       	rjmp	.+982    	; 0x4e4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e9 c1       	rjmp	.+978    	; 0x4e4 <__bad_interrupt>
     112:	00 00       	nop
     114:	e7 c1       	rjmp	.+974    	; 0x4e4 <__bad_interrupt>
     116:	00 00       	nop
     118:	e5 c1       	rjmp	.+970    	; 0x4e4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e3 c1       	rjmp	.+966    	; 0x4e4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e1 c1       	rjmp	.+962    	; 0x4e4 <__bad_interrupt>
     122:	00 00       	nop
     124:	df c1       	rjmp	.+958    	; 0x4e4 <__bad_interrupt>
     126:	00 00       	nop
     128:	dd c1       	rjmp	.+954    	; 0x4e4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	db c1       	rjmp	.+950    	; 0x4e4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d9 c1       	rjmp	.+946    	; 0x4e4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d7 c1       	rjmp	.+942    	; 0x4e4 <__bad_interrupt>
     136:	00 00       	nop
     138:	d5 c1       	rjmp	.+938    	; 0x4e4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d3 c1       	rjmp	.+934    	; 0x4e4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d1 c1       	rjmp	.+930    	; 0x4e4 <__bad_interrupt>
     142:	00 00       	nop
     144:	cf c1       	rjmp	.+926    	; 0x4e4 <__bad_interrupt>
     146:	00 00       	nop
     148:	cd c1       	rjmp	.+922    	; 0x4e4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	cb c1       	rjmp	.+918    	; 0x4e4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c9 c1       	rjmp	.+914    	; 0x4e4 <__bad_interrupt>
     152:	00 00       	nop
     154:	c7 c1       	rjmp	.+910    	; 0x4e4 <__bad_interrupt>
     156:	00 00       	nop
     158:	c5 c1       	rjmp	.+906    	; 0x4e4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c3 c1       	rjmp	.+902    	; 0x4e4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c1 c1       	rjmp	.+898    	; 0x4e4 <__bad_interrupt>
     162:	00 00       	nop
     164:	bf c1       	rjmp	.+894    	; 0x4e4 <__bad_interrupt>
     166:	00 00       	nop
     168:	bd c1       	rjmp	.+890    	; 0x4e4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	bb c1       	rjmp	.+886    	; 0x4e4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b9 c1       	rjmp	.+882    	; 0x4e4 <__bad_interrupt>
     172:	00 00       	nop
     174:	b7 c1       	rjmp	.+878    	; 0x4e4 <__bad_interrupt>
     176:	00 00       	nop
     178:	b5 c1       	rjmp	.+874    	; 0x4e4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b3 c1       	rjmp	.+870    	; 0x4e4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b1 c1       	rjmp	.+866    	; 0x4e4 <__bad_interrupt>
     182:	00 00       	nop
     184:	af c1       	rjmp	.+862    	; 0x4e4 <__bad_interrupt>
     186:	00 00       	nop
     188:	ad c1       	rjmp	.+858    	; 0x4e4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ab c1       	rjmp	.+854    	; 0x4e4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a9 c1       	rjmp	.+850    	; 0x4e4 <__bad_interrupt>
     192:	00 00       	nop
     194:	a7 c1       	rjmp	.+846    	; 0x4e4 <__bad_interrupt>
     196:	00 00       	nop
     198:	a5 c1       	rjmp	.+842    	; 0x4e4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a3 c1       	rjmp	.+838    	; 0x4e4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a1 c1       	rjmp	.+834    	; 0x4e4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9f c1       	rjmp	.+830    	; 0x4e4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9d c1       	rjmp	.+826    	; 0x4e4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9b c1       	rjmp	.+822    	; 0x4e4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	99 c1       	rjmp	.+818    	; 0x4e4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	97 c1       	rjmp	.+814    	; 0x4e4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	95 c1       	rjmp	.+810    	; 0x4e4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	93 c1       	rjmp	.+806    	; 0x4e4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	91 c1       	rjmp	.+802    	; 0x4e4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8f c1       	rjmp	.+798    	; 0x4e4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8d c1       	rjmp	.+794    	; 0x4e4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8b c1       	rjmp	.+790    	; 0x4e4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	89 c1       	rjmp	.+786    	; 0x4e4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	87 c1       	rjmp	.+782    	; 0x4e4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	85 c1       	rjmp	.+778    	; 0x4e4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	83 c1       	rjmp	.+774    	; 0x4e4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	81 c1       	rjmp	.+770    	; 0x4e4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7f c1       	rjmp	.+766    	; 0x4e4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7d c1       	rjmp	.+762    	; 0x4e4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7b c1       	rjmp	.+758    	; 0x4e4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	79 c1       	rjmp	.+754    	; 0x4e4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	77 c1       	rjmp	.+750    	; 0x4e4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	75 c1       	rjmp	.+746    	; 0x4e4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	4f 10       	cpse	r4, r15
     1fe:	4f 10       	cpse	r4, r15
     200:	4f 10       	cpse	r4, r15
     202:	7c 10       	cpse	r7, r12
     204:	84 10       	cpse	r8, r4
     206:	92 10       	cpse	r9, r2
     208:	4f 10       	cpse	r4, r15
     20a:	4f 10       	cpse	r4, r15
     20c:	7c 10       	cpse	r7, r12
     20e:	84 10       	cpse	r8, r4

00000210 <__trampolines_end>:
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 00       	nop
     216:	00 20       	and	r0, r0
     218:	20 20       	and	r2, r0
     21a:	20 20       	and	r2, r0
     21c:	00 20       	and	r0, r0
     21e:	50 50       	subi	r21, 0x00	; 0
     220:	50 00       	.word	0x0050	; ????
     222:	00 00       	nop
     224:	00 50       	subi	r16, 0x00	; 0
     226:	50 f8       	bld	r5, 0
     228:	50 f8       	bld	r5, 0
     22a:	50 50       	subi	r21, 0x00	; 0
     22c:	20 78       	andi	r18, 0x80	; 128
     22e:	a0 70       	andi	r26, 0x00	; 0
     230:	28 f0       	brcs	.+10     	; 0x23c <__trampolines_end+0x2c>
     232:	20 c0       	rjmp	.+64     	; 0x274 <__trampolines_end+0x64>
     234:	c8 10       	cpse	r12, r8
     236:	20 40       	sbci	r18, 0x00	; 0
     238:	98 18       	sub	r9, r8
     23a:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1d97>
     23e:	a8 90       	.word	0x90a8	; ????
     240:	68 60       	ori	r22, 0x08	; 8
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	00 00       	nop
     246:	00 00       	nop
     248:	10 20       	and	r1, r0
     24a:	40 40       	sbci	r20, 0x00	; 0
     24c:	40 20       	and	r4, r0
     24e:	10 40       	sbci	r17, 0x00	; 0
     250:	20 10       	cpse	r2, r0
     252:	10 10       	cpse	r1, r0
     254:	20 40       	sbci	r18, 0x00	; 0
     256:	00 50       	subi	r16, 0x00	; 0
     258:	20 f8       	bld	r2, 0
     25a:	20 50       	subi	r18, 0x00	; 0
     25c:	00 00       	nop
     25e:	20 20       	and	r2, r0
     260:	f8 20       	and	r15, r8
     262:	20 00       	.word	0x0020	; ????
     264:	00 00       	nop
     266:	00 00       	nop
     268:	60 20       	and	r6, r0
     26a:	40 00       	.word	0x0040	; ????
     26c:	00 00       	nop
     26e:	f8 00       	.word	0x00f8	; ????
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 60       	ori	r16, 0x00	; 0
     278:	60 00       	.word	0x0060	; ????
     27a:	08 10       	cpse	r0, r8
     27c:	20 40       	sbci	r18, 0x00	; 0
     27e:	80 00       	.word	0x0080	; ????
     280:	70 88       	ldd	r7, Z+16	; 0x10
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	c8 88       	ldd	r12, Y+16	; 0x10
     286:	70 20       	and	r7, r0
     288:	60 20       	and	r6, r0
     28a:	20 20       	and	r2, r0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	70 88       	ldd	r7, Z+16	; 0x10
     290:	08 10       	cpse	r0, r8
     292:	20 40       	sbci	r18, 0x00	; 0
     294:	f8 f8       	.word	0xf8f8	; ????
     296:	10 20       	and	r1, r0
     298:	10 08       	sbc	r1, r0
     29a:	88 70       	andi	r24, 0x08	; 8
     29c:	10 30       	cpi	r17, 0x00	; 0
     29e:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     2a2:	10 f8       	bld	r1, 0
     2a4:	80 f0       	brcs	.+32     	; 0x2c6 <__trampolines_end+0xb6>
     2a6:	08 08       	sbc	r0, r8
     2a8:	88 70       	andi	r24, 0x08	; 8
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	80 f0       	brcs	.+32     	; 0x2ce <__trampolines_end+0xbe>
     2ae:	88 88       	ldd	r8, Y+16	; 0x10
     2b0:	70 f8       	bld	r7, 0
     2b2:	08 10       	cpse	r0, r8
     2b4:	20 40       	sbci	r18, 0x00	; 0
     2b6:	40 40       	sbci	r20, 0x00	; 0
     2b8:	70 88       	ldd	r7, Z+16	; 0x10
     2ba:	88 70       	andi	r24, 0x08	; 8
     2bc:	88 88       	ldd	r8, Y+16	; 0x10
     2be:	70 70       	andi	r23, 0x00	; 0
     2c0:	88 88       	ldd	r8, Y+16	; 0x10
     2c2:	78 08       	sbc	r7, r8
     2c4:	10 60       	ori	r17, 0x00	; 0
     2c6:	00 60       	ori	r16, 0x00	; 0
     2c8:	60 00       	.word	0x0060	; ????
     2ca:	60 60       	ori	r22, 0x00	; 0
     2cc:	00 00       	nop
     2ce:	60 60       	ori	r22, 0x00	; 0
     2d0:	00 60       	ori	r16, 0x00	; 0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	08 10       	cpse	r0, r8
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	20 10       	cpse	r2, r0
     2da:	08 00       	.word	0x0008	; ????
     2dc:	00 f8       	bld	r0, 0
     2de:	00 f8       	bld	r0, 0
     2e0:	00 00       	nop
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	20 10       	cpse	r2, r0
     2e6:	20 40       	sbci	r18, 0x00	; 0
     2e8:	80 70       	andi	r24, 0x00	; 0
     2ea:	88 08       	sbc	r8, r8
     2ec:	10 20       	and	r1, r0
     2ee:	00 20       	and	r0, r0
     2f0:	70 88       	ldd	r7, Z+16	; 0x10
     2f2:	08 68       	ori	r16, 0x88	; 136
     2f4:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f6:	70 70       	andi	r23, 0x00	; 0
     2f8:	88 88       	ldd	r8, Y+16	; 0x10
     2fa:	88 f8       	.word	0xf888	; ????
     2fc:	88 88       	ldd	r8, Y+16	; 0x10
     2fe:	f0 88       	ldd	r15, Z+16	; 0x10
     300:	88 f0       	brcs	.+34     	; 0x324 <__trampolines_end+0x114>
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	f0 70       	andi	r31, 0x00	; 0
     306:	88 80       	ld	r8, Y
     308:	80 80       	ld	r8, Z
     30a:	88 70       	andi	r24, 0x08	; 8
     30c:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x657f>
     310:	88 90       	.word	0x9088	; ????
     312:	e0 f8       	bld	r14, 0
     314:	80 80       	ld	r8, Z
     316:	f0 80       	ld	r15, Z
     318:	80 f8       	bld	r8, 0
     31a:	f8 80       	ld	r15, Y
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	80 80       	ld	r8, Z
     320:	80 70       	andi	r24, 0x00	; 0
     322:	88 80       	ld	r8, Y
     324:	80 98       	cbi	0x10, 0	; 16
     326:	88 70       	andi	r24, 0x08	; 8
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 f8       	.word	0xf888	; ????
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	88 70       	andi	r24, 0x08	; 8
     330:	20 20       	and	r2, r0
     332:	20 20       	and	r2, r0
     334:	20 70       	andi	r18, 0x00	; 0
     336:	38 10       	cpse	r3, r8
     338:	10 10       	cpse	r1, r0
     33a:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6557>
     33e:	90 a0       	ldd	r9, Z+32	; 0x20
     340:	c0 a0       	ldd	r12, Z+32	; 0x20
     342:	90 88       	ldd	r9, Z+16	; 0x10
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	80 80       	ld	r8, Z
     34a:	f8 88       	ldd	r15, Y+16	; 0x10
     34c:	d8 a8       	ldd	r13, Y+48	; 0x30
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	88 88       	ldd	r8, Y+16	; 0x10
     354:	c8 a8       	ldd	r12, Y+48	; 0x30
     356:	98 88       	ldd	r9, Y+16	; 0x10
     358:	88 70       	andi	r24, 0x08	; 8
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 88       	ldd	r8, Y+16	; 0x10
     35e:	88 70       	andi	r24, 0x08	; 8
     360:	f0 88       	ldd	r15, Z+16	; 0x10
     362:	88 f0       	brcs	.+34     	; 0x386 <__trampolines_end+0x176>
     364:	80 80       	ld	r8, Z
     366:	80 70       	andi	r24, 0x00	; 0
     368:	88 88       	ldd	r8, Y+16	; 0x10
     36a:	88 a8       	ldd	r8, Y+48	; 0x30
     36c:	90 68       	ori	r25, 0x80	; 128
     36e:	f0 88       	ldd	r15, Z+16	; 0x10
     370:	88 f0       	brcs	.+34     	; 0x394 <__trampolines_end+0x184>
     372:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x557f>
     376:	80 80       	ld	r8, Z
     378:	70 08       	sbc	r7, r0
     37a:	08 f0       	brcs	.+2      	; 0x37e <__trampolines_end+0x16e>
     37c:	f8 20       	and	r15, r8
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 88       	ldd	r2, Z+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 88       	ldd	r8, Y+16	; 0x10
     388:	88 70       	andi	r24, 0x08	; 8
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 88       	ldd	r8, Y+16	; 0x10
     38e:	88 50       	subi	r24, 0x08	; 8
     390:	20 88       	ldd	r2, Z+16	; 0x10
     392:	88 88       	ldd	r8, Y+16	; 0x10
     394:	a8 a8       	ldd	r10, Y+48	; 0x30
     396:	d8 88       	ldd	r13, Y+16	; 0x10
     398:	88 88       	ldd	r8, Y+16	; 0x10
     39a:	50 20       	and	r5, r0
     39c:	50 88       	ldd	r5, Z+16	; 0x10
     39e:	88 88       	ldd	r8, Y+16	; 0x10
     3a0:	88 50       	subi	r24, 0x08	; 8
     3a2:	20 20       	and	r2, r0
     3a4:	20 20       	and	r2, r0
     3a6:	f8 08       	sbc	r15, r8
     3a8:	10 20       	and	r1, r0
     3aa:	40 80       	ld	r4, Z
     3ac:	f8 38       	cpi	r31, 0x88	; 136
     3ae:	20 20       	and	r2, r0
     3b0:	20 20       	and	r2, r0
     3b2:	20 38       	cpi	r18, 0x80	; 128
     3b4:	00 80       	ld	r0, Z
     3b6:	40 20       	and	r4, r0
     3b8:	10 08       	sbc	r1, r0
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	20 20       	and	r2, r0
     3be:	20 20       	and	r2, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	20 50       	subi	r18, 0x00	; 0
     3c4:	88 00       	.word	0x0088	; ????
	...
     3ce:	00 f8       	bld	r0, 0
     3d0:	40 20       	and	r4, r0
     3d2:	10 00       	.word	0x0010	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	00 70       	andi	r16, 0x00	; 0
     3da:	08 78       	andi	r16, 0x88	; 136
     3dc:	88 78       	andi	r24, 0x88	; 136
     3de:	80 80       	ld	r8, Z
     3e0:	b0 c8       	rjmp	.-3744   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     3e2:	88 88       	ldd	r8, Y+16	; 0x10
     3e4:	f0 00       	.word	0x00f0	; ????
     3e6:	00 70       	andi	r16, 0x00	; 0
     3e8:	80 80       	ld	r8, Z
     3ea:	88 70       	andi	r24, 0x08	; 8
     3ec:	08 08       	sbc	r0, r8
     3ee:	68 98       	cbi	0x0d, 0	; 13
     3f0:	88 88       	ldd	r8, Y+16	; 0x10
     3f2:	78 00       	.word	0x0078	; ????
     3f4:	00 70       	andi	r16, 0x00	; 0
     3f6:	88 f8       	.word	0xf888	; ????
     3f8:	80 70       	andi	r24, 0x00	; 0
     3fa:	30 48       	sbci	r19, 0x80	; 128
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	40 40       	sbci	r20, 0x00	; 0
     400:	40 00       	.word	0x0040	; ????
     402:	00 78       	andi	r16, 0x80	; 128
     404:	88 78       	andi	r24, 0x88	; 136
     406:	08 30       	cpi	r16, 0x08	; 8
     408:	80 80       	ld	r8, Z
     40a:	b0 c8       	rjmp	.-3744   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     40c:	88 88       	ldd	r8, Y+16	; 0x10
     40e:	88 20       	and	r8, r8
     410:	00 60       	ori	r16, 0x00	; 0
     412:	20 20       	and	r2, r0
     414:	20 70       	andi	r18, 0x00	; 0
     416:	10 00       	.word	0x0010	; ????
     418:	30 10       	cpse	r3, r0
     41a:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d57>
     41e:	40 48       	sbci	r20, 0x80	; 128
     420:	50 60       	ori	r21, 0x00	; 0
     422:	50 48       	sbci	r21, 0x80	; 128
     424:	60 20       	and	r6, r0
     426:	20 20       	and	r2, r0
     428:	20 20       	and	r2, r0
     42a:	70 00       	.word	0x0070	; ????
     42c:	00 d0       	rcall	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	a8 a8       	ldd	r10, Y+48	; 0x30
     430:	88 88       	ldd	r8, Y+16	; 0x10
     432:	00 00       	nop
     434:	b0 c8       	rjmp	.-3744   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     436:	88 88       	ldd	r8, Y+16	; 0x10
     438:	88 00       	.word	0x0088	; ????
     43a:	00 70       	andi	r16, 0x00	; 0
     43c:	88 88       	ldd	r8, Y+16	; 0x10
     43e:	88 70       	andi	r24, 0x08	; 8
     440:	00 00       	nop
     442:	f0 88       	ldd	r15, Z+16	; 0x10
     444:	f0 80       	ld	r15, Z
     446:	80 00       	.word	0x0080	; ????
     448:	00 68       	ori	r16, 0x80	; 128
     44a:	98 78       	andi	r25, 0x88	; 136
     44c:	08 08       	sbc	r0, r8
     44e:	00 00       	nop
     450:	b0 c8       	rjmp	.-3744   	; 0xfffff5b2 <__eeprom_end+0xff7ef5b2>
     452:	80 80       	ld	r8, Z
     454:	80 00       	.word	0x0080	; ????
     456:	00 70       	andi	r16, 0x00	; 0
     458:	80 70       	andi	r24, 0x00	; 0
     45a:	08 f0       	brcs	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	40 40       	sbci	r20, 0x00	; 0
     45e:	e0 40       	sbci	r30, 0x00	; 0
     460:	40 48       	sbci	r20, 0x80	; 128
     462:	30 00       	.word	0x0030	; ????
     464:	00 88       	ldd	r0, Z+16	; 0x10
     466:	88 88       	ldd	r8, Y+16	; 0x10
     468:	98 68       	ori	r25, 0x88	; 136
     46a:	00 00       	nop
     46c:	88 88       	ldd	r8, Y+16	; 0x10
     46e:	88 50       	subi	r24, 0x08	; 8
     470:	20 00       	.word	0x0020	; ????
     472:	00 88       	ldd	r0, Z+16	; 0x10
     474:	88 a8       	ldd	r8, Y+48	; 0x30
     476:	a8 50       	subi	r26, 0x08	; 8
     478:	00 00       	nop
     47a:	88 50       	subi	r24, 0x08	; 8
     47c:	20 50       	subi	r18, 0x00	; 0
     47e:	88 00       	.word	0x0088	; ????
     480:	00 88       	ldd	r0, Z+16	; 0x10
     482:	88 78       	andi	r24, 0x88	; 136
     484:	08 70       	andi	r16, 0x08	; 8
     486:	00 00       	nop
     488:	f8 10       	cpse	r15, r8
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	f8 10       	cpse	r15, r8
     48e:	20 20       	and	r2, r0
     490:	40 20       	and	r4, r0
     492:	20 10       	cpse	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 20       	and	r2, r0
     49a:	20 40       	sbci	r18, 0x00	; 0
     49c:	20 20       	and	r2, r0
     49e:	10 20       	and	r1, r0
     4a0:	20 40       	sbci	r18, 0x00	; 0

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df e5       	ldi	r29, 0x5F	; 95
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	10 e2       	ldi	r17, 0x20	; 32
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b0 e2       	ldi	r27, 0x20	; 32
     4b8:	ec e2       	ldi	r30, 0x2C	; 44
     4ba:	f6 e3       	ldi	r31, 0x36	; 54
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a4 38       	cpi	r26, 0x84	; 132
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	23 e2       	ldi	r18, 0x23	; 35
     4ce:	a4 e8       	ldi	r26, 0x84	; 132
     4d0:	b0 e2       	ldi	r27, 0x20	; 32
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a9 30       	cpi	r26, 0x09	; 9
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 80 16 	call	0x2d00	; 0x2d00 <main>
     4e0:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4e8:	61 50       	subi	r22, 0x01	; 1
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 09       	sbc	r24, r1
     4ee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	81 05       	cpc	r24, r1
     4f6:	91 05       	cpc	r25, r1
     4f8:	b9 f7       	brne	.-18     	; 0x4e8 <__portable_avr_delay_cycles+0x2>
     4fa:	08 95       	ret

000004fc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	1f 92       	push	r1
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	16 e0       	ldi	r17, 0x06	; 6
     518:	68 94       	set
     51a:	ff 24       	eor	r15, r15
     51c:	f3 f8       	bld	r15, 3
     51e:	f8 01       	movw	r30, r16
     520:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     522:	64 e0       	ldi	r22, 0x04	; 4
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	dd df       	rcall	.-70     	; 0x4e6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     52c:	f8 01       	movw	r30, r16
     52e:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	d6 df       	rcall	.-84     	; 0x4e6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     53a:	0f 2e       	mov	r0, r31
     53c:	fb e2       	ldi	r31, 0x2B	; 43
     53e:	bf 2e       	mov	r11, r31
     540:	f0 2d       	mov	r31, r0
     542:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     544:	80 ea       	ldi	r24, 0xA0	; 160
     546:	99 e0       	ldi	r25, 0x09	; 9
     548:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     54c:	c1 2c       	mov	r12, r1
     54e:	d1 2c       	mov	r13, r1
     550:	76 01       	movw	r14, r12
     552:	00 e4       	ldi	r16, 0x40	; 64
     554:	12 e4       	ldi	r17, 0x42	; 66
     556:	2f e0       	ldi	r18, 0x0F	; 15
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	43 e0       	ldi	r20, 0x03	; 3
     55c:	be 01       	movw	r22, r28
     55e:	6f 5f       	subi	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	80 ea       	ldi	r24, 0xA0	; 160
     564:	99 e0       	ldi	r25, 0x09	; 9
     566:	0e 94 00 13 	call	0x2600	; 0x2600 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     56a:	00 e6       	ldi	r16, 0x60	; 96
     56c:	16 e0       	ldi	r17, 0x06	; 6
     56e:	ff 24       	eor	r15, r15
     570:	f3 94       	inc	r15
     572:	f8 01       	movw	r30, r16
     574:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     576:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     578:	be 01       	movw	r22, r28
     57a:	6f 5f       	subi	r22, 0xFF	; 255
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	80 ea       	ldi	r24, 0xA0	; 160
     580:	99 e0       	ldi	r25, 0x09	; 9
     582:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     586:	f8 01       	movw	r30, r16
     588:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     590:	85 ff       	sbrs	r24, 5
     592:	fd cf       	rjmp	.-6      	; 0x58e <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     594:	80 ea       	ldi	r24, 0xA0	; 160
     596:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     59a:	e0 ea       	ldi	r30, 0xA0	; 160
     59c:	f9 e0       	ldi	r31, 0x09	; 9
     59e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5a0:	86 ff       	sbrs	r24, 6
     5a2:	fd cf       	rjmp	.-6      	; 0x59e <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5a4:	e0 ea       	ldi	r30, 0xA0	; 160
     5a6:	f9 e0       	ldi	r31, 0x09	; 9
     5a8:	80 e4       	ldi	r24, 0x40	; 64
     5aa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5ac:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ae:	be 01       	movw	r22, r28
     5b0:	6f 5f       	subi	r22, 0xFF	; 255
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	80 ea       	ldi	r24, 0xA0	; 160
     5b6:	99 e0       	ldi	r25, 0x09	; 9
     5b8:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5bc:	8b e2       	ldi	r24, 0x2B	; 43
     5be:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5c0:	be 01       	movw	r22, r28
     5c2:	6f 5f       	subi	r22, 0xFF	; 255
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	80 ea       	ldi	r24, 0xA0	; 160
     5c8:	99 e0       	ldi	r25, 0x09	; 9
     5ca:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5d4:	e0 ea       	ldi	r30, 0xA0	; 160
     5d6:	f9 e0       	ldi	r31, 0x09	; 9
     5d8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5da:	85 ff       	sbrs	r24, 5
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5de:	86 ea       	ldi	r24, 0xA6	; 166
     5e0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5e4:	e0 ea       	ldi	r30, 0xA0	; 160
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ea:	86 ff       	sbrs	r24, 6
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5ee:	e0 ea       	ldi	r30, 0xA0	; 160
     5f0:	f9 e0       	ldi	r31, 0x09	; 9
     5f2:	80 e4       	ldi	r24, 0x40	; 64
     5f4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5f6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5f8:	be 01       	movw	r22, r28
     5fa:	6f 5f       	subi	r22, 0xFF	; 255
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	80 ea       	ldi	r24, 0xA0	; 160
     600:	99 e0       	ldi	r25, 0x09	; 9
     602:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     606:	8b e2       	ldi	r24, 0x2B	; 43
     608:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     60a:	be 01       	movw	r22, r28
     60c:	6f 5f       	subi	r22, 0xFF	; 255
     60e:	7f 4f       	sbci	r23, 0xFF	; 255
     610:	80 ea       	ldi	r24, 0xA0	; 160
     612:	99 e0       	ldi	r25, 0x09	; 9
     614:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     61e:	e0 ea       	ldi	r30, 0xA0	; 160
     620:	f9 e0       	ldi	r31, 0x09	; 9
     622:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     624:	85 ff       	sbrs	r24, 5
     626:	fd cf       	rjmp	.-6      	; 0x622 <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     628:	88 ec       	ldi	r24, 0xC8	; 200
     62a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     62e:	e0 ea       	ldi	r30, 0xA0	; 160
     630:	f9 e0       	ldi	r31, 0x09	; 9
     632:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     634:	86 ff       	sbrs	r24, 6
     636:	fd cf       	rjmp	.-6      	; 0x632 <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     638:	e0 ea       	ldi	r30, 0xA0	; 160
     63a:	f9 e0       	ldi	r31, 0x09	; 9
     63c:	80 e4       	ldi	r24, 0x40	; 64
     63e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     640:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     642:	be 01       	movw	r22, r28
     644:	6f 5f       	subi	r22, 0xFF	; 255
     646:	7f 4f       	sbci	r23, 0xFF	; 255
     648:	80 ea       	ldi	r24, 0xA0	; 160
     64a:	99 e0       	ldi	r25, 0x09	; 9
     64c:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     650:	8b e2       	ldi	r24, 0x2B	; 43
     652:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     654:	be 01       	movw	r22, r28
     656:	6f 5f       	subi	r22, 0xFF	; 255
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	80 ea       	ldi	r24, 0xA0	; 160
     65c:	99 e0       	ldi	r25, 0x09	; 9
     65e:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     668:	e0 ea       	ldi	r30, 0xA0	; 160
     66a:	f9 e0       	ldi	r31, 0x09	; 9
     66c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     66e:	85 ff       	sbrs	r24, 5
     670:	fd cf       	rjmp	.-6      	; 0x66c <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     672:	82 ea       	ldi	r24, 0xA2	; 162
     674:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     678:	e0 ea       	ldi	r30, 0xA0	; 160
     67a:	f9 e0       	ldi	r31, 0x09	; 9
     67c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     67e:	86 ff       	sbrs	r24, 6
     680:	fd cf       	rjmp	.-6      	; 0x67c <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     682:	e0 ea       	ldi	r30, 0xA0	; 160
     684:	f9 e0       	ldi	r31, 0x09	; 9
     686:	80 e4       	ldi	r24, 0x40	; 64
     688:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     68a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     68c:	be 01       	movw	r22, r28
     68e:	6f 5f       	subi	r22, 0xFF	; 255
     690:	7f 4f       	sbci	r23, 0xFF	; 255
     692:	80 ea       	ldi	r24, 0xA0	; 160
     694:	99 e0       	ldi	r25, 0x09	; 9
     696:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     69a:	8b e2       	ldi	r24, 0x2B	; 43
     69c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     69e:	be 01       	movw	r22, r28
     6a0:	6f 5f       	subi	r22, 0xFF	; 255
     6a2:	7f 4f       	sbci	r23, 0xFF	; 255
     6a4:	80 ea       	ldi	r24, 0xA0	; 160
     6a6:	99 e0       	ldi	r25, 0x09	; 9
     6a8:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6b2:	e0 ea       	ldi	r30, 0xA0	; 160
     6b4:	f9 e0       	ldi	r31, 0x09	; 9
     6b6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6b8:	85 ff       	sbrs	r24, 5
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6bc:	8f e2       	ldi	r24, 0x2F	; 47
     6be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6c2:	e0 ea       	ldi	r30, 0xA0	; 160
     6c4:	f9 e0       	ldi	r31, 0x09	; 9
     6c6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6c8:	86 ff       	sbrs	r24, 6
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6cc:	e0 ea       	ldi	r30, 0xA0	; 160
     6ce:	f9 e0       	ldi	r31, 0x09	; 9
     6d0:	80 e4       	ldi	r24, 0x40	; 64
     6d2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6d4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6d6:	be 01       	movw	r22, r28
     6d8:	6f 5f       	subi	r22, 0xFF	; 255
     6da:	7f 4f       	sbci	r23, 0xFF	; 255
     6dc:	80 ea       	ldi	r24, 0xA0	; 160
     6de:	99 e0       	ldi	r25, 0x09	; 9
     6e0:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6e4:	8b e2       	ldi	r24, 0x2B	; 43
     6e6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6e8:	be 01       	movw	r22, r28
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	80 ea       	ldi	r24, 0xA0	; 160
     6f0:	99 e0       	ldi	r25, 0x09	; 9
     6f2:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
     700:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     702:	85 ff       	sbrs	r24, 5
     704:	fd cf       	rjmp	.-6      	; 0x700 <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     706:	88 ef       	ldi	r24, 0xF8	; 248
     708:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     70c:	e0 ea       	ldi	r30, 0xA0	; 160
     70e:	f9 e0       	ldi	r31, 0x09	; 9
     710:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     712:	86 ff       	sbrs	r24, 6
     714:	fd cf       	rjmp	.-6      	; 0x710 <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     716:	e0 ea       	ldi	r30, 0xA0	; 160
     718:	f9 e0       	ldi	r31, 0x09	; 9
     71a:	80 e4       	ldi	r24, 0x40	; 64
     71c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     71e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     720:	be 01       	movw	r22, r28
     722:	6f 5f       	subi	r22, 0xFF	; 255
     724:	7f 4f       	sbci	r23, 0xFF	; 255
     726:	80 ea       	ldi	r24, 0xA0	; 160
     728:	99 e0       	ldi	r25, 0x09	; 9
     72a:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     72e:	8b e2       	ldi	r24, 0x2B	; 43
     730:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     732:	be 01       	movw	r22, r28
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	80 ea       	ldi	r24, 0xA0	; 160
     73a:	99 e0       	ldi	r25, 0x09	; 9
     73c:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     746:	e0 ea       	ldi	r30, 0xA0	; 160
     748:	f9 e0       	ldi	r31, 0x09	; 9
     74a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     74c:	85 ff       	sbrs	r24, 5
     74e:	fd cf       	rjmp	.-6      	; 0x74a <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     750:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     754:	e0 ea       	ldi	r30, 0xA0	; 160
     756:	f9 e0       	ldi	r31, 0x09	; 9
     758:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     75a:	86 ff       	sbrs	r24, 6
     75c:	fd cf       	rjmp	.-6      	; 0x758 <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     75e:	e0 ea       	ldi	r30, 0xA0	; 160
     760:	f9 e0       	ldi	r31, 0x09	; 9
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     766:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     768:	be 01       	movw	r22, r28
     76a:	6f 5f       	subi	r22, 0xFF	; 255
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	80 ea       	ldi	r24, 0xA0	; 160
     770:	99 e0       	ldi	r25, 0x09	; 9
     772:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     776:	8b e2       	ldi	r24, 0x2B	; 43
     778:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	80 ea       	ldi	r24, 0xA0	; 160
     782:	99 e0       	ldi	r25, 0x09	; 9
     784:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     78e:	e0 ea       	ldi	r30, 0xA0	; 160
     790:	f9 e0       	ldi	r31, 0x09	; 9
     792:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     794:	85 ff       	sbrs	r24, 5
     796:	fd cf       	rjmp	.-6      	; 0x792 <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     798:	81 e2       	ldi	r24, 0x21	; 33
     79a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7a4:	86 ff       	sbrs	r24, 6
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7a8:	e0 ea       	ldi	r30, 0xA0	; 160
     7aa:	f9 e0       	ldi	r31, 0x09	; 9
     7ac:	80 e4       	ldi	r24, 0x40	; 64
     7ae:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7b0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7b2:	be 01       	movw	r22, r28
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	80 ea       	ldi	r24, 0xA0	; 160
     7ba:	99 e0       	ldi	r25, 0x09	; 9
     7bc:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7c0:	8b e2       	ldi	r24, 0x2B	; 43
     7c2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7c4:	be 01       	movw	r22, r28
     7c6:	6f 5f       	subi	r22, 0xFF	; 255
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	80 ea       	ldi	r24, 0xA0	; 160
     7cc:	99 e0       	ldi	r25, 0x09	; 9
     7ce:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7d8:	e0 ea       	ldi	r30, 0xA0	; 160
     7da:	f9 e0       	ldi	r31, 0x09	; 9
     7dc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7de:	85 ff       	sbrs	r24, 5
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7e2:	81 e8       	ldi	r24, 0x81	; 129
     7e4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7e8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ea:	f9 e0       	ldi	r31, 0x09	; 9
     7ec:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ee:	86 ff       	sbrs	r24, 6
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f2:	e0 ea       	ldi	r30, 0xA0	; 160
     7f4:	f9 e0       	ldi	r31, 0x09	; 9
     7f6:	80 e4       	ldi	r24, 0x40	; 64
     7f8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7fa:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7fc:	be 01       	movw	r22, r28
     7fe:	6f 5f       	subi	r22, 0xFF	; 255
     800:	7f 4f       	sbci	r23, 0xFF	; 255
     802:	80 ea       	ldi	r24, 0xA0	; 160
     804:	99 e0       	ldi	r25, 0x09	; 9
     806:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     80a:	8b e2       	ldi	r24, 0x2B	; 43
     80c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     80e:	be 01       	movw	r22, r28
     810:	6f 5f       	subi	r22, 0xFF	; 255
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	80 ea       	ldi	r24, 0xA0	; 160
     816:	99 e0       	ldi	r25, 0x09	; 9
     818:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     822:	e0 ea       	ldi	r30, 0xA0	; 160
     824:	f9 e0       	ldi	r31, 0x09	; 9
     826:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     828:	85 ff       	sbrs	r24, 5
     82a:	fd cf       	rjmp	.-6      	; 0x826 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     82c:	81 e2       	ldi	r24, 0x21	; 33
     82e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     832:	e0 ea       	ldi	r30, 0xA0	; 160
     834:	f9 e0       	ldi	r31, 0x09	; 9
     836:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     838:	86 ff       	sbrs	r24, 6
     83a:	fd cf       	rjmp	.-6      	; 0x836 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     83c:	e0 ea       	ldi	r30, 0xA0	; 160
     83e:	f9 e0       	ldi	r31, 0x09	; 9
     840:	80 e4       	ldi	r24, 0x40	; 64
     842:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     844:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     846:	be 01       	movw	r22, r28
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	7f 4f       	sbci	r23, 0xFF	; 255
     84c:	80 ea       	ldi	r24, 0xA0	; 160
     84e:	99 e0       	ldi	r25, 0x09	; 9
     850:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     854:	8b e2       	ldi	r24, 0x2B	; 43
     856:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     858:	be 01       	movw	r22, r28
     85a:	6f 5f       	subi	r22, 0xFF	; 255
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	80 ea       	ldi	r24, 0xA0	; 160
     860:	99 e0       	ldi	r25, 0x09	; 9
     862:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     86c:	e0 ea       	ldi	r30, 0xA0	; 160
     86e:	f9 e0       	ldi	r31, 0x09	; 9
     870:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     872:	85 ff       	sbrs	r24, 5
     874:	fd cf       	rjmp	.-6      	; 0x870 <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     876:	8f ea       	ldi	r24, 0xAF	; 175
     878:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     87c:	e0 ea       	ldi	r30, 0xA0	; 160
     87e:	f9 e0       	ldi	r31, 0x09	; 9
     880:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     882:	86 ff       	sbrs	r24, 6
     884:	fd cf       	rjmp	.-6      	; 0x880 <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     886:	e0 ea       	ldi	r30, 0xA0	; 160
     888:	f9 e0       	ldi	r31, 0x09	; 9
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     88e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     890:	be 01       	movw	r22, r28
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	80 ea       	ldi	r24, 0xA0	; 160
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     89e:	0f 90       	pop	r0
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	08 95       	ret

000008b4 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	1f 92       	push	r1
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	08 2f       	mov	r16, r24
     8c6:	f6 2e       	mov	r15, r22
     8c8:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8ca:	0e 94 4b 13 	call	0x2696	; 0x2696 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8ce:	0f 70       	andi	r16, 0x0F	; 15
     8d0:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8d2:	8b e2       	ldi	r24, 0x2B	; 43
     8d4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8d6:	be 01       	movw	r22, r28
     8d8:	6f 5f       	subi	r22, 0xFF	; 255
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	80 ea       	ldi	r24, 0xA0	; 160
     8de:	99 e0       	ldi	r25, 0x09	; 9
     8e0:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8ea:	e0 ea       	ldi	r30, 0xA0	; 160
     8ec:	f9 e0       	ldi	r31, 0x09	; 9
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f0:	95 ff       	sbrs	r25, 5
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <gfx_mono_st7565r_put_byte+0x3a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8f4:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8f8:	e0 ea       	ldi	r30, 0xA0	; 160
     8fa:	f9 e0       	ldi	r31, 0x09	; 9
     8fc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8fe:	86 ff       	sbrs	r24, 6
     900:	fd cf       	rjmp	.-6      	; 0x8fc <gfx_mono_st7565r_put_byte+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     902:	e0 ea       	ldi	r30, 0xA0	; 160
     904:	f9 e0       	ldi	r31, 0x09	; 9
     906:	80 e4       	ldi	r24, 0x40	; 64
     908:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     90a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     90c:	be 01       	movw	r22, r28
     90e:	6f 5f       	subi	r22, 0xFF	; 255
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	80 ea       	ldi	r24, 0xA0	; 160
     914:	99 e0       	ldi	r25, 0x09	; 9
     916:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     91a:	0f 2d       	mov	r16, r15
     91c:	0f 77       	andi	r16, 0x7F	; 127
     91e:	02 95       	swap	r16
     920:	0f 70       	andi	r16, 0x0F	; 15
     922:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     924:	8b e2       	ldi	r24, 0x2B	; 43
     926:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	80 ea       	ldi	r24, 0xA0	; 160
     930:	99 e0       	ldi	r25, 0x09	; 9
     932:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     93c:	e0 ea       	ldi	r30, 0xA0	; 160
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     942:	85 ff       	sbrs	r24, 5
     944:	fd cf       	rjmp	.-6      	; 0x940 <gfx_mono_st7565r_put_byte+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     946:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     94a:	e0 ea       	ldi	r30, 0xA0	; 160
     94c:	f9 e0       	ldi	r31, 0x09	; 9
     94e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     950:	86 ff       	sbrs	r24, 6
     952:	fd cf       	rjmp	.-6      	; 0x94e <gfx_mono_st7565r_put_byte+0x9a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     954:	e0 ea       	ldi	r30, 0xA0	; 160
     956:	f9 e0       	ldi	r31, 0x09	; 9
     958:	80 e4       	ldi	r24, 0x40	; 64
     95a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     95c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	80 ea       	ldi	r24, 0xA0	; 160
     966:	99 e0       	ldi	r25, 0x09	; 9
     968:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     96c:	0f 2d       	mov	r16, r15
     96e:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     970:	8b e2       	ldi	r24, 0x2B	; 43
     972:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     974:	be 01       	movw	r22, r28
     976:	6f 5f       	subi	r22, 0xFF	; 255
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	80 ea       	ldi	r24, 0xA0	; 160
     97c:	99 e0       	ldi	r25, 0x09	; 9
     97e:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     988:	e0 ea       	ldi	r30, 0xA0	; 160
     98a:	f9 e0       	ldi	r31, 0x09	; 9
     98c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     98e:	85 ff       	sbrs	r24, 5
     990:	fd cf       	rjmp	.-6      	; 0x98c <gfx_mono_st7565r_put_byte+0xd8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     992:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     996:	e0 ea       	ldi	r30, 0xA0	; 160
     998:	f9 e0       	ldi	r31, 0x09	; 9
     99a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     99c:	86 ff       	sbrs	r24, 6
     99e:	fd cf       	rjmp	.-6      	; 0x99a <gfx_mono_st7565r_put_byte+0xe6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9a0:	e0 ea       	ldi	r30, 0xA0	; 160
     9a2:	f9 e0       	ldi	r31, 0x09	; 9
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9a8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9aa:	be 01       	movw	r22, r28
     9ac:	6f 5f       	subi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	80 ea       	ldi	r24, 0xA0	; 160
     9b2:	99 e0       	ldi	r25, 0x09	; 9
     9b4:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9b8:	8b e2       	ldi	r24, 0x2B	; 43
     9ba:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9bc:	be 01       	movw	r22, r28
     9be:	6f 5f       	subi	r22, 0xFF	; 255
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	80 ea       	ldi	r24, 0xA0	; 160
     9c4:	99 e0       	ldi	r25, 0x09	; 9
     9c6:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9d0:	e0 ea       	ldi	r30, 0xA0	; 160
     9d2:	f9 e0       	ldi	r31, 0x09	; 9
     9d4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9d6:	85 ff       	sbrs	r24, 5
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <gfx_mono_st7565r_put_byte+0x120>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9da:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9de:	e0 ea       	ldi	r30, 0xA0	; 160
     9e0:	f9 e0       	ldi	r31, 0x09	; 9
     9e2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9e4:	86 ff       	sbrs	r24, 6
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <gfx_mono_st7565r_put_byte+0x12e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9e8:	e0 ea       	ldi	r30, 0xA0	; 160
     9ea:	f9 e0       	ldi	r31, 0x09	; 9
     9ec:	80 e4       	ldi	r24, 0x40	; 64
     9ee:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9f0:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9f8:	be 01       	movw	r22, r28
     9fa:	6f 5f       	subi	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	80 ea       	ldi	r24, 0xA0	; 160
     a00:	99 e0       	ldi	r25, 0x09	; 9
     a02:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     a06:	0f 90       	pop	r0
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	08 95       	ret

00000a14 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a22:	84 e8       	ldi	r24, 0x84	; 132
     a24:	90 e2       	ldi	r25, 0x20	; 32
     a26:	0e 94 46 13 	call	0x268c	; 0x268c <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a2a:	68 dd       	rcall	.-1328   	; 0x4fc <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a2c:	8b e2       	ldi	r24, 0x2B	; 43
     a2e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a30:	be 01       	movw	r22, r28
     a32:	6f 5f       	subi	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	80 ea       	ldi	r24, 0xA0	; 160
     a38:	99 e0       	ldi	r25, 0x09	; 9
     a3a:	0e 94 1a 13 	call	0x2634	; 0x2634 <usart_spi_select_device>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a44:	e0 ea       	ldi	r30, 0xA0	; 160
     a46:	f9 e0       	ldi	r31, 0x09	; 9
     a48:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a4a:	85 ff       	sbrs	r24, 5
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <gfx_mono_st7565r_init+0x34>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a54:	e0 ea       	ldi	r30, 0xA0	; 160
     a56:	f9 e0       	ldi	r31, 0x09	; 9
     a58:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a5a:	86 ff       	sbrs	r24, 6
     a5c:	fd cf       	rjmp	.-6      	; 0xa58 <gfx_mono_st7565r_init+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a5e:	e0 ea       	ldi	r30, 0xA0	; 160
     a60:	f9 e0       	ldi	r31, 0x09	; 9
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a66:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a68:	be 01       	movw	r22, r28
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	80 ea       	ldi	r24, 0xA0	; 160
     a70:	99 e0       	ldi	r25, 0x09	; 9
     a72:	0e 94 30 13 	call	0x2660	; 0x2660 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	0a c0       	rjmp	.+20     	; 0xa8e <gfx_mono_st7565r_init+0x7a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	61 2f       	mov	r22, r17
     a7e:	80 2f       	mov	r24, r16
     a80:	19 df       	rcall	.-462    	; 0x8b4 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a82:	1f 5f       	subi	r17, 0xFF	; 255
     a84:	10 38       	cpi	r17, 0x80	; 128
     a86:	c9 f7       	brne	.-14     	; 0xa7a <gfx_mono_st7565r_init+0x66>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	04 30       	cpi	r16, 0x04	; 4
     a8c:	11 f0       	breq	.+4      	; 0xa92 <gfx_mono_st7565r_init+0x7e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	f4 cf       	rjmp	.-24     	; 0xa7a <gfx_mono_st7565r_init+0x66>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     aa8:	88 23       	and	r24, r24
     aaa:	54 f1       	brlt	.+84     	; 0xb00 <gfx_mono_st7565r_draw_pixel+0x62>
     aac:	60 32       	cpi	r22, 0x20	; 32
     aae:	40 f5       	brcc	.+80     	; 0xb00 <gfx_mono_st7565r_draw_pixel+0x62>
     ab0:	d4 2f       	mov	r29, r20
     ab2:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ab4:	f6 2e       	mov	r15, r22
     ab6:	f6 94       	lsr	r15
     ab8:	f6 94       	lsr	r15
     aba:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	88 e0       	ldi	r24, 0x08	; 8
     ac0:	f8 9e       	mul	r15, r24
     ac2:	60 19       	sub	r22, r0
     ac4:	71 09       	sbc	r23, r1
     ac6:	11 24       	eor	r1, r1
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	8c 01       	movw	r16, r24
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <gfx_mono_st7565r_draw_pixel+0x36>
     ad0:	00 0f       	add	r16, r16
     ad2:	11 1f       	adc	r17, r17
     ad4:	6a 95       	dec	r22
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ad8:	6c 2f       	mov	r22, r28
     ada:	8f 2d       	mov	r24, r15
     adc:	0e 94 59 13 	call	0x26b2	; 0x26b2 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     ae0:	d1 30       	cpi	r29, 0x01	; 1
     ae2:	21 f0       	breq	.+8      	; 0xaec <gfx_mono_st7565r_draw_pixel+0x4e>
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <gfx_mono_st7565r_draw_pixel+0x52>
     ae6:	d2 30       	cpi	r29, 0x02	; 2
     ae8:	31 f0       	breq	.+12     	; 0xaf6 <gfx_mono_st7565r_draw_pixel+0x58>
     aea:	06 c0       	rjmp	.+12     	; 0xaf8 <gfx_mono_st7565r_draw_pixel+0x5a>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aec:	80 2b       	or	r24, r16
		break;
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     af0:	00 95       	com	r16
     af2:	80 23       	and	r24, r16
		break;
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     af6:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     af8:	48 2f       	mov	r20, r24
     afa:	6c 2f       	mov	r22, r28
     afc:	8f 2d       	mov	r24, r15
     afe:	da de       	rcall	.-588    	; 0x8b4 <gfx_mono_st7565r_put_byte>
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	08 95       	ret

00000b0c <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b0c:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     b10:	08 95       	ret

00000b12 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b12:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b14:	03 96       	adiw	r24, 0x03	; 3
     b16:	81 83       	std	Z+1, r24	; 0x01
     b18:	92 83       	std	Z+2, r25	; 0x02

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	3f ef       	ldi	r19, 0xFF	; 255
     b1e:	23 83       	std	Z+3, r18	; 0x03
     b20:	34 83       	std	Z+4, r19	; 0x04

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b22:	85 83       	std	Z+5, r24	; 0x05
     b24:	96 83       	std	Z+6, r25	; 0x06
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b26:	87 83       	std	Z+7, r24	; 0x07
     b28:	90 87       	std	Z+8, r25	; 0x08

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b2a:	10 82       	st	Z, r1
     b2c:	08 95       	ret

00000b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     b2e:	fc 01       	movw	r30, r24
     b30:	10 86       	std	Z+8, r1	; 0x08
     b32:	11 86       	std	Z+9, r1	; 0x09
     b34:	08 95       	ret

00000b36 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	9c 01       	movw	r18, r24
     b3c:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     b3e:	dc 01       	movw	r26, r24
     b40:	11 96       	adiw	r26, 0x01	; 1
     b42:	cd 91       	ld	r28, X+
     b44:	dc 91       	ld	r29, X
     b46:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     b48:	c2 83       	std	Z+2, r28	; 0x02
     b4a:	d3 83       	std	Z+3, r29	; 0x03
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     b4c:	8c 81       	ldd	r24, Y+4	; 0x04
     b4e:	9d 81       	ldd	r25, Y+5	; 0x05
     b50:	84 83       	std	Z+4, r24	; 0x04
     b52:	95 83       	std	Z+5, r25	; 0x05

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	dc 01       	movw	r26, r24
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	6d 93       	st	X+, r22
     b5e:	7c 93       	st	X, r23
     b60:	13 97       	sbiw	r26, 0x03	; 3
    pxIndex->pxPrevious = pxNewListItem;
     b62:	6c 83       	std	Y+4, r22	; 0x04
     b64:	7d 83       	std	Y+5, r23	; 0x05

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     b66:	20 87       	std	Z+8, r18	; 0x08
     b68:	31 87       	std	Z+9, r19	; 0x09

    ( pxList->uxNumberOfItems )++;
     b6a:	f9 01       	movw	r30, r18
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	80 83       	st	Z, r24
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b7e:	48 81       	ld	r20, Y
     b80:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     b82:	4f 3f       	cpi	r20, 0xFF	; 255
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	52 07       	cpc	r21, r18
     b88:	21 f4       	brne	.+8      	; 0xb92 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     b8a:	fc 01       	movw	r30, r24
     b8c:	a7 81       	ldd	r26, Z+7	; 0x07
     b8e:	b0 85       	ldd	r27, Z+8	; 0x08
     b90:	0d c0       	rjmp	.+26     	; 0xbac <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b92:	dc 01       	movw	r26, r24
     b94:	13 96       	adiw	r26, 0x03	; 3
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <vListInsert+0x22>
     b98:	df 01       	movw	r26, r30
     b9a:	12 96       	adiw	r26, 0x02	; 2
     b9c:	ed 91       	ld	r30, X+
     b9e:	fc 91       	ld	r31, X
     ba0:	13 97       	sbiw	r26, 0x03	; 3
     ba2:	20 81       	ld	r18, Z
     ba4:	31 81       	ldd	r19, Z+1	; 0x01
     ba6:	42 17       	cp	r20, r18
     ba8:	53 07       	cpc	r21, r19
     baa:	b0 f7       	brcc	.-20     	; 0xb98 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bac:	12 96       	adiw	r26, 0x02	; 2
     bae:	ed 91       	ld	r30, X+
     bb0:	fc 91       	ld	r31, X
     bb2:	13 97       	sbiw	r26, 0x03	; 3
     bb4:	ea 83       	std	Y+2, r30	; 0x02
     bb6:	fb 83       	std	Y+3, r31	; 0x03
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bb8:	c4 83       	std	Z+4, r28	; 0x04
     bba:	d5 83       	std	Z+5, r29	; 0x05
    pxNewListItem->pxPrevious = pxIterator;
     bbc:	ac 83       	std	Y+4, r26	; 0x04
     bbe:	bd 83       	std	Y+5, r27	; 0x05
    pxIterator->pxNext = pxNewListItem;
     bc0:	12 96       	adiw	r26, 0x02	; 2
     bc2:	cd 93       	st	X+, r28
     bc4:	dc 93       	st	X, r29
     bc6:	13 97       	sbiw	r26, 0x03	; 3

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     bc8:	88 87       	std	Y+8, r24	; 0x08
     bca:	99 87       	std	Y+9, r25	; 0x09

    ( pxList->uxNumberOfItems )++;
     bcc:	fc 01       	movw	r30, r24
     bce:	20 81       	ld	r18, Z
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	20 83       	st	Z, r18
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     be0:	a0 85       	ldd	r26, Z+8	; 0x08
     be2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     be4:	c2 81       	ldd	r28, Z+2	; 0x02
     be6:	d3 81       	ldd	r29, Z+3	; 0x03
     be8:	84 81       	ldd	r24, Z+4	; 0x04
     bea:	95 81       	ldd	r25, Z+5	; 0x05
     bec:	8c 83       	std	Y+4, r24	; 0x04
     bee:	9d 83       	std	Y+5, r25	; 0x05
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     bf0:	c4 81       	ldd	r28, Z+4	; 0x04
     bf2:	d5 81       	ldd	r29, Z+5	; 0x05
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	8a 83       	std	Y+2, r24	; 0x02
     bfa:	9b 83       	std	Y+3, r25	; 0x03

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     bfc:	11 96       	adiw	r26, 0x01	; 1
     bfe:	8d 91       	ld	r24, X+
     c00:	9c 91       	ld	r25, X
     c02:	12 97       	sbiw	r26, 0x02	; 2
     c04:	e8 17       	cp	r30, r24
     c06:	f9 07       	cpc	r31, r25
     c08:	31 f4       	brne	.+12     	; 0xc16 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c0a:	84 81       	ldd	r24, Z+4	; 0x04
     c0c:	95 81       	ldd	r25, Z+5	; 0x05
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	8d 93       	st	X+, r24
     c12:	9c 93       	st	X, r25
     c14:	12 97       	sbiw	r26, 0x02	; 2
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c16:	10 86       	std	Z+8, r1	; 0x08
     c18:	11 86       	std	Z+9, r1	; 0x09
    ( pxList->uxNumberOfItems )--;
     c1a:	8c 91       	ld	r24, X
     c1c:	81 50       	subi	r24, 0x01	; 1
     c1e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c20:	8c 91       	ld	r24, X
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
     c2e:	71 e1       	ldi	r23, 0x11	; 17
     c30:	fc 01       	movw	r30, r24
     c32:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	62 e2       	ldi	r22, 0x22	; 34
     c38:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	23 e3       	ldi	r18, 0x33	; 51
     c3e:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
     c40:	01 2e       	mov	r0, r17
     c42:	00 0c       	add	r0, r0
     c44:	22 0b       	sbc	r18, r18
     c46:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
     c58:	31 97       	sbiw	r30, 0x01	; 1
     c5a:	20 e8       	ldi	r18, 0x80	; 128
     c5c:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	22 e0       	ldi	r18, 0x02	; 2
     c66:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	23 e0       	ldi	r18, 0x03	; 3
     c6c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	24 e0       	ldi	r18, 0x04	; 4
     c72:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
     c74:	31 97       	sbiw	r30, 0x01	; 1
     c76:	25 e0       	ldi	r18, 0x05	; 5
     c78:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
     c7a:	31 97       	sbiw	r30, 0x01	; 1
     c7c:	26 e0       	ldi	r18, 0x06	; 6
     c7e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	27 e0       	ldi	r18, 0x07	; 7
     c84:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	28 e0       	ldi	r18, 0x08	; 8
     c8a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	29 e0       	ldi	r18, 0x09	; 9
     c90:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	20 e1       	ldi	r18, 0x10	; 16
     c96:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	22 e1       	ldi	r18, 0x12	; 18
     ca0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	23 e1       	ldi	r18, 0x13	; 19
     ca6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
     ca8:	31 97       	sbiw	r30, 0x01	; 1
     caa:	24 e1       	ldi	r18, 0x14	; 20
     cac:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	25 e1       	ldi	r18, 0x15	; 21
     cb2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	26 e1       	ldi	r18, 0x16	; 22
     cb8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
     cba:	31 97       	sbiw	r30, 0x01	; 1
     cbc:	27 e1       	ldi	r18, 0x17	; 23
     cbe:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	28 e1       	ldi	r18, 0x18	; 24
     cc4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	29 e1       	ldi	r18, 0x19	; 25
     cca:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	20 e2       	ldi	r18, 0x20	; 32
     cd0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	21 e2       	ldi	r18, 0x21	; 33
     cd6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	23 e2       	ldi	r18, 0x23	; 35
     ce0:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	26 e2       	ldi	r18, 0x26	; 38
     cee:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	27 e2       	ldi	r18, 0x27	; 39
     cf4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	28 e2       	ldi	r18, 0x28	; 40
     cfa:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	29 e2       	ldi	r18, 0x29	; 41
     d00:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	20 e3       	ldi	r18, 0x30	; 48
     d06:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	21 e3       	ldi	r18, 0x31	; 49
     d0c:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
     d0e:	87 97       	sbiw	r24, 0x27	; 39
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
     d16:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
     d18:	e0 e7       	ldi	r30, 0x70	; 112
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	83 81       	ldd	r24, Z+3	; 0x03
     d1e:	8a 7f       	andi	r24, 0xFA	; 250
     d20:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
     d22:	e0 e0       	ldi	r30, 0x00	; 0
     d24:	f8 e0       	ldi	r31, 0x08	; 8
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	9a ef       	ldi	r25, 0xFA	; 250
     d2a:	86 a3       	std	Z+38, r24	; 0x26
     d2c:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
     d32:	a0 ea       	ldi	r26, 0xA0	; 160
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	8c 91       	ld	r24, X
     d3a:	12 97       	sbiw	r26, 0x02	; 2
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	12 96       	adiw	r26, 0x02	; 2
     d40:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
     d42:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
     d44:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
     d46:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <pxCurrentTCB>
     d4a:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
     d4e:	0d 90       	ld	r0, X+
     d50:	0d be       	out	0x3d, r0	; 61
     d52:	0d 90       	ld	r0, X+
     d54:	0e be       	out	0x3e, r0	; 62
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	bf 91       	pop	r27
     d60:	af 91       	pop	r26
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	7f 91       	pop	r23
     d68:	6f 91       	pop	r22
     d6a:	5f 91       	pop	r21
     d6c:	4f 91       	pop	r20
     d6e:	3f 91       	pop	r19
     d70:	2f 91       	pop	r18
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	bf 90       	pop	r11
     d80:	af 90       	pop	r10
     d82:	9f 90       	pop	r9
     d84:	8f 90       	pop	r8
     d86:	7f 90       	pop	r7
     d88:	6f 90       	pop	r6
     d8a:	5f 90       	pop	r5
     d8c:	4f 90       	pop	r4
     d8e:	3f 90       	pop	r3
     d90:	2f 90       	pop	r2
     d92:	1f 90       	pop	r1
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
     d9a:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	08 95       	ret

00000da0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	0f 92       	push	r0
     da8:	1f 92       	push	r1
     daa:	11 24       	eor	r1, r1
     dac:	2f 92       	push	r2
     dae:	3f 92       	push	r3
     db0:	4f 92       	push	r4
     db2:	5f 92       	push	r5
     db4:	6f 92       	push	r6
     db6:	7f 92       	push	r7
     db8:	8f 92       	push	r8
     dba:	9f 92       	push	r9
     dbc:	af 92       	push	r10
     dbe:	bf 92       	push	r11
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	2f 93       	push	r18
     dce:	3f 93       	push	r19
     dd0:	4f 93       	push	r20
     dd2:	5f 93       	push	r21
     dd4:	6f 93       	push	r22
     dd6:	7f 93       	push	r23
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
     de8:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <pxCurrentTCB>
     dec:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
     df0:	0d b6       	in	r0, 0x3d	; 61
     df2:	0d 92       	st	X+, r0
     df4:	0e b6       	in	r0, 0x3e	; 62
     df6:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     df8:	80 d6       	rcall	.+3328   	; 0x1afa <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     dfa:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <pxCurrentTCB>
     dfe:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
     e02:	0d 90       	ld	r0, X+
     e04:	0d be       	out	0x3d, r0	; 61
     e06:	0d 90       	ld	r0, X+
     e08:	0e be       	out	0x3e, r0	; 62
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	7f 91       	pop	r23
     e1c:	6f 91       	pop	r22
     e1e:	5f 91       	pop	r21
     e20:	4f 91       	pop	r20
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	df 90       	pop	r13
     e30:	cf 90       	pop	r12
     e32:	bf 90       	pop	r11
     e34:	af 90       	pop	r10
     e36:	9f 90       	pop	r9
     e38:	8f 90       	pop	r8
     e3a:	7f 90       	pop	r7
     e3c:	6f 90       	pop	r6
     e3e:	5f 90       	pop	r5
     e40:	4f 90       	pop	r4
     e42:	3f 90       	pop	r3
     e44:	2f 90       	pop	r2
     e46:	1f 90       	pop	r1
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0

    asm volatile ( "ret" );
     e4e:	08 95       	ret

00000e50 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	0f 92       	push	r0
     e58:	1f 92       	push	r1
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 92       	push	r2
     e5e:	3f 92       	push	r3
     e60:	4f 92       	push	r4
     e62:	5f 92       	push	r5
     e64:	6f 92       	push	r6
     e66:	7f 92       	push	r7
     e68:	8f 92       	push	r8
     e6a:	9f 92       	push	r9
     e6c:	af 92       	push	r10
     e6e:	bf 92       	push	r11
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ef 93       	push	r30
     e96:	ff 93       	push	r31
     e98:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <pxCurrentTCB>
     e9c:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
     ea0:	0d b6       	in	r0, 0x3d	; 61
     ea2:	0d 92       	st	X+, r0
     ea4:	0e b6       	in	r0, 0x3e	; 62
     ea6:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
     ea8:	e3 d4       	rcall	.+2502   	; 0x1870 <xTaskIncrementTick>
     eaa:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
     eac:	26 d6       	rcall	.+3148   	; 0x1afa <vTaskSwitchContext>
     eae:	a0 91 df 22 	lds	r26, 0x22DF	; 0x8022df <pxCurrentTCB>
        }
        portRESTORE_CONTEXT();
     eb2:	b0 91 e0 22 	lds	r27, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
     eb6:	0d 90       	ld	r0, X+
     eb8:	0d be       	out	0x3d, r0	; 61
     eba:	0d 90       	ld	r0, X+
     ebc:	0e be       	out	0x3e, r0	; 62
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	bf 91       	pop	r27
     ec8:	af 91       	pop	r26
     eca:	9f 91       	pop	r25
     ecc:	8f 91       	pop	r24
     ece:	7f 91       	pop	r23
     ed0:	6f 91       	pop	r22
     ed2:	5f 91       	pop	r21
     ed4:	4f 91       	pop	r20
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	9f 90       	pop	r9
     eec:	8f 90       	pop	r8
     eee:	7f 90       	pop	r7
     ef0:	6f 90       	pop	r6
     ef2:	5f 90       	pop	r5
     ef4:	4f 90       	pop	r4
     ef6:	3f 90       	pop	r3
     ef8:	2f 90       	pop	r2
     efa:	1f 90       	pop	r1
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	18 95       	reti

00000f04 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
     f0a:	a2 d4       	rcall	.+2372   	; 0x1850 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     f0c:	ce 01       	movw	r24, r28
     f0e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     f12:	ec 01       	movw	r28, r24
     f14:	65 d5       	rcall	.+2762   	; 0x19e0 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     f16:	ce 01       	movw	r24, r28
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
    if( pv )
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	31 f0       	breq	.+12     	; 0xf32 <vPortFree+0x14>
     f26:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     f28:	93 d4       	rcall	.+2342   	; 0x1850 <vTaskSuspendAll>
        {
            free( pv );
     f2a:	ce 01       	movw	r24, r28
     f2c:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     f30:	57 d5       	rcall	.+2734   	; 0x19e0 <xTaskResumeAll>
    }
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	0f 92       	push	r0
     f3e:	fc 01       	movw	r30, r24
     f40:	92 8d       	ldd	r25, Z+26	; 0x1a
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	91 11       	cpse	r25, r1
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	08 95       	ret

00000f4e <prvCopyDataToQueue>:
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
     f58:	04 2f       	mov	r16, r20
     f5a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     f5c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     f5e:	44 23       	and	r20, r20
     f60:	b9 f1       	breq	.+110    	; 0xfd0 <prvCopyDataToQueue+0x82>
     f62:	01 11       	cpse	r16, r1
     f64:	16 c0       	rjmp	.+44     	; 0xf92 <prvCopyDataToQueue+0x44>
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	0e 94 2e 18 	call	0x305c	; 0x305c <memcpy>
     f70:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	9b 81       	ldd	r25, Y+3	; 0x03
     f76:	82 0f       	add	r24, r18
     f78:	91 1d       	adc	r25, r1
     f7a:	8a 83       	std	Y+2, r24	; 0x02
     f7c:	9b 83       	std	Y+3, r25	; 0x03
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	82 17       	cp	r24, r18
     f84:	93 07       	cpc	r25, r19
     f86:	20 f1       	brcs	.+72     	; 0xfd0 <prvCopyDataToQueue+0x82>
     f88:	88 81       	ld	r24, Y
     f8a:	99 81       	ldd	r25, Y+1	; 0x01
     f8c:	8a 83       	std	Y+2, r24	; 0x02
     f8e:	9b 83       	std	Y+3, r25	; 0x03
     f90:	1f c0       	rjmp	.+62     	; 0xfd0 <prvCopyDataToQueue+0x82>
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	8e 81       	ldd	r24, Y+6	; 0x06
     f96:	9f 81       	ldd	r25, Y+7	; 0x07
     f98:	0e 94 2e 18 	call	0x305c	; 0x305c <memcpy>
     f9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	91 95       	neg	r25
     fa2:	81 95       	neg	r24
     fa4:	91 09       	sbc	r25, r1
     fa6:	2e 81       	ldd	r18, Y+6	; 0x06
     fa8:	3f 81       	ldd	r19, Y+7	; 0x07
     faa:	28 0f       	add	r18, r24
     fac:	39 1f       	adc	r19, r25
     fae:	2e 83       	std	Y+6, r18	; 0x06
     fb0:	3f 83       	std	Y+7, r19	; 0x07
     fb2:	48 81       	ld	r20, Y
     fb4:	59 81       	ldd	r21, Y+1	; 0x01
     fb6:	24 17       	cp	r18, r20
     fb8:	35 07       	cpc	r19, r21
     fba:	30 f4       	brcc	.+12     	; 0xfc8 <prvCopyDataToQueue+0x7a>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	82 0f       	add	r24, r18
     fc2:	93 1f       	adc	r25, r19
     fc4:	8e 83       	std	Y+6, r24	; 0x06
     fc6:	9f 83       	std	Y+7, r25	; 0x07
     fc8:	02 30       	cpi	r16, 0x02	; 2
     fca:	11 f4       	brne	.+4      	; 0xfd0 <prvCopyDataToQueue+0x82>
     fcc:	11 11       	cpse	r17, r1
     fce:	11 50       	subi	r17, 0x01	; 1
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
     fd2:	1a 8f       	std	Y+26, r17	; 0x1a
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	08 95       	ret

00000fe0 <prvCopyDataFromQueue>:
     fe0:	fc 01       	movw	r30, r24
     fe2:	44 8d       	ldd	r20, Z+28	; 0x1c
     fe4:	44 23       	and	r20, r20
     fe6:	a9 f0       	breq	.+42     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	26 81       	ldd	r18, Z+6	; 0x06
     fec:	37 81       	ldd	r19, Z+7	; 0x07
     fee:	24 0f       	add	r18, r20
     ff0:	35 1f       	adc	r19, r21
     ff2:	26 83       	std	Z+6, r18	; 0x06
     ff4:	37 83       	std	Z+7, r19	; 0x07
     ff6:	84 81       	ldd	r24, Z+4	; 0x04
     ff8:	95 81       	ldd	r25, Z+5	; 0x05
     ffa:	28 17       	cp	r18, r24
     ffc:	39 07       	cpc	r19, r25
     ffe:	20 f0       	brcs	.+8      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	86 83       	std	Z+6, r24	; 0x06
    1006:	97 83       	std	Z+7, r25	; 0x07
    1008:	cb 01       	movw	r24, r22
    100a:	66 81       	ldd	r22, Z+6	; 0x06
    100c:	77 81       	ldd	r23, Z+7	; 0x07
    100e:	0c 94 2e 18 	jmp	0x305c	; 0x305c <memcpy>
    1012:	08 95       	ret

00001014 <prvUnlockQueue>:
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	8c 01       	movw	r16, r24
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	0f 92       	push	r0
    1026:	fc 01       	movw	r30, r24
    1028:	c6 8d       	ldd	r28, Z+30	; 0x1e
    102a:	1c 16       	cp	r1, r28
    102c:	9c f4       	brge	.+38     	; 0x1054 <prvUnlockQueue+0x40>
    102e:	81 89       	ldd	r24, Z+17	; 0x11
    1030:	81 11       	cpse	r24, r1
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <prvUnlockQueue+0x2c>
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <prvUnlockQueue+0x40>
    1036:	f8 01       	movw	r30, r16
    1038:	81 89       	ldd	r24, Z+17	; 0x11
    103a:	81 11       	cpse	r24, r1
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <prvUnlockQueue+0x34>
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <prvUnlockQueue+0x40>
    1040:	78 01       	movw	r14, r16
    1042:	f1 e1       	ldi	r31, 0x11	; 17
    1044:	ef 0e       	add	r14, r31
    1046:	f1 1c       	adc	r15, r1
    1048:	c7 01       	movw	r24, r14
    104a:	e6 d5       	rcall	.+3020   	; 0x1c18 <xTaskRemoveFromEventList>
    104c:	81 11       	cpse	r24, r1
    104e:	67 d6       	rcall	.+3278   	; 0x1d1e <vTaskMissedYield>
    1050:	c1 50       	subi	r28, 0x01	; 1
    1052:	89 f7       	brne	.-30     	; 0x1036 <prvUnlockQueue+0x22>
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	f8 01       	movw	r30, r16
    1058:	86 8f       	std	Z+30, r24	; 0x1e
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	0f 92       	push	r0
    1064:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1066:	1c 16       	cp	r1, r28
    1068:	9c f4       	brge	.+38     	; 0x1090 <prvUnlockQueue+0x7c>
    106a:	80 85       	ldd	r24, Z+8	; 0x08
    106c:	81 11       	cpse	r24, r1
    106e:	06 c0       	rjmp	.+12     	; 0x107c <prvUnlockQueue+0x68>
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <prvUnlockQueue+0x7c>
    1072:	f8 01       	movw	r30, r16
    1074:	80 85       	ldd	r24, Z+8	; 0x08
    1076:	81 11       	cpse	r24, r1
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <prvUnlockQueue+0x70>
    107a:	0a c0       	rjmp	.+20     	; 0x1090 <prvUnlockQueue+0x7c>
    107c:	78 01       	movw	r14, r16
    107e:	f8 e0       	ldi	r31, 0x08	; 8
    1080:	ef 0e       	add	r14, r31
    1082:	f1 1c       	adc	r15, r1
    1084:	c7 01       	movw	r24, r14
    1086:	c8 d5       	rcall	.+2960   	; 0x1c18 <xTaskRemoveFromEventList>
    1088:	81 11       	cpse	r24, r1
    108a:	49 d6       	rcall	.+3218   	; 0x1d1e <vTaskMissedYield>
    108c:	c1 50       	subi	r28, 0x01	; 1
    108e:	89 f7       	brne	.-30     	; 0x1072 <prvUnlockQueue+0x5e>
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	f8 01       	movw	r30, r16
    1094:	85 8f       	std	Z+29, r24	; 0x1d
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	08 95       	ret

000010a6 <xQueueGenericReset>:
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	0f 92       	push	r0
    10b2:	e8 81       	ld	r30, Y
    10b4:	f9 81       	ldd	r31, Y+1	; 0x01
    10b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	82 9f       	mul	r24, r18
    10c0:	a0 01       	movw	r20, r0
    10c2:	83 9f       	mul	r24, r19
    10c4:	50 0d       	add	r21, r0
    10c6:	92 9f       	mul	r25, r18
    10c8:	50 0d       	add	r21, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	4e 0f       	add	r20, r30
    10ce:	5f 1f       	adc	r21, r31
    10d0:	4c 83       	std	Y+4, r20	; 0x04
    10d2:	5d 83       	std	Y+5, r21	; 0x05
    10d4:	1a 8e       	std	Y+26, r1	; 0x1a
    10d6:	ea 83       	std	Y+2, r30	; 0x02
    10d8:	fb 83       	std	Y+3, r31	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	82 9f       	mul	r24, r18
    10de:	a0 01       	movw	r20, r0
    10e0:	83 9f       	mul	r24, r19
    10e2:	50 0d       	add	r21, r0
    10e4:	92 9f       	mul	r25, r18
    10e6:	50 0d       	add	r21, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	cf 01       	movw	r24, r30
    10ec:	84 0f       	add	r24, r20
    10ee:	95 1f       	adc	r25, r21
    10f0:	8e 83       	std	Y+6, r24	; 0x06
    10f2:	9f 83       	std	Y+7, r25	; 0x07
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	8d 8f       	std	Y+29, r24	; 0x1d
    10f8:	8e 8f       	std	Y+30, r24	; 0x1e
    10fa:	61 11       	cpse	r22, r1
    10fc:	0a c0       	rjmp	.+20     	; 0x1112 <xQueueGenericReset+0x6c>
    10fe:	88 85       	ldd	r24, Y+8	; 0x08
    1100:	88 23       	and	r24, r24
    1102:	69 f0       	breq	.+26     	; 0x111e <xQueueGenericReset+0x78>
    1104:	ce 01       	movw	r24, r28
    1106:	08 96       	adiw	r24, 0x08	; 8
    1108:	87 d5       	rcall	.+2830   	; 0x1c18 <xTaskRemoveFromEventList>
    110a:	88 23       	and	r24, r24
    110c:	41 f0       	breq	.+16     	; 0x111e <xQueueGenericReset+0x78>
    110e:	48 de       	rcall	.-880    	; 0xda0 <vPortYield>
    1110:	06 c0       	rjmp	.+12     	; 0x111e <xQueueGenericReset+0x78>
    1112:	ce 01       	movw	r24, r28
    1114:	08 96       	adiw	r24, 0x08	; 8
    1116:	fd dc       	rcall	.-1542   	; 0xb12 <vListInitialise>
    1118:	ce 01       	movw	r24, r28
    111a:	41 96       	adiw	r24, 0x11	; 17
    111c:	fa dc       	rcall	.-1548   	; 0xb12 <vListInitialise>
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <xQueueGenericCreate>:
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	08 2f       	mov	r16, r24
    1134:	16 2f       	mov	r17, r22
    1136:	86 9f       	mul	r24, r22
    1138:	c0 01       	movw	r24, r0
    113a:	11 24       	eor	r1, r1
    113c:	4f 96       	adiw	r24, 0x1f	; 31
    113e:	e2 de       	rcall	.-572    	; 0xf04 <pvPortMalloc>
    1140:	ec 01       	movw	r28, r24
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	69 f0       	breq	.+26     	; 0x1160 <xQueueGenericCreate+0x36>
    1146:	11 11       	cpse	r17, r1
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <xQueueGenericCreate+0x26>
    114a:	88 83       	st	Y, r24
    114c:	99 83       	std	Y+1, r25	; 0x01
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <xQueueGenericCreate+0x2c>
    1150:	4f 96       	adiw	r24, 0x1f	; 31
    1152:	88 83       	st	Y, r24
    1154:	99 83       	std	Y+1, r25	; 0x01
    1156:	0b 8f       	std	Y+27, r16	; 0x1b
    1158:	1c 8f       	std	Y+28, r17	; 0x1c
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	ce 01       	movw	r24, r28
    115e:	a3 df       	rcall	.-186    	; 0x10a6 <xQueueGenericReset>
    1160:	ce 01       	movw	r24, r28
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <xQueueGenericSend>:
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	25 97       	sbiw	r28, 0x05	; 5
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	8c 01       	movw	r16, r24
    118c:	6b 01       	movw	r12, r22
    118e:	4c 83       	std	Y+4, r20	; 0x04
    1190:	5d 83       	std	Y+5, r21	; 0x05
    1192:	a2 2e       	mov	r10, r18
    1194:	b1 2c       	mov	r11, r1
    1196:	7c 01       	movw	r14, r24
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	e8 0e       	add	r14, r24
    119c:	f1 1c       	adc	r15, r1
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	0f 92       	push	r0
    11a4:	f8 01       	movw	r30, r16
    11a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    11a8:	83 8d       	ldd	r24, Z+27	; 0x1b
    11aa:	98 17       	cp	r25, r24
    11ac:	18 f0       	brcs	.+6      	; 0x11b4 <xQueueGenericSend+0x48>
    11ae:	f2 e0       	ldi	r31, 0x02	; 2
    11b0:	af 12       	cpse	r10, r31
    11b2:	15 c0       	rjmp	.+42     	; 0x11de <xQueueGenericSend+0x72>
    11b4:	4a 2d       	mov	r20, r10
    11b6:	b6 01       	movw	r22, r12
    11b8:	c8 01       	movw	r24, r16
    11ba:	c9 de       	rcall	.-622    	; 0xf4e <prvCopyDataToQueue>
    11bc:	f8 01       	movw	r30, r16
    11be:	91 89       	ldd	r25, Z+17	; 0x11
    11c0:	99 23       	and	r25, r25
    11c2:	39 f0       	breq	.+14     	; 0x11d2 <xQueueGenericSend+0x66>
    11c4:	c8 01       	movw	r24, r16
    11c6:	41 96       	adiw	r24, 0x11	; 17
    11c8:	27 d5       	rcall	.+2638   	; 0x1c18 <xTaskRemoveFromEventList>
    11ca:	88 23       	and	r24, r24
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <xQueueGenericSend+0x6a>
    11ce:	e8 dd       	rcall	.-1072   	; 0xda0 <vPortYield>
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <xQueueGenericSend+0x6a>
    11d2:	81 11       	cpse	r24, r1
    11d4:	e5 dd       	rcall	.-1078   	; 0xda0 <vPortYield>
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	46 c0       	rjmp	.+140    	; 0x126a <xQueueGenericSend+0xfe>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	89 2b       	or	r24, r25
    11e4:	21 f4       	brne	.+8      	; 0x11ee <xQueueGenericSend+0x82>
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	3e c0       	rjmp	.+124    	; 0x126a <xQueueGenericSend+0xfe>
    11ee:	b1 10       	cpse	r11, r1
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <xQueueGenericSend+0x90>
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	58 d5       	rcall	.+2736   	; 0x1ca8 <vTaskInternalSetTimeOutState>
    11f8:	bb 24       	eor	r11, r11
    11fa:	b3 94       	inc	r11
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	27 d3       	rcall	.+1614   	; 0x1850 <vTaskSuspendAll>
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	0f 92       	push	r0
    1208:	f8 01       	movw	r30, r16
    120a:	85 8d       	ldd	r24, Z+29	; 0x1d
    120c:	8f 3f       	cpi	r24, 0xFF	; 255
    120e:	09 f4       	brne	.+2      	; 0x1212 <xQueueGenericSend+0xa6>
    1210:	15 8e       	std	Z+29, r1	; 0x1d
    1212:	f8 01       	movw	r30, r16
    1214:	86 8d       	ldd	r24, Z+30	; 0x1e
    1216:	8f 3f       	cpi	r24, 0xFF	; 255
    1218:	09 f4       	brne	.+2      	; 0x121c <xQueueGenericSend+0xb0>
    121a:	16 8e       	std	Z+30, r1	; 0x1e
    121c:	0f 90       	pop	r0
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	be 01       	movw	r22, r28
    1222:	6c 5f       	subi	r22, 0xFC	; 252
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	49 d5       	rcall	.+2706   	; 0x1cbe <xTaskCheckForTimeOut>
    122c:	81 11       	cpse	r24, r1
    122e:	19 c0       	rjmp	.+50     	; 0x1262 <xQueueGenericSend+0xf6>
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	0f 92       	push	r0
    1236:	f8 01       	movw	r30, r16
    1238:	92 8d       	ldd	r25, Z+26	; 0x1a
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1240:	98 13       	cpse	r25, r24
    1242:	0b c0       	rjmp	.+22     	; 0x125a <xQueueGenericSend+0xee>
    1244:	6c 81       	ldd	r22, Y+4	; 0x04
    1246:	7d 81       	ldd	r23, Y+5	; 0x05
    1248:	c7 01       	movw	r24, r14
    124a:	bd d4       	rcall	.+2426   	; 0x1bc6 <vTaskPlaceOnEventList>
    124c:	c8 01       	movw	r24, r16
    124e:	e2 de       	rcall	.-572    	; 0x1014 <prvUnlockQueue>
    1250:	c7 d3       	rcall	.+1934   	; 0x19e0 <xTaskResumeAll>
    1252:	81 11       	cpse	r24, r1
    1254:	a4 cf       	rjmp	.-184    	; 0x119e <xQueueGenericSend+0x32>
    1256:	a4 dd       	rcall	.-1208   	; 0xda0 <vPortYield>
    1258:	a2 cf       	rjmp	.-188    	; 0x119e <xQueueGenericSend+0x32>
    125a:	c8 01       	movw	r24, r16
    125c:	db de       	rcall	.-586    	; 0x1014 <prvUnlockQueue>
    125e:	c0 d3       	rcall	.+1920   	; 0x19e0 <xTaskResumeAll>
    1260:	9e cf       	rjmp	.-196    	; 0x119e <xQueueGenericSend+0x32>
    1262:	c8 01       	movw	r24, r16
    1264:	d7 de       	rcall	.-594    	; 0x1014 <prvUnlockQueue>
    1266:	bc d3       	rcall	.+1912   	; 0x19e0 <xTaskResumeAll>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	25 96       	adiw	r28, 0x05	; 5
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	08 95       	ret

00001286 <xQueueGenericSendFromISR>:
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	8a 01       	movw	r16, r20
    1294:	fc 01       	movw	r30, r24
    1296:	52 8d       	ldd	r21, Z+26	; 0x1a
    1298:	33 8d       	ldd	r19, Z+27	; 0x1b
    129a:	53 17       	cp	r21, r19
    129c:	10 f0       	brcs	.+4      	; 0x12a2 <xQueueGenericSendFromISR+0x1c>
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	f1 f4       	brne	.+60     	; 0x12de <xQueueGenericSendFromISR+0x58>
    12a2:	42 2f       	mov	r20, r18
    12a4:	78 01       	movw	r14, r16
    12a6:	ec 01       	movw	r28, r24
    12a8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    12aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12ac:	ce 01       	movw	r24, r28
    12ae:	4f de       	rcall	.-866    	; 0xf4e <prvCopyDataToQueue>
    12b0:	1f 3f       	cpi	r17, 0xFF	; 255
    12b2:	79 f4       	brne	.+30     	; 0x12d2 <xQueueGenericSendFromISR+0x4c>
    12b4:	89 89       	ldd	r24, Y+17	; 0x11
    12b6:	88 23       	and	r24, r24
    12b8:	a1 f0       	breq	.+40     	; 0x12e2 <xQueueGenericSendFromISR+0x5c>
    12ba:	ce 01       	movw	r24, r28
    12bc:	41 96       	adiw	r24, 0x11	; 17
    12be:	ac d4       	rcall	.+2392   	; 0x1c18 <xTaskRemoveFromEventList>
    12c0:	88 23       	and	r24, r24
    12c2:	89 f0       	breq	.+34     	; 0x12e6 <xQueueGenericSendFromISR+0x60>
    12c4:	e1 14       	cp	r14, r1
    12c6:	f1 04       	cpc	r15, r1
    12c8:	81 f0       	breq	.+32     	; 0x12ea <xQueueGenericSendFromISR+0x64>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	f7 01       	movw	r30, r14
    12ce:	80 83       	st	Z, r24
    12d0:	0d c0       	rjmp	.+26     	; 0x12ec <xQueueGenericSendFromISR+0x66>
    12d2:	ff 24       	eor	r15, r15
    12d4:	f3 94       	inc	r15
    12d6:	f1 0e       	add	r15, r17
    12d8:	fe 8e       	std	Y+30, r15	; 0x1e
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <xQueueGenericSendFromISR+0x66>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <xQueueGenericSendFromISR+0x66>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <xQueueGenericSendFromISR+0x66>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <xQueueGenericSendFromISR+0x66>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	08 95       	ret

000012fa <xQueueReceive>:
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	25 97       	sbiw	r28, 0x05	; 5
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	8c 01       	movw	r16, r24
    131a:	5b 01       	movw	r10, r22
    131c:	4c 83       	std	Y+4, r20	; 0x04
    131e:	5d 83       	std	Y+5, r21	; 0x05
    1320:	e1 2c       	mov	r14, r1
    1322:	6c 01       	movw	r12, r24
    1324:	81 e1       	ldi	r24, 0x11	; 17
    1326:	c8 0e       	add	r12, r24
    1328:	d1 1c       	adc	r13, r1
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	0f 92       	push	r0
    1330:	f8 01       	movw	r30, r16
    1332:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1334:	ff 20       	and	r15, r15
    1336:	91 f0       	breq	.+36     	; 0x135c <xQueueReceive+0x62>
    1338:	b5 01       	movw	r22, r10
    133a:	c8 01       	movw	r24, r16
    133c:	51 de       	rcall	.-862    	; 0xfe0 <prvCopyDataFromQueue>
    133e:	fa 94       	dec	r15
    1340:	f8 01       	movw	r30, r16
    1342:	f2 8e       	std	Z+26, r15	; 0x1a
    1344:	80 85       	ldd	r24, Z+8	; 0x08
    1346:	88 23       	and	r24, r24
    1348:	29 f0       	breq	.+10     	; 0x1354 <xQueueReceive+0x5a>
    134a:	c8 01       	movw	r24, r16
    134c:	08 96       	adiw	r24, 0x08	; 8
    134e:	64 d4       	rcall	.+2248   	; 0x1c18 <xTaskRemoveFromEventList>
    1350:	81 11       	cpse	r24, r1
    1352:	26 dd       	rcall	.-1460   	; 0xda0 <vPortYield>
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	45 c0       	rjmp	.+138    	; 0x13e6 <xQueueReceive+0xec>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	89 2b       	or	r24, r25
    1362:	21 f4       	brne	.+8      	; 0x136c <xQueueReceive+0x72>
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	3d c0       	rjmp	.+122    	; 0x13e6 <xQueueReceive+0xec>
    136c:	e1 10       	cpse	r14, r1
    136e:	05 c0       	rjmp	.+10     	; 0x137a <xQueueReceive+0x80>
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	99 d4       	rcall	.+2354   	; 0x1ca8 <vTaskInternalSetTimeOutState>
    1376:	ee 24       	eor	r14, r14
    1378:	e3 94       	inc	r14
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	68 d2       	rcall	.+1232   	; 0x1850 <vTaskSuspendAll>
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	0f 92       	push	r0
    1386:	f8 01       	movw	r30, r16
    1388:	85 8d       	ldd	r24, Z+29	; 0x1d
    138a:	8f 3f       	cpi	r24, 0xFF	; 255
    138c:	09 f4       	brne	.+2      	; 0x1390 <xQueueReceive+0x96>
    138e:	15 8e       	std	Z+29, r1	; 0x1d
    1390:	f8 01       	movw	r30, r16
    1392:	86 8d       	ldd	r24, Z+30	; 0x1e
    1394:	8f 3f       	cpi	r24, 0xFF	; 255
    1396:	09 f4       	brne	.+2      	; 0x139a <xQueueReceive+0xa0>
    1398:	16 8e       	std	Z+30, r1	; 0x1e
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	be 01       	movw	r22, r28
    13a0:	6c 5f       	subi	r22, 0xFC	; 252
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	ce 01       	movw	r24, r28
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	8a d4       	rcall	.+2324   	; 0x1cbe <xTaskCheckForTimeOut>
    13aa:	81 11       	cpse	r24, r1
    13ac:	13 c0       	rjmp	.+38     	; 0x13d4 <xQueueReceive+0xda>
    13ae:	c8 01       	movw	r24, r16
    13b0:	c3 dd       	rcall	.-1146   	; 0xf38 <prvIsQueueEmpty>
    13b2:	88 23       	and	r24, r24
    13b4:	59 f0       	breq	.+22     	; 0x13cc <xQueueReceive+0xd2>
    13b6:	6c 81       	ldd	r22, Y+4	; 0x04
    13b8:	7d 81       	ldd	r23, Y+5	; 0x05
    13ba:	c6 01       	movw	r24, r12
    13bc:	04 d4       	rcall	.+2056   	; 0x1bc6 <vTaskPlaceOnEventList>
    13be:	c8 01       	movw	r24, r16
    13c0:	29 de       	rcall	.-942    	; 0x1014 <prvUnlockQueue>
    13c2:	0e d3       	rcall	.+1564   	; 0x19e0 <xTaskResumeAll>
    13c4:	81 11       	cpse	r24, r1
    13c6:	b1 cf       	rjmp	.-158    	; 0x132a <xQueueReceive+0x30>
    13c8:	eb dc       	rcall	.-1578   	; 0xda0 <vPortYield>
    13ca:	af cf       	rjmp	.-162    	; 0x132a <xQueueReceive+0x30>
    13cc:	c8 01       	movw	r24, r16
    13ce:	22 de       	rcall	.-956    	; 0x1014 <prvUnlockQueue>
    13d0:	07 d3       	rcall	.+1550   	; 0x19e0 <xTaskResumeAll>
    13d2:	ab cf       	rjmp	.-170    	; 0x132a <xQueueReceive+0x30>
    13d4:	c8 01       	movw	r24, r16
    13d6:	1e de       	rcall	.-964    	; 0x1014 <prvUnlockQueue>
    13d8:	03 d3       	rcall	.+1542   	; 0x19e0 <xTaskResumeAll>
    13da:	c8 01       	movw	r24, r16
    13dc:	ad dd       	rcall	.-1190   	; 0xf38 <prvIsQueueEmpty>
    13de:	88 23       	and	r24, r24
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <xQueueReceive+0xea>
    13e2:	a3 cf       	rjmp	.-186    	; 0x132a <xQueueReceive+0x30>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	25 96       	adiw	r28, 0x05	; 5
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	bf 90       	pop	r11
    13fe:	af 90       	pop	r10
    1400:	08 95       	ret

00001402 <xQueueSemaphoreTake>:
    1402:	df 92       	push	r13
    1404:	ef 92       	push	r14
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	25 97       	sbiw	r28, 0x05	; 5
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	8c 01       	movw	r16, r24
    141c:	6c 83       	std	Y+4, r22	; 0x04
    141e:	7d 83       	std	Y+5, r23	; 0x05
    1420:	d1 2c       	mov	r13, r1
    1422:	7c 01       	movw	r14, r24
    1424:	81 e1       	ldi	r24, 0x11	; 17
    1426:	e8 0e       	add	r14, r24
    1428:	f1 1c       	adc	r15, r1
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	0f 92       	push	r0
    1430:	f8 01       	movw	r30, r16
    1432:	82 8d       	ldd	r24, Z+26	; 0x1a
    1434:	88 23       	and	r24, r24
    1436:	71 f0       	breq	.+28     	; 0x1454 <xQueueSemaphoreTake+0x52>
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	82 8f       	std	Z+26, r24	; 0x1a
    143c:	80 85       	ldd	r24, Z+8	; 0x08
    143e:	88 23       	and	r24, r24
    1440:	29 f0       	breq	.+10     	; 0x144c <xQueueSemaphoreTake+0x4a>
    1442:	c8 01       	movw	r24, r16
    1444:	08 96       	adiw	r24, 0x08	; 8
    1446:	e8 d3       	rcall	.+2000   	; 0x1c18 <xTaskRemoveFromEventList>
    1448:	81 11       	cpse	r24, r1
    144a:	aa dc       	rcall	.-1708   	; 0xda0 <vPortYield>
    144c:	0f 90       	pop	r0
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	45 c0       	rjmp	.+138    	; 0x14de <xQueueSemaphoreTake+0xdc>
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	89 2b       	or	r24, r25
    145a:	21 f4       	brne	.+8      	; 0x1464 <xQueueSemaphoreTake+0x62>
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	3d c0       	rjmp	.+122    	; 0x14de <xQueueSemaphoreTake+0xdc>
    1464:	d1 10       	cpse	r13, r1
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <xQueueSemaphoreTake+0x70>
    1468:	ce 01       	movw	r24, r28
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	1d d4       	rcall	.+2106   	; 0x1ca8 <vTaskInternalSetTimeOutState>
    146e:	dd 24       	eor	r13, r13
    1470:	d3 94       	inc	r13
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	ec d1       	rcall	.+984    	; 0x1850 <vTaskSuspendAll>
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	0f 92       	push	r0
    147e:	f8 01       	movw	r30, r16
    1480:	85 8d       	ldd	r24, Z+29	; 0x1d
    1482:	8f 3f       	cpi	r24, 0xFF	; 255
    1484:	09 f4       	brne	.+2      	; 0x1488 <xQueueSemaphoreTake+0x86>
    1486:	15 8e       	std	Z+29, r1	; 0x1d
    1488:	f8 01       	movw	r30, r16
    148a:	86 8d       	ldd	r24, Z+30	; 0x1e
    148c:	8f 3f       	cpi	r24, 0xFF	; 255
    148e:	09 f4       	brne	.+2      	; 0x1492 <xQueueSemaphoreTake+0x90>
    1490:	16 8e       	std	Z+30, r1	; 0x1e
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	be 01       	movw	r22, r28
    1498:	6c 5f       	subi	r22, 0xFC	; 252
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	ce 01       	movw	r24, r28
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	0e d4       	rcall	.+2076   	; 0x1cbe <xTaskCheckForTimeOut>
    14a2:	81 11       	cpse	r24, r1
    14a4:	13 c0       	rjmp	.+38     	; 0x14cc <xQueueSemaphoreTake+0xca>
    14a6:	c8 01       	movw	r24, r16
    14a8:	47 dd       	rcall	.-1394   	; 0xf38 <prvIsQueueEmpty>
    14aa:	88 23       	and	r24, r24
    14ac:	59 f0       	breq	.+22     	; 0x14c4 <xQueueSemaphoreTake+0xc2>
    14ae:	6c 81       	ldd	r22, Y+4	; 0x04
    14b0:	7d 81       	ldd	r23, Y+5	; 0x05
    14b2:	c7 01       	movw	r24, r14
    14b4:	88 d3       	rcall	.+1808   	; 0x1bc6 <vTaskPlaceOnEventList>
    14b6:	c8 01       	movw	r24, r16
    14b8:	ad dd       	rcall	.-1190   	; 0x1014 <prvUnlockQueue>
    14ba:	92 d2       	rcall	.+1316   	; 0x19e0 <xTaskResumeAll>
    14bc:	81 11       	cpse	r24, r1
    14be:	b5 cf       	rjmp	.-150    	; 0x142a <xQueueSemaphoreTake+0x28>
    14c0:	6f dc       	rcall	.-1826   	; 0xda0 <vPortYield>
    14c2:	b3 cf       	rjmp	.-154    	; 0x142a <xQueueSemaphoreTake+0x28>
    14c4:	c8 01       	movw	r24, r16
    14c6:	a6 dd       	rcall	.-1204   	; 0x1014 <prvUnlockQueue>
    14c8:	8b d2       	rcall	.+1302   	; 0x19e0 <xTaskResumeAll>
    14ca:	af cf       	rjmp	.-162    	; 0x142a <xQueueSemaphoreTake+0x28>
    14cc:	c8 01       	movw	r24, r16
    14ce:	a2 dd       	rcall	.-1212   	; 0x1014 <prvUnlockQueue>
    14d0:	87 d2       	rcall	.+1294   	; 0x19e0 <xTaskResumeAll>
    14d2:	c8 01       	movw	r24, r16
    14d4:	31 dd       	rcall	.-1438   	; 0xf38 <prvIsQueueEmpty>
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <xQueueSemaphoreTake+0xda>
    14da:	a7 cf       	rjmp	.-178    	; 0x142a <xQueueSemaphoreTake+0x28>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	25 96       	adiw	r28, 0x05	; 5
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	08 95       	ret

000014f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	0f 92       	push	r0
    1500:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1502:	8f 3f       	cpi	r24, 0xFF	; 255
    1504:	09 f4       	brne	.+2      	; 0x1508 <vQueueWaitForMessageRestricted+0x14>
    1506:	1d 8e       	std	Y+29, r1	; 0x1d
    1508:	8e 8d       	ldd	r24, Y+30	; 0x1e
    150a:	8f 3f       	cpi	r24, 0xFF	; 255
    150c:	09 f4       	brne	.+2      	; 0x1510 <vQueueWaitForMessageRestricted+0x1c>
    150e:	1e 8e       	std	Y+30, r1	; 0x1e
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1514:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1516:	81 11       	cpse	r24, r1
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    151a:	ce 01       	movw	r24, r28
    151c:	41 96       	adiw	r24, 0x11	; 17
    151e:	64 d3       	rcall	.+1736   	; 0x1be8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1520:	ce 01       	movw	r24, r28
    1522:	78 dd       	rcall	.-1296   	; 0x1014 <prvUnlockQueue>
    }
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	08 95       	ret

0000152a <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
    152a:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <pxDelayedTaskList>
    152e:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <pxDelayedTaskList+0x1>
    1532:	80 81       	ld	r24, Z
    1534:	81 11       	cpse	r24, r1
    1536:	07 c0       	rjmp	.+14     	; 0x1546 <prvResetNextTaskUnblockTime+0x1c>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	80 93 87 22 	sts	0x2287, r24	; 0x802287 <xNextTaskUnblockTime>
    1540:	90 93 88 22 	sts	0x2288, r25	; 0x802288 <xNextTaskUnblockTime+0x1>
    1544:	08 95       	ret
    1546:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <pxDelayedTaskList>
    154a:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <pxDelayedTaskList+0x1>
    154e:	05 80       	ldd	r0, Z+5	; 0x05
    1550:	f6 81       	ldd	r31, Z+6	; 0x06
    1552:	e0 2d       	mov	r30, r0
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	80 93 87 22 	sts	0x2287, r24	; 0x802287 <xNextTaskUnblockTime>
    155c:	90 93 88 22 	sts	0x2288, r25	; 0x802288 <xNextTaskUnblockTime+0x1>
    1560:	08 95       	ret

00001562 <prvIdleTask>:
    1562:	c2 eb       	ldi	r28, 0xB2	; 178
    1564:	d2 e2       	ldi	r29, 0x22	; 34
    1566:	88 81       	ld	r24, Y
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	e8 f3       	brcs	.-6      	; 0x1566 <prvIdleTask+0x4>
    156c:	19 dc       	rcall	.-1998   	; 0xda0 <vPortYield>
    156e:	fb cf       	rjmp	.-10     	; 0x1566 <prvIdleTask+0x4>

00001570 <prvAddCurrentTaskToDelayedList>:
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
    157a:	00 91 90 22 	lds	r16, 0x2290	; 0x802290 <xTickCount>
    157e:	10 91 91 22 	lds	r17, 0x2291	; 0x802291 <xTickCount+0x1>
    1582:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <pxCurrentTCB>
    1586:	90 91 e0 22 	lds	r25, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    158a:	02 96       	adiw	r24, 0x02	; 2
    158c:	26 db       	rcall	.-2484   	; 0xbda <uxListRemove>
    158e:	c0 0f       	add	r28, r16
    1590:	d1 1f       	adc	r29, r17
    1592:	e0 91 df 22 	lds	r30, 0x22DF	; 0x8022df <pxCurrentTCB>
    1596:	f0 91 e0 22 	lds	r31, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    159a:	c2 83       	std	Z+2, r28	; 0x02
    159c:	d3 83       	std	Z+3, r29	; 0x03
    159e:	c0 17       	cp	r28, r16
    15a0:	d1 07       	cpc	r29, r17
    15a2:	60 f4       	brcc	.+24     	; 0x15bc <prvAddCurrentTaskToDelayedList+0x4c>
    15a4:	60 91 df 22 	lds	r22, 0x22DF	; 0x8022df <pxCurrentTCB>
    15a8:	70 91 e0 22 	lds	r23, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    15ac:	80 91 9c 22 	lds	r24, 0x229C	; 0x80229c <pxOverflowDelayedTaskList>
    15b0:	90 91 9d 22 	lds	r25, 0x229D	; 0x80229d <pxOverflowDelayedTaskList+0x1>
    15b4:	6e 5f       	subi	r22, 0xFE	; 254
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	df da       	rcall	.-2626   	; 0xb78 <vListInsert>
    15ba:	16 c0       	rjmp	.+44     	; 0x15e8 <prvAddCurrentTaskToDelayedList+0x78>
    15bc:	60 91 df 22 	lds	r22, 0x22DF	; 0x8022df <pxCurrentTCB>
    15c0:	70 91 e0 22 	lds	r23, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    15c4:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <pxDelayedTaskList>
    15c8:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <pxDelayedTaskList+0x1>
    15cc:	6e 5f       	subi	r22, 0xFE	; 254
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	d3 da       	rcall	.-2650   	; 0xb78 <vListInsert>
    15d2:	80 91 87 22 	lds	r24, 0x2287	; 0x802287 <xNextTaskUnblockTime>
    15d6:	90 91 88 22 	lds	r25, 0x2288	; 0x802288 <xNextTaskUnblockTime+0x1>
    15da:	c8 17       	cp	r28, r24
    15dc:	d9 07       	cpc	r29, r25
    15de:	20 f4       	brcc	.+8      	; 0x15e8 <prvAddCurrentTaskToDelayedList+0x78>
    15e0:	c0 93 87 22 	sts	0x2287, r28	; 0x802287 <xNextTaskUnblockTime>
    15e4:	d0 93 88 22 	sts	0x2288, r29	; 0x802288 <xNextTaskUnblockTime+0x1>
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	08 95       	ret

000015f2 <xTaskCreate>:
    15f2:	4f 92       	push	r4
    15f4:	5f 92       	push	r5
    15f6:	6f 92       	push	r6
    15f8:	7f 92       	push	r7
    15fa:	8f 92       	push	r8
    15fc:	9f 92       	push	r9
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	4c 01       	movw	r8, r24
    1614:	6b 01       	movw	r12, r22
    1616:	5a 01       	movw	r10, r20
    1618:	29 01       	movw	r4, r18
    161a:	ca 01       	movw	r24, r20
    161c:	73 dc       	rcall	.-1818   	; 0xf04 <pvPortMalloc>
    161e:	3c 01       	movw	r6, r24
    1620:	89 2b       	or	r24, r25
    1622:	09 f4       	brne	.+2      	; 0x1626 <xTaskCreate+0x34>
    1624:	d6 c0       	rjmp	.+428    	; 0x17d2 <xTaskCreate+0x1e0>
    1626:	86 e2       	ldi	r24, 0x26	; 38
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	6c dc       	rcall	.-1832   	; 0xf04 <pvPortMalloc>
    162c:	ec 01       	movw	r28, r24
    162e:	89 2b       	or	r24, r25
    1630:	59 f0       	breq	.+22     	; 0x1648 <xTaskCreate+0x56>
    1632:	6f 8a       	std	Y+23, r6	; 0x17
    1634:	78 8e       	std	Y+24, r7	; 0x18
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	a8 1a       	sub	r10, r24
    163a:	b1 08       	sbc	r11, r1
    163c:	a6 0c       	add	r10, r6
    163e:	b7 1c       	adc	r11, r7
    1640:	c1 14       	cp	r12, r1
    1642:	d1 04       	cpc	r13, r1
    1644:	21 f4       	brne	.+8      	; 0x164e <xTaskCreate+0x5c>
    1646:	1f c0       	rjmp	.+62     	; 0x1686 <xTaskCreate+0x94>
    1648:	c3 01       	movw	r24, r6
    164a:	69 dc       	rcall	.-1838   	; 0xf1e <vPortFree>
    164c:	c2 c0       	rjmp	.+388    	; 0x17d2 <xTaskCreate+0x1e0>
    164e:	d6 01       	movw	r26, r12
    1650:	8c 91       	ld	r24, X
    1652:	89 8f       	std	Y+25, r24	; 0x19
    1654:	8c 91       	ld	r24, X
    1656:	88 23       	and	r24, r24
    1658:	a1 f0       	breq	.+40     	; 0x1682 <xTaskCreate+0x90>
    165a:	ae 01       	movw	r20, r28
    165c:	46 5e       	subi	r20, 0xE6	; 230
    165e:	5f 4f       	sbci	r21, 0xFF	; 255
    1660:	f6 01       	movw	r30, r12
    1662:	31 96       	adiw	r30, 0x01	; 1
    1664:	b8 e0       	ldi	r27, 0x08	; 8
    1666:	cb 0e       	add	r12, r27
    1668:	d1 1c       	adc	r13, r1
    166a:	cf 01       	movw	r24, r30
    166c:	21 91       	ld	r18, Z+
    166e:	da 01       	movw	r26, r20
    1670:	2d 93       	st	X+, r18
    1672:	ad 01       	movw	r20, r26
    1674:	dc 01       	movw	r26, r24
    1676:	8c 91       	ld	r24, X
    1678:	88 23       	and	r24, r24
    167a:	19 f0       	breq	.+6      	; 0x1682 <xTaskCreate+0x90>
    167c:	ce 16       	cp	r12, r30
    167e:	df 06       	cpc	r13, r31
    1680:	a1 f7       	brne	.-24     	; 0x166a <xTaskCreate+0x78>
    1682:	18 a2       	std	Y+32, r1	; 0x20
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <xTaskCreate+0x96>
    1686:	19 8e       	std	Y+25, r1	; 0x19
    1688:	05 30       	cpi	r16, 0x05	; 5
    168a:	08 f0       	brcs	.+2      	; 0x168e <xTaskCreate+0x9c>
    168c:	04 e0       	ldi	r16, 0x04	; 4
    168e:	0e 8b       	std	Y+22, r16	; 0x16
    1690:	6e 01       	movw	r12, r28
    1692:	b2 e0       	ldi	r27, 0x02	; 2
    1694:	cb 0e       	add	r12, r27
    1696:	d1 1c       	adc	r13, r1
    1698:	c6 01       	movw	r24, r12
    169a:	49 da       	rcall	.-2926   	; 0xb2e <vListInitialiseItem>
    169c:	ce 01       	movw	r24, r28
    169e:	0c 96       	adiw	r24, 0x0c	; 12
    16a0:	46 da       	rcall	.-2932   	; 0xb2e <vListInitialiseItem>
    16a2:	c8 87       	std	Y+8, r28	; 0x08
    16a4:	d9 87       	std	Y+9, r29	; 0x09
    16a6:	85 e0       	ldi	r24, 0x05	; 5
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	80 1b       	sub	r24, r16
    16ac:	91 09       	sbc	r25, r1
    16ae:	8c 87       	std	Y+12, r24	; 0x0c
    16b0:	9d 87       	std	Y+13, r25	; 0x0d
    16b2:	ca 8b       	std	Y+18, r28	; 0x12
    16b4:	db 8b       	std	Y+19, r29	; 0x13
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	fe 01       	movw	r30, r28
    16ba:	b1 96       	adiw	r30, 0x21	; 33
    16bc:	df 01       	movw	r26, r30
    16be:	1d 92       	st	X+, r1
    16c0:	8a 95       	dec	r24
    16c2:	e9 f7       	brne	.-6      	; 0x16be <xTaskCreate+0xcc>
    16c4:	1d a2       	std	Y+37, r1	; 0x25
    16c6:	a2 01       	movw	r20, r4
    16c8:	b4 01       	movw	r22, r8
    16ca:	c5 01       	movw	r24, r10
    16cc:	ad da       	rcall	.-2726   	; 0xc28 <pxPortInitialiseStack>
    16ce:	88 83       	st	Y, r24
    16d0:	99 83       	std	Y+1, r25	; 0x01
    16d2:	e1 14       	cp	r14, r1
    16d4:	f1 04       	cpc	r15, r1
    16d6:	19 f0       	breq	.+6      	; 0x16de <xTaskCreate+0xec>
    16d8:	f7 01       	movw	r30, r14
    16da:	c0 83       	st	Z, r28
    16dc:	d1 83       	std	Z+1, r29	; 0x01
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	0f 92       	push	r0
    16e4:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <uxCurrentNumberOfTasks>
    16e8:	8f 5f       	subi	r24, 0xFF	; 255
    16ea:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <uxCurrentNumberOfTasks>
    16ee:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <pxCurrentTCB>
    16f2:	90 91 e0 22 	lds	r25, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    16f6:	89 2b       	or	r24, r25
    16f8:	69 f5       	brne	.+90     	; 0x1754 <xTaskCreate+0x162>
    16fa:	c0 93 df 22 	sts	0x22DF, r28	; 0x8022df <pxCurrentTCB>
    16fe:	d0 93 e0 22 	sts	0x22E0, r29	; 0x8022e0 <pxCurrentTCB+0x1>
    1702:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <uxCurrentNumberOfTasks>
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	a9 f5       	brne	.+106    	; 0x1774 <xTaskCreate+0x182>
    170a:	02 eb       	ldi	r16, 0xB2	; 178
    170c:	12 e2       	ldi	r17, 0x22	; 34
    170e:	0f 2e       	mov	r0, r31
    1710:	ff ed       	ldi	r31, 0xDF	; 223
    1712:	ef 2e       	mov	r14, r31
    1714:	f2 e2       	ldi	r31, 0x22	; 34
    1716:	ff 2e       	mov	r15, r31
    1718:	f0 2d       	mov	r31, r0
    171a:	c8 01       	movw	r24, r16
    171c:	fa d9       	rcall	.-3084   	; 0xb12 <vListInitialise>
    171e:	07 5f       	subi	r16, 0xF7	; 247
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	0e 15       	cp	r16, r14
    1724:	1f 05       	cpc	r17, r15
    1726:	c9 f7       	brne	.-14     	; 0x171a <xTaskCreate+0x128>
    1728:	89 ea       	ldi	r24, 0xA9	; 169
    172a:	92 e2       	ldi	r25, 0x22	; 34
    172c:	f2 d9       	rcall	.-3100   	; 0xb12 <vListInitialise>
    172e:	80 ea       	ldi	r24, 0xA0	; 160
    1730:	92 e2       	ldi	r25, 0x22	; 34
    1732:	ef d9       	rcall	.-3106   	; 0xb12 <vListInitialise>
    1734:	83 e9       	ldi	r24, 0x93	; 147
    1736:	92 e2       	ldi	r25, 0x22	; 34
    1738:	ec d9       	rcall	.-3112   	; 0xb12 <vListInitialise>
    173a:	89 ea       	ldi	r24, 0xA9	; 169
    173c:	92 e2       	ldi	r25, 0x22	; 34
    173e:	80 93 9e 22 	sts	0x229E, r24	; 0x80229e <pxDelayedTaskList>
    1742:	90 93 9f 22 	sts	0x229F, r25	; 0x80229f <pxDelayedTaskList+0x1>
    1746:	80 ea       	ldi	r24, 0xA0	; 160
    1748:	92 e2       	ldi	r25, 0x22	; 34
    174a:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <pxOverflowDelayedTaskList>
    174e:	90 93 9d 22 	sts	0x229D, r25	; 0x80229d <pxOverflowDelayedTaskList+0x1>
    1752:	10 c0       	rjmp	.+32     	; 0x1774 <xTaskCreate+0x182>
    1754:	80 91 8e 22 	lds	r24, 0x228E	; 0x80228e <xSchedulerRunning>
    1758:	81 11       	cpse	r24, r1
    175a:	0c c0       	rjmp	.+24     	; 0x1774 <xTaskCreate+0x182>
    175c:	e0 91 df 22 	lds	r30, 0x22DF	; 0x8022df <pxCurrentTCB>
    1760:	f0 91 e0 22 	lds	r31, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    1764:	96 89       	ldd	r25, Z+22	; 0x16
    1766:	8e 89       	ldd	r24, Y+22	; 0x16
    1768:	89 17       	cp	r24, r25
    176a:	20 f0       	brcs	.+8      	; 0x1774 <xTaskCreate+0x182>
    176c:	c0 93 df 22 	sts	0x22DF, r28	; 0x8022df <pxCurrentTCB>
    1770:	d0 93 e0 22 	sts	0x22E0, r29	; 0x8022e0 <pxCurrentTCB+0x1>
    1774:	80 91 89 22 	lds	r24, 0x2289	; 0x802289 <uxTaskNumber>
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	80 93 89 22 	sts	0x2289, r24	; 0x802289 <uxTaskNumber>
    177e:	8e 89       	ldd	r24, Y+22	; 0x16
    1780:	90 91 8f 22 	lds	r25, 0x228F	; 0x80228f <uxTopReadyPriority>
    1784:	98 17       	cp	r25, r24
    1786:	10 f4       	brcc	.+4      	; 0x178c <xTaskCreate+0x19a>
    1788:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <uxTopReadyPriority>
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9c 01       	movw	r18, r24
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	22 0f       	add	r18, r18
    1796:	33 1f       	adc	r19, r19
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	82 0f       	add	r24, r18
    179e:	93 1f       	adc	r25, r19
    17a0:	b6 01       	movw	r22, r12
    17a2:	8e 54       	subi	r24, 0x4E	; 78
    17a4:	9d 4d       	sbci	r25, 0xDD	; 221
    17a6:	c7 d9       	rcall	.-3186   	; 0xb36 <vListInsertEnd>
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	80 91 8e 22 	lds	r24, 0x228E	; 0x80228e <xSchedulerRunning>
    17b0:	88 23       	and	r24, r24
    17b2:	59 f0       	breq	.+22     	; 0x17ca <xTaskCreate+0x1d8>
    17b4:	e0 91 df 22 	lds	r30, 0x22DF	; 0x8022df <pxCurrentTCB>
    17b8:	f0 91 e0 22 	lds	r31, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    17bc:	96 89       	ldd	r25, Z+22	; 0x16
    17be:	8e 89       	ldd	r24, Y+22	; 0x16
    17c0:	98 17       	cp	r25, r24
    17c2:	28 f4       	brcc	.+10     	; 0x17ce <xTaskCreate+0x1dc>
    17c4:	ed da       	rcall	.-2598   	; 0xda0 <vPortYield>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <xTaskCreate+0x1e2>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <xTaskCreate+0x1e2>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <xTaskCreate+0x1e2>
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	df 90       	pop	r13
    17e2:	cf 90       	pop	r12
    17e4:	bf 90       	pop	r11
    17e6:	af 90       	pop	r10
    17e8:	9f 90       	pop	r9
    17ea:	8f 90       	pop	r8
    17ec:	7f 90       	pop	r7
    17ee:	6f 90       	pop	r6
    17f0:	5f 90       	pop	r5
    17f2:	4f 90       	pop	r4
    17f4:	08 95       	ret

000017f6 <vTaskStartScheduler>:
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	0f 2e       	mov	r0, r31
    17fe:	f5 e8       	ldi	r31, 0x85	; 133
    1800:	ef 2e       	mov	r14, r31
    1802:	f2 e2       	ldi	r31, 0x22	; 34
    1804:	ff 2e       	mov	r15, r31
    1806:	f0 2d       	mov	r31, r0
    1808:	00 e0       	ldi	r16, 0x00	; 0
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	45 e5       	ldi	r20, 0x55	; 85
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	6e e0       	ldi	r22, 0x0E	; 14
    1814:	70 e2       	ldi	r23, 0x20	; 32
    1816:	81 eb       	ldi	r24, 0xB1	; 177
    1818:	9a e0       	ldi	r25, 0x0A	; 10
    181a:	eb de       	rcall	.-554    	; 0x15f2 <xTaskCreate>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 f4       	brne	.+36     	; 0x1844 <vTaskStartScheduler+0x4e>
    1820:	e7 d2       	rcall	.+1486   	; 0x1df0 <xTimerCreateTimerTask>
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	79 f4       	brne	.+30     	; 0x1844 <vTaskStartScheduler+0x4e>
    1826:	f8 94       	cli
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	80 93 87 22 	sts	0x2287, r24	; 0x802287 <xNextTaskUnblockTime>
    1830:	90 93 88 22 	sts	0x2288, r25	; 0x802288 <xNextTaskUnblockTime+0x1>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	80 93 8e 22 	sts	0x228E, r24	; 0x80228e <xSchedulerRunning>
    183a:	10 92 90 22 	sts	0x2290, r1	; 0x802290 <xTickCount>
    183e:	10 92 91 22 	sts	0x2291, r1	; 0x802291 <xTickCount+0x1>
    1842:	69 da       	rcall	.-2862   	; 0xd16 <xPortStartScheduler>
    1844:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <uxTopUsedPriority>
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	08 95       	ret

00001850 <vTaskSuspendAll>:
    1850:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <uxSchedulerSuspended>
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	80 93 84 22 	sts	0x2284, r24	; 0x802284 <uxSchedulerSuspended>
    185a:	08 95       	ret

0000185c <xTaskGetTickCount>:
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	0f 92       	push	r0
    1862:	80 91 90 22 	lds	r24, 0x2290	; 0x802290 <xTickCount>
    1866:	90 91 91 22 	lds	r25, 0x2291	; 0x802291 <xTickCount+0x1>
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	08 95       	ret

00001870 <xTaskIncrementTick>:
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <uxSchedulerSuspended>
    1882:	81 11       	cpse	r24, r1
    1884:	9a c0       	rjmp	.+308    	; 0x19ba <xTaskIncrementTick+0x14a>
    1886:	e0 90 90 22 	lds	r14, 0x2290	; 0x802290 <xTickCount>
    188a:	f0 90 91 22 	lds	r15, 0x2291	; 0x802291 <xTickCount+0x1>
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	e8 1a       	sub	r14, r24
    1892:	f8 0a       	sbc	r15, r24
    1894:	e0 92 90 22 	sts	0x2290, r14	; 0x802290 <xTickCount>
    1898:	f0 92 91 22 	sts	0x2291, r15	; 0x802291 <xTickCount+0x1>
    189c:	e1 14       	cp	r14, r1
    189e:	f1 04       	cpc	r15, r1
    18a0:	b1 f4       	brne	.+44     	; 0x18ce <xTaskIncrementTick+0x5e>
    18a2:	80 91 9e 22 	lds	r24, 0x229E	; 0x80229e <pxDelayedTaskList>
    18a6:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <pxDelayedTaskList+0x1>
    18aa:	20 91 9c 22 	lds	r18, 0x229C	; 0x80229c <pxOverflowDelayedTaskList>
    18ae:	30 91 9d 22 	lds	r19, 0x229D	; 0x80229d <pxOverflowDelayedTaskList+0x1>
    18b2:	20 93 9e 22 	sts	0x229E, r18	; 0x80229e <pxDelayedTaskList>
    18b6:	30 93 9f 22 	sts	0x229F, r19	; 0x80229f <pxDelayedTaskList+0x1>
    18ba:	80 93 9c 22 	sts	0x229C, r24	; 0x80229c <pxOverflowDelayedTaskList>
    18be:	90 93 9d 22 	sts	0x229D, r25	; 0x80229d <pxOverflowDelayedTaskList+0x1>
    18c2:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <xNumOfOverflows>
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	80 93 8a 22 	sts	0x228A, r24	; 0x80228a <xNumOfOverflows>
    18cc:	2e de       	rcall	.-932    	; 0x152a <prvResetNextTaskUnblockTime>
    18ce:	80 91 87 22 	lds	r24, 0x2287	; 0x802287 <xNextTaskUnblockTime>
    18d2:	90 91 88 22 	lds	r25, 0x2288	; 0x802288 <xNextTaskUnblockTime+0x1>
    18d6:	e8 16       	cp	r14, r24
    18d8:	f9 06       	cpc	r15, r25
    18da:	10 f4       	brcc	.+4      	; 0x18e0 <xTaskIncrementTick+0x70>
    18dc:	d1 2c       	mov	r13, r1
    18de:	4f c0       	rjmp	.+158    	; 0x197e <xTaskIncrementTick+0x10e>
    18e0:	d1 2c       	mov	r13, r1
    18e2:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <pxDelayedTaskList>
    18e6:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <pxDelayedTaskList+0x1>
    18ea:	80 81       	ld	r24, Z
    18ec:	81 11       	cpse	r24, r1
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <xTaskIncrementTick+0x8e>
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	9f ef       	ldi	r25, 0xFF	; 255
    18f4:	80 93 87 22 	sts	0x2287, r24	; 0x802287 <xNextTaskUnblockTime>
    18f8:	90 93 88 22 	sts	0x2288, r25	; 0x802288 <xNextTaskUnblockTime+0x1>
    18fc:	40 c0       	rjmp	.+128    	; 0x197e <xTaskIncrementTick+0x10e>
    18fe:	e0 91 9e 22 	lds	r30, 0x229E	; 0x80229e <pxDelayedTaskList>
    1902:	f0 91 9f 22 	lds	r31, 0x229F	; 0x80229f <pxDelayedTaskList+0x1>
    1906:	05 80       	ldd	r0, Z+5	; 0x05
    1908:	f6 81       	ldd	r31, Z+6	; 0x06
    190a:	e0 2d       	mov	r30, r0
    190c:	c6 81       	ldd	r28, Z+6	; 0x06
    190e:	d7 81       	ldd	r29, Z+7	; 0x07
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	e8 16       	cp	r14, r24
    1916:	f9 06       	cpc	r15, r25
    1918:	28 f4       	brcc	.+10     	; 0x1924 <xTaskIncrementTick+0xb4>
    191a:	80 93 87 22 	sts	0x2287, r24	; 0x802287 <xNextTaskUnblockTime>
    191e:	90 93 88 22 	sts	0x2288, r25	; 0x802288 <xNextTaskUnblockTime+0x1>
    1922:	2d c0       	rjmp	.+90     	; 0x197e <xTaskIncrementTick+0x10e>
    1924:	8e 01       	movw	r16, r28
    1926:	0e 5f       	subi	r16, 0xFE	; 254
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	c8 01       	movw	r24, r16
    192c:	56 d9       	rcall	.-3412   	; 0xbda <uxListRemove>
    192e:	8c 89       	ldd	r24, Y+20	; 0x14
    1930:	9d 89       	ldd	r25, Y+21	; 0x15
    1932:	89 2b       	or	r24, r25
    1934:	19 f0       	breq	.+6      	; 0x193c <xTaskIncrementTick+0xcc>
    1936:	ce 01       	movw	r24, r28
    1938:	0c 96       	adiw	r24, 0x0c	; 12
    193a:	4f d9       	rcall	.-3426   	; 0xbda <uxListRemove>
    193c:	8e 89       	ldd	r24, Y+22	; 0x16
    193e:	90 91 8f 22 	lds	r25, 0x228F	; 0x80228f <uxTopReadyPriority>
    1942:	98 17       	cp	r25, r24
    1944:	10 f4       	brcc	.+4      	; 0x194a <xTaskIncrementTick+0xda>
    1946:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <uxTopReadyPriority>
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 01       	movw	r18, r24
    194e:	22 0f       	add	r18, r18
    1950:	33 1f       	adc	r19, r19
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	82 0f       	add	r24, r18
    195c:	93 1f       	adc	r25, r19
    195e:	b8 01       	movw	r22, r16
    1960:	8e 54       	subi	r24, 0x4E	; 78
    1962:	9d 4d       	sbci	r25, 0xDD	; 221
    1964:	e8 d8       	rcall	.-3632   	; 0xb36 <vListInsertEnd>
    1966:	e0 91 df 22 	lds	r30, 0x22DF	; 0x8022df <pxCurrentTCB>
    196a:	f0 91 e0 22 	lds	r31, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    196e:	9e 89       	ldd	r25, Y+22	; 0x16
    1970:	86 89       	ldd	r24, Z+22	; 0x16
    1972:	98 17       	cp	r25, r24
    1974:	08 f4       	brcc	.+2      	; 0x1978 <xTaskIncrementTick+0x108>
    1976:	b5 cf       	rjmp	.-150    	; 0x18e2 <xTaskIncrementTick+0x72>
    1978:	dd 24       	eor	r13, r13
    197a:	d3 94       	inc	r13
    197c:	b2 cf       	rjmp	.-156    	; 0x18e2 <xTaskIncrementTick+0x72>
    197e:	e0 91 df 22 	lds	r30, 0x22DF	; 0x8022df <pxCurrentTCB>
    1982:	f0 91 e0 22 	lds	r31, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    1986:	86 89       	ldd	r24, Z+22	; 0x16
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	ee 0f       	add	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	8e 0f       	add	r24, r30
    199a:	9f 1f       	adc	r25, r31
    199c:	fc 01       	movw	r30, r24
    199e:	ee 54       	subi	r30, 0x4E	; 78
    19a0:	fd 4d       	sbci	r31, 0xDD	; 221
    19a2:	80 81       	ld	r24, Z
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	10 f0       	brcs	.+4      	; 0x19ac <xTaskIncrementTick+0x13c>
    19a8:	dd 24       	eor	r13, r13
    19aa:	d3 94       	inc	r13
    19ac:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <xYieldPending>
    19b0:	88 23       	and	r24, r24
    19b2:	69 f0       	breq	.+26     	; 0x19ce <xTaskIncrementTick+0x15e>
    19b4:	dd 24       	eor	r13, r13
    19b6:	d3 94       	inc	r13
    19b8:	0a c0       	rjmp	.+20     	; 0x19ce <xTaskIncrementTick+0x15e>
    19ba:	80 91 8c 22 	lds	r24, 0x228C	; 0x80228c <xPendedTicks>
    19be:	90 91 8d 22 	lds	r25, 0x228D	; 0x80228d <xPendedTicks+0x1>
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	80 93 8c 22 	sts	0x228C, r24	; 0x80228c <xPendedTicks>
    19c8:	90 93 8d 22 	sts	0x228D, r25	; 0x80228d <xPendedTicks+0x1>
    19cc:	d1 2c       	mov	r13, r1
    19ce:	8d 2d       	mov	r24, r13
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	08 95       	ret

000019e0 <xTaskResumeAll>:
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	0f 92       	push	r0
    19f4:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <uxSchedulerSuspended>
    19f8:	81 50       	subi	r24, 0x01	; 1
    19fa:	80 93 84 22 	sts	0x2284, r24	; 0x802284 <uxSchedulerSuspended>
    19fe:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <uxSchedulerSuspended>
    1a02:	81 11       	cpse	r24, r1
    1a04:	5d c0       	rjmp	.+186    	; 0x1ac0 <xTaskResumeAll+0xe0>
    1a06:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <uxCurrentNumberOfTasks>
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	30 c0       	rjmp	.+96     	; 0x1a6e <xTaskResumeAll+0x8e>
    1a0e:	5b c0       	rjmp	.+182    	; 0x1ac6 <xTaskResumeAll+0xe6>
    1a10:	d7 01       	movw	r26, r14
    1a12:	15 96       	adiw	r26, 0x05	; 5
    1a14:	ed 91       	ld	r30, X+
    1a16:	fc 91       	ld	r31, X
    1a18:	16 97       	sbiw	r26, 0x06	; 6
    1a1a:	c6 81       	ldd	r28, Z+6	; 0x06
    1a1c:	d7 81       	ldd	r29, Z+7	; 0x07
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0c 96       	adiw	r24, 0x0c	; 12
    1a22:	db d8       	rcall	.-3658   	; 0xbda <uxListRemove>
    1a24:	8e 01       	movw	r16, r28
    1a26:	0e 5f       	subi	r16, 0xFE	; 254
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	d6 d8       	rcall	.-3668   	; 0xbda <uxListRemove>
    1a2e:	8e 89       	ldd	r24, Y+22	; 0x16
    1a30:	90 91 8f 22 	lds	r25, 0x228F	; 0x80228f <uxTopReadyPriority>
    1a34:	98 17       	cp	r25, r24
    1a36:	10 f4       	brcc	.+4      	; 0x1a3c <xTaskResumeAll+0x5c>
    1a38:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <uxTopReadyPriority>
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9c 01       	movw	r18, r24
    1a40:	22 0f       	add	r18, r18
    1a42:	33 1f       	adc	r19, r19
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	b8 01       	movw	r22, r16
    1a52:	8e 54       	subi	r24, 0x4E	; 78
    1a54:	9d 4d       	sbci	r25, 0xDD	; 221
    1a56:	6f d8       	rcall	.-3874   	; 0xb36 <vListInsertEnd>
    1a58:	e0 91 df 22 	lds	r30, 0x22DF	; 0x8022df <pxCurrentTCB>
    1a5c:	f0 91 e0 22 	lds	r31, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    1a60:	9e 89       	ldd	r25, Y+22	; 0x16
    1a62:	86 89       	ldd	r24, Z+22	; 0x16
    1a64:	98 17       	cp	r25, r24
    1a66:	68 f0       	brcs	.+26     	; 0x1a82 <xTaskResumeAll+0xa2>
    1a68:	d0 92 8b 22 	sts	0x228B, r13	; 0x80228b <xYieldPending>
    1a6c:	0a c0       	rjmp	.+20     	; 0x1a82 <xTaskResumeAll+0xa2>
    1a6e:	c0 e0       	ldi	r28, 0x00	; 0
    1a70:	d0 e0       	ldi	r29, 0x00	; 0
    1a72:	0f 2e       	mov	r0, r31
    1a74:	f3 e9       	ldi	r31, 0x93	; 147
    1a76:	ef 2e       	mov	r14, r31
    1a78:	f2 e2       	ldi	r31, 0x22	; 34
    1a7a:	ff 2e       	mov	r15, r31
    1a7c:	f0 2d       	mov	r31, r0
    1a7e:	dd 24       	eor	r13, r13
    1a80:	d3 94       	inc	r13
    1a82:	f7 01       	movw	r30, r14
    1a84:	80 81       	ld	r24, Z
    1a86:	81 11       	cpse	r24, r1
    1a88:	c3 cf       	rjmp	.-122    	; 0x1a10 <xTaskResumeAll+0x30>
    1a8a:	cd 2b       	or	r28, r29
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <xTaskResumeAll+0xb0>
    1a8e:	4d dd       	rcall	.-1382   	; 0x152a <prvResetNextTaskUnblockTime>
    1a90:	c0 91 8c 22 	lds	r28, 0x228C	; 0x80228c <xPendedTicks>
    1a94:	d0 91 8d 22 	lds	r29, 0x228D	; 0x80228d <xPendedTicks+0x1>
    1a98:	20 97       	sbiw	r28, 0x00	; 0
    1a9a:	59 f0       	breq	.+22     	; 0x1ab2 <xTaskResumeAll+0xd2>
    1a9c:	11 e0       	ldi	r17, 0x01	; 1
    1a9e:	e8 de       	rcall	.-560    	; 0x1870 <xTaskIncrementTick>
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	10 93 8b 22 	sts	0x228B, r17	; 0x80228b <xYieldPending>
    1aa6:	21 97       	sbiw	r28, 0x01	; 1
    1aa8:	d1 f7       	brne	.-12     	; 0x1a9e <xTaskResumeAll+0xbe>
    1aaa:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <xPendedTicks>
    1aae:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <xPendedTicks+0x1>
    1ab2:	80 91 8b 22 	lds	r24, 0x228B	; 0x80228b <xYieldPending>
    1ab6:	88 23       	and	r24, r24
    1ab8:	29 f0       	breq	.+10     	; 0x1ac4 <xTaskResumeAll+0xe4>
    1aba:	72 d9       	rcall	.-3356   	; 0xda0 <vPortYield>
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <xTaskResumeAll+0xe6>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <xTaskResumeAll+0xe6>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	08 95       	ret

00001ada <vTaskDelay>:
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	ec 01       	movw	r28, r24
    1ae0:	89 2b       	or	r24, r25
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <vTaskDelay+0x18>
    1ae4:	b5 de       	rcall	.-662    	; 0x1850 <vTaskSuspendAll>
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	ce 01       	movw	r24, r28
    1aea:	42 dd       	rcall	.-1404   	; 0x1570 <prvAddCurrentTaskToDelayedList>
    1aec:	79 df       	rcall	.-270    	; 0x19e0 <xTaskResumeAll>
    1aee:	81 11       	cpse	r24, r1
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <vTaskDelay+0x1a>
    1af2:	56 d9       	rcall	.-3412   	; 0xda0 <vPortYield>
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <vTaskSwitchContext>:
    1afa:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <uxSchedulerSuspended>
    1afe:	88 23       	and	r24, r24
    1b00:	21 f0       	breq	.+8      	; 0x1b0a <vTaskSwitchContext+0x10>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	80 93 8b 22 	sts	0x228B, r24	; 0x80228b <xYieldPending>
    1b08:	08 95       	ret
    1b0a:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <xYieldPending>
    1b0e:	20 91 8f 22 	lds	r18, 0x228F	; 0x80228f <uxTopReadyPriority>
    1b12:	82 2f       	mov	r24, r18
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	fc 01       	movw	r30, r24
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	ee 0f       	add	r30, r30
    1b1e:	ff 1f       	adc	r31, r31
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	e8 0f       	add	r30, r24
    1b26:	f9 1f       	adc	r31, r25
    1b28:	ee 54       	subi	r30, 0x4E	; 78
    1b2a:	fd 4d       	sbci	r31, 0xDD	; 221
    1b2c:	30 81       	ld	r19, Z
    1b2e:	31 11       	cpse	r19, r1
    1b30:	11 c0       	rjmp	.+34     	; 0x1b54 <vTaskSwitchContext+0x5a>
    1b32:	21 50       	subi	r18, 0x01	; 1
    1b34:	82 2f       	mov	r24, r18
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	fc 01       	movw	r30, r24
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	e8 0f       	add	r30, r24
    1b48:	f9 1f       	adc	r31, r25
    1b4a:	ee 54       	subi	r30, 0x4E	; 78
    1b4c:	fd 4d       	sbci	r31, 0xDD	; 221
    1b4e:	30 81       	ld	r19, Z
    1b50:	33 23       	and	r19, r19
    1b52:	79 f3       	breq	.-34     	; 0x1b32 <vTaskSwitchContext+0x38>
    1b54:	ac 01       	movw	r20, r24
    1b56:	44 0f       	add	r20, r20
    1b58:	55 1f       	adc	r21, r21
    1b5a:	44 0f       	add	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	44 0f       	add	r20, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	48 0f       	add	r20, r24
    1b64:	59 1f       	adc	r21, r25
    1b66:	da 01       	movw	r26, r20
    1b68:	ae 54       	subi	r26, 0x4E	; 78
    1b6a:	bd 4d       	sbci	r27, 0xDD	; 221
    1b6c:	11 96       	adiw	r26, 0x01	; 1
    1b6e:	ed 91       	ld	r30, X+
    1b70:	fc 91       	ld	r31, X
    1b72:	12 97       	sbiw	r26, 0x02	; 2
    1b74:	02 80       	ldd	r0, Z+2	; 0x02
    1b76:	f3 81       	ldd	r31, Z+3	; 0x03
    1b78:	e0 2d       	mov	r30, r0
    1b7a:	11 96       	adiw	r26, 0x01	; 1
    1b7c:	ed 93       	st	X+, r30
    1b7e:	fc 93       	st	X, r31
    1b80:	12 97       	sbiw	r26, 0x02	; 2
    1b82:	4b 54       	subi	r20, 0x4B	; 75
    1b84:	5d 4d       	sbci	r21, 0xDD	; 221
    1b86:	e4 17       	cp	r30, r20
    1b88:	f5 07       	cpc	r31, r21
    1b8a:	29 f4       	brne	.+10     	; 0x1b96 <vTaskSwitchContext+0x9c>
    1b8c:	42 81       	ldd	r20, Z+2	; 0x02
    1b8e:	53 81       	ldd	r21, Z+3	; 0x03
    1b90:	fd 01       	movw	r30, r26
    1b92:	41 83       	std	Z+1, r20	; 0x01
    1b94:	52 83       	std	Z+2, r21	; 0x02
    1b96:	fc 01       	movw	r30, r24
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	8e 0f       	add	r24, r30
    1ba6:	9f 1f       	adc	r25, r31
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ee 54       	subi	r30, 0x4E	; 78
    1bac:	fd 4d       	sbci	r31, 0xDD	; 221
    1bae:	01 80       	ldd	r0, Z+1	; 0x01
    1bb0:	f2 81       	ldd	r31, Z+2	; 0x02
    1bb2:	e0 2d       	mov	r30, r0
    1bb4:	86 81       	ldd	r24, Z+6	; 0x06
    1bb6:	97 81       	ldd	r25, Z+7	; 0x07
    1bb8:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <pxCurrentTCB>
    1bbc:	90 93 e0 22 	sts	0x22E0, r25	; 0x8022e0 <pxCurrentTCB+0x1>
    1bc0:	20 93 8f 22 	sts	0x228F, r18	; 0x80228f <uxTopReadyPriority>
    1bc4:	08 95       	ret

00001bc6 <vTaskPlaceOnEventList>:
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	eb 01       	movw	r28, r22
    1bcc:	60 91 df 22 	lds	r22, 0x22DF	; 0x8022df <pxCurrentTCB>
    1bd0:	70 91 e0 22 	lds	r23, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    1bd4:	64 5f       	subi	r22, 0xF4	; 244
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	0e 94 bc 05 	call	0xb78	; 0xb78 <vListInsert>
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	ce 01       	movw	r24, r28
    1be0:	c7 dc       	rcall	.-1650   	; 0x1570 <prvAddCurrentTaskToDelayedList>
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <vTaskPlaceOnEventListRestricted>:
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	8b 01       	movw	r16, r22
    1bf0:	c4 2f       	mov	r28, r20
    1bf2:	60 91 df 22 	lds	r22, 0x22DF	; 0x8022df <pxCurrentTCB>
    1bf6:	70 91 e0 22 	lds	r23, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    1bfa:	64 5f       	subi	r22, 0xF4	; 244
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	0e 94 9b 05 	call	0xb36	; 0xb36 <vListInsertEnd>
    1c02:	cc 23       	and	r28, r28
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <vTaskPlaceOnEventListRestricted+0x22>
    1c06:	0f ef       	ldi	r16, 0xFF	; 255
    1c08:	1f ef       	ldi	r17, 0xFF	; 255
    1c0a:	6c 2f       	mov	r22, r28
    1c0c:	c8 01       	movw	r24, r16
    1c0e:	b0 dc       	rcall	.-1696   	; 0x1570 <prvAddCurrentTaskToDelayedList>
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <xTaskRemoveFromEventList>:
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	dc 01       	movw	r26, r24
    1c22:	15 96       	adiw	r26, 0x05	; 5
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	16 97       	sbiw	r26, 0x06	; 6
    1c2a:	c6 81       	ldd	r28, Z+6	; 0x06
    1c2c:	d7 81       	ldd	r29, Z+7	; 0x07
    1c2e:	8e 01       	movw	r16, r28
    1c30:	04 5f       	subi	r16, 0xF4	; 244
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	c8 01       	movw	r24, r16
    1c36:	0e 94 ed 05 	call	0xbda	; 0xbda <uxListRemove>
    1c3a:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <uxSchedulerSuspended>
    1c3e:	81 11       	cpse	r24, r1
    1c40:	1c c0       	rjmp	.+56     	; 0x1c7a <xTaskRemoveFromEventList+0x62>
    1c42:	0a 50       	subi	r16, 0x0A	; 10
    1c44:	11 09       	sbc	r17, r1
    1c46:	c8 01       	movw	r24, r16
    1c48:	0e 94 ed 05 	call	0xbda	; 0xbda <uxListRemove>
    1c4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c4e:	90 91 8f 22 	lds	r25, 0x228F	; 0x80228f <uxTopReadyPriority>
    1c52:	98 17       	cp	r25, r24
    1c54:	10 f4       	brcc	.+4      	; 0x1c5a <xTaskRemoveFromEventList+0x42>
    1c56:	80 93 8f 22 	sts	0x228F, r24	; 0x80228f <uxTopReadyPriority>
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 01       	movw	r18, r24
    1c5e:	22 0f       	add	r18, r18
    1c60:	33 1f       	adc	r19, r19
    1c62:	22 0f       	add	r18, r18
    1c64:	33 1f       	adc	r19, r19
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	82 0f       	add	r24, r18
    1c6c:	93 1f       	adc	r25, r19
    1c6e:	b8 01       	movw	r22, r16
    1c70:	8e 54       	subi	r24, 0x4E	; 78
    1c72:	9d 4d       	sbci	r25, 0xDD	; 221
    1c74:	0e 94 9b 05 	call	0xb36	; 0xb36 <vListInsertEnd>
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <xTaskRemoveFromEventList+0x6c>
    1c7a:	b8 01       	movw	r22, r16
    1c7c:	83 e9       	ldi	r24, 0x93	; 147
    1c7e:	92 e2       	ldi	r25, 0x22	; 34
    1c80:	0e 94 9b 05 	call	0xb36	; 0xb36 <vListInsertEnd>
    1c84:	e0 91 df 22 	lds	r30, 0x22DF	; 0x8022df <pxCurrentTCB>
    1c88:	f0 91 e0 22 	lds	r31, 0x22E0	; 0x8022e0 <pxCurrentTCB+0x1>
    1c8c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c8e:	86 89       	ldd	r24, Z+22	; 0x16
    1c90:	89 17       	cp	r24, r25
    1c92:	20 f4       	brcc	.+8      	; 0x1c9c <xTaskRemoveFromEventList+0x84>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	80 93 8b 22 	sts	0x228B, r24	; 0x80228b <xYieldPending>
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <xTaskRemoveFromEventList+0x86>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	08 95       	ret

00001ca8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1ca8:	20 91 8a 22 	lds	r18, 0x228A	; 0x80228a <xNumOfOverflows>
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1cb0:	20 91 90 22 	lds	r18, 0x2290	; 0x802290 <xTickCount>
    1cb4:	30 91 91 22 	lds	r19, 0x2291	; 0x802291 <xTickCount+0x1>
    1cb8:	21 83       	std	Z+1, r18	; 0x01
    1cba:	32 83       	std	Z+2, r19	; 0x02
    1cbc:	08 95       	ret

00001cbe <xTaskCheckForTimeOut>:
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1cc4:	20 91 90 22 	lds	r18, 0x2290	; 0x802290 <xTickCount>
    1cc8:	30 91 91 22 	lds	r19, 0x2291	; 0x802291 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1ccc:	dc 01       	movw	r26, r24
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	4d 91       	ld	r20, X+
    1cd2:	5c 91       	ld	r21, X
    1cd4:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1cd6:	e0 91 8a 22 	lds	r30, 0x228A	; 0x80228a <xNumOfOverflows>
    1cda:	fc 91       	ld	r31, X
    1cdc:	fe 17       	cp	r31, r30
    1cde:	41 f0       	breq	.+16     	; 0x1cf0 <xTaskCheckForTimeOut+0x32>
    1ce0:	24 17       	cp	r18, r20
    1ce2:	35 07       	cpc	r19, r21
    1ce4:	28 f0       	brcs	.+10     	; 0x1cf0 <xTaskCheckForTimeOut+0x32>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1ce6:	fb 01       	movw	r30, r22
    1ce8:	10 82       	st	Z, r1
    1cea:	11 82       	std	Z+1, r1	; 0x01
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <xTaskCheckForTimeOut+0x5a>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1cf0:	24 1b       	sub	r18, r20
    1cf2:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1cf4:	db 01       	movw	r26, r22
    1cf6:	4d 91       	ld	r20, X+
    1cf8:	5c 91       	ld	r21, X
    1cfa:	24 17       	cp	r18, r20
    1cfc:	35 07       	cpc	r19, r21
    1cfe:	40 f4       	brcc	.+16     	; 0x1d10 <xTaskCheckForTimeOut+0x52>
    1d00:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1d02:	42 1b       	sub	r20, r18
    1d04:	53 0b       	sbc	r21, r19
    1d06:	40 83       	st	Z, r20
    1d08:	51 83       	std	Z+1, r21	; 0x01
            vTaskInternalSetTimeOutState( pxTimeOut );
    1d0a:	ce df       	rcall	.-100    	; 0x1ca8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1d10:	fb 01       	movw	r30, r22
    1d12:	10 82       	st	Z, r1
    1d14:	11 82       	std	Z+1, r1	; 0x01
            xReturn = pdTRUE;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1d1c:	08 95       	ret

00001d1e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	80 93 8b 22 	sts	0x228B, r24	; 0x80228b <xYieldPending>
    1d24:	08 95       	ret

00001d26 <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    1d26:	80 91 8e 22 	lds	r24, 0x228E	; 0x80228e <xSchedulerRunning>
    1d2a:	88 23       	and	r24, r24
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d2e:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <uxSchedulerSuspended>
    1d32:	88 23       	and	r24, r24
    1d34:	21 f0       	breq	.+8      	; 0x1d3e <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	08 95       	ret
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
            {
                xReturn = taskSCHEDULER_RUNNING;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
                xReturn = taskSCHEDULER_SUSPENDED;
            }
        }

        return xReturn;
    }
    1d40:	08 95       	ret

00001d42 <prvInsertTimerInActiveList>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    1d42:	fc 01       	movw	r30, r24
    1d44:	62 83       	std	Z+2, r22	; 0x02
    1d46:	73 83       	std	Z+3, r23	; 0x03
    1d48:	80 87       	std	Z+8, r24	; 0x08
    1d4a:	91 87       	std	Z+9, r25	; 0x09
    1d4c:	46 17       	cp	r20, r22
    1d4e:	57 07       	cpc	r21, r23
    1d50:	90 f0       	brcs	.+36     	; 0x1d76 <prvInsertTimerInActiveList+0x34>
    1d52:	42 1b       	sub	r20, r18
    1d54:	53 0b       	sbc	r21, r19
    1d56:	84 85       	ldd	r24, Z+12	; 0x0c
    1d58:	95 85       	ldd	r25, Z+13	; 0x0d
    1d5a:	48 17       	cp	r20, r24
    1d5c:	59 07       	cpc	r21, r25
    1d5e:	e0 f4       	brcc	.+56     	; 0x1d98 <prvInsertTimerInActiveList+0x56>
    1d60:	bf 01       	movw	r22, r30
    1d62:	6e 5f       	subi	r22, 0xFE	; 254
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <pxOverflowTimerList>
    1d6a:	90 91 e8 22 	lds	r25, 0x22E8	; 0x8022e8 <pxOverflowTimerList+0x1>
    1d6e:	0e 94 bc 05 	call	0xb78	; 0xb78 <vListInsert>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	08 95       	ret
    1d76:	42 17       	cp	r20, r18
    1d78:	53 07       	cpc	r21, r19
    1d7a:	18 f4       	brcc	.+6      	; 0x1d82 <prvInsertTimerInActiveList+0x40>
    1d7c:	62 17       	cp	r22, r18
    1d7e:	73 07       	cpc	r23, r19
    1d80:	68 f4       	brcc	.+26     	; 0x1d9c <prvInsertTimerInActiveList+0x5a>
    1d82:	bf 01       	movw	r22, r30
    1d84:	6e 5f       	subi	r22, 0xFE	; 254
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	80 91 e9 22 	lds	r24, 0x22E9	; 0x8022e9 <pxCurrentTimerList>
    1d8c:	90 91 ea 22 	lds	r25, 0x22EA	; 0x8022ea <pxCurrentTimerList+0x1>
    1d90:	0e 94 bc 05 	call	0xb78	; 0xb78 <vListInsert>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	08 95       	ret
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	08 95       	ret
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	08 95       	ret

00001da0 <prvCheckForValidListAndQueue>:
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	0f 92       	push	r0
    1da6:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <xTimerQueue>
    1daa:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <xTimerQueue+0x1>
    1dae:	89 2b       	or	r24, r25
    1db0:	e1 f4       	brne	.+56     	; 0x1dea <prvCheckForValidListAndQueue+0x4a>
    1db2:	84 ef       	ldi	r24, 0xF4	; 244
    1db4:	92 e2       	ldi	r25, 0x22	; 34
    1db6:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInitialise>
    1dba:	8b ee       	ldi	r24, 0xEB	; 235
    1dbc:	92 e2       	ldi	r25, 0x22	; 34
    1dbe:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInitialise>
    1dc2:	84 ef       	ldi	r24, 0xF4	; 244
    1dc4:	92 e2       	ldi	r25, 0x22	; 34
    1dc6:	80 93 e9 22 	sts	0x22E9, r24	; 0x8022e9 <pxCurrentTimerList>
    1dca:	90 93 ea 22 	sts	0x22EA, r25	; 0x8022ea <pxCurrentTimerList+0x1>
    1dce:	8b ee       	ldi	r24, 0xEB	; 235
    1dd0:	92 e2       	ldi	r25, 0x22	; 34
    1dd2:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <pxOverflowTimerList>
    1dd6:	90 93 e8 22 	sts	0x22E8, r25	; 0x8022e8 <pxOverflowTimerList+0x1>
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	65 e0       	ldi	r22, 0x05	; 5
    1dde:	8a e0       	ldi	r24, 0x0A	; 10
    1de0:	a4 d9       	rcall	.-3256   	; 0x112a <xQueueGenericCreate>
    1de2:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <xTimerQueue>
    1de6:	90 93 e6 22 	sts	0x22E6, r25	; 0x8022e6 <xTimerQueue+0x1>
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	08 95       	ret

00001df0 <xTimerCreateTimerTask>:
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	d4 df       	rcall	.-88     	; 0x1da0 <prvCheckForValidListAndQueue>
    1df8:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <xTimerQueue>
    1dfc:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <xTimerQueue+0x1>
    1e00:	89 2b       	or	r24, r25
    1e02:	89 f0       	breq	.+34     	; 0x1e26 <xTimerCreateTimerTask+0x36>
    1e04:	0f 2e       	mov	r0, r31
    1e06:	f3 ee       	ldi	r31, 0xE3	; 227
    1e08:	ef 2e       	mov	r14, r31
    1e0a:	f2 e2       	ldi	r31, 0x22	; 34
    1e0c:	ff 2e       	mov	r15, r31
    1e0e:	f0 2d       	mov	r31, r0
    1e10:	03 e0       	ldi	r16, 0x03	; 3
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	45 e5       	ldi	r20, 0x55	; 85
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	63 e1       	ldi	r22, 0x13	; 19
    1e1c:	70 e2       	ldi	r23, 0x20	; 32
    1e1e:	88 ec       	ldi	r24, 0xC8	; 200
    1e20:	9f e0       	ldi	r25, 0x0F	; 15
    1e22:	e7 db       	rcall	.-2098   	; 0x15f2 <xTaskCreate>
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <xTimerCreateTimerTask+0x38>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	08 95       	ret

00001e30 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	25 97       	sbiw	r28, 0x05	; 5
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	de bf       	out	0x3e, r29	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1e42:	e0 91 e5 22 	lds	r30, 0x22E5	; 0x8022e5 <xTimerQueue>
    1e46:	f0 91 e6 22 	lds	r31, 0x22E6	; 0x8022e6 <xTimerQueue+0x1>
    1e4a:	30 97       	sbiw	r30, 0x00	; 0
    1e4c:	51 f1       	breq	.+84     	; 0x1ea2 <xTimerGenericCommand+0x72>
    1e4e:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1e50:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1e52:	4a 83       	std	Y+2, r20	; 0x02
    1e54:	5b 83       	std	Y+3, r21	; 0x03
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1e56:	8c 83       	std	Y+4, r24	; 0x04
    1e58:	9d 83       	std	Y+5, r25	; 0x05

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1e5a:	66 30       	cpi	r22, 0x06	; 6
    1e5c:	d4 f4       	brge	.+52     	; 0x1e92 <xTimerGenericCommand+0x62>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1e5e:	63 df       	rcall	.-314    	; 0x1d26 <xTaskGetSchedulerState>
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	59 f4       	brne	.+22     	; 0x1e7a <xTimerGenericCommand+0x4a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	a8 01       	movw	r20, r16
    1e68:	be 01       	movw	r22, r28
    1e6a:	6f 5f       	subi	r22, 0xFF	; 255
    1e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6e:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <xTimerQueue>
    1e72:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <xTimerQueue+0x1>
    1e76:	7a d9       	rcall	.-3340   	; 0x116c <xQueueGenericSend>
    1e78:	15 c0       	rjmp	.+42     	; 0x1ea4 <xTimerGenericCommand+0x74>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	be 01       	movw	r22, r28
    1e82:	6f 5f       	subi	r22, 0xFF	; 255
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <xTimerQueue>
    1e8a:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <xTimerQueue+0x1>
    1e8e:	6e d9       	rcall	.-3364   	; 0x116c <xQueueGenericSend>
    1e90:	09 c0       	rjmp	.+18     	; 0x1ea4 <xTimerGenericCommand+0x74>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	ad 01       	movw	r20, r26
    1e96:	be 01       	movw	r22, r28
    1e98:	6f 5f       	subi	r22, 0xFF	; 255
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	cf 01       	movw	r24, r30
    1e9e:	f3 d9       	rcall	.-3098   	; 0x1286 <xQueueGenericSendFromISR>
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <xTimerGenericCommand+0x74>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1ea4:	25 96       	adiw	r28, 0x05	; 5
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	08 95       	ret

00001eb4 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1eb4:	af 92       	push	r10
    1eb6:	bf 92       	push	r11
    1eb8:	cf 92       	push	r12
    1eba:	df 92       	push	r13
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	6c 01       	movw	r12, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1eca:	c8 dc       	rcall	.-1648   	; 0x185c <xTaskGetTickCount>
    1ecc:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1ece:	80 91 e1 22 	lds	r24, 0x22E1	; 0x8022e1 <xLastTime.4399>
    1ed2:	90 91 e2 22 	lds	r25, 0x22E2	; 0x8022e2 <xLastTime.4399+0x1>
    1ed6:	e8 16       	cp	r14, r24
    1ed8:	f9 06       	cpc	r15, r25
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <prvSampleTimeNow+0x2a>
    1edc:	47 c0       	rjmp	.+142    	; 0x1f6c <prvSampleTimeNow+0xb8>
    1ede:	2f c0       	rjmp	.+94     	; 0x1f3e <prvSampleTimeNow+0x8a>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1ee0:	05 80       	ldd	r0, Z+5	; 0x05
    1ee2:	f6 81       	ldd	r31, Z+6	; 0x06
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	a0 80       	ld	r10, Z
    1ee8:	b1 80       	ldd	r11, Z+1	; 0x01

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1eea:	c6 81       	ldd	r28, Z+6	; 0x06
    1eec:	d7 81       	ldd	r29, Z+7	; 0x07
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1eee:	8e 01       	movw	r16, r28
    1ef0:	0e 5f       	subi	r16, 0xFE	; 254
    1ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef4:	c8 01       	movw	r24, r16
    1ef6:	0e 94 ed 05 	call	0xbda	; 0xbda <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1efa:	e8 89       	ldd	r30, Y+16	; 0x10
    1efc:	f9 89       	ldd	r31, Y+17	; 0x11
    1efe:	ce 01       	movw	r24, r28
    1f00:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1f02:	8a 89       	ldd	r24, Y+18	; 0x12
    1f04:	82 ff       	sbrs	r24, 2
    1f06:	1b c0       	rjmp	.+54     	; 0x1f3e <prvSampleTimeNow+0x8a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1f08:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f0c:	8a 0d       	add	r24, r10
    1f0e:	9b 1d       	adc	r25, r11

                if( xReloadTime > xNextExpireTime )
    1f10:	a8 16       	cp	r10, r24
    1f12:	b9 06       	cpc	r11, r25
    1f14:	60 f4       	brcc	.+24     	; 0x1f2e <prvSampleTimeNow+0x7a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1f16:	8a 83       	std	Y+2, r24	; 0x02
    1f18:	9b 83       	std	Y+3, r25	; 0x03
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1f1a:	c8 87       	std	Y+8, r28	; 0x08
    1f1c:	d9 87       	std	Y+9, r29	; 0x09
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1f1e:	b8 01       	movw	r22, r16
    1f20:	80 91 e9 22 	lds	r24, 0x22E9	; 0x8022e9 <pxCurrentTimerList>
    1f24:	90 91 ea 22 	lds	r25, 0x22EA	; 0x8022ea <pxCurrentTimerList+0x1>
    1f28:	0e 94 bc 05 	call	0xb78	; 0xb78 <vListInsert>
    1f2c:	08 c0       	rjmp	.+16     	; 0x1f3e <prvSampleTimeNow+0x8a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1f2e:	00 e0       	ldi	r16, 0x00	; 0
    1f30:	10 e0       	ldi	r17, 0x00	; 0
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	a5 01       	movw	r20, r10
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	79 df       	rcall	.-270    	; 0x1e30 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1f3e:	e0 91 e9 22 	lds	r30, 0x22E9	; 0x8022e9 <pxCurrentTimerList>
    1f42:	f0 91 ea 22 	lds	r31, 0x22EA	; 0x8022ea <pxCurrentTimerList+0x1>
    1f46:	80 81       	ld	r24, Z
    1f48:	81 11       	cpse	r24, r1
    1f4a:	ca cf       	rjmp	.-108    	; 0x1ee0 <prvSampleTimeNow+0x2c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1f4c:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <pxOverflowTimerList>
    1f50:	90 91 e8 22 	lds	r25, 0x22E8	; 0x8022e8 <pxOverflowTimerList+0x1>
    1f54:	80 93 e9 22 	sts	0x22E9, r24	; 0x8022e9 <pxCurrentTimerList>
    1f58:	90 93 ea 22 	sts	0x22EA, r25	; 0x8022ea <pxCurrentTimerList+0x1>
        pxOverflowTimerList = pxTemp;
    1f5c:	e0 93 e7 22 	sts	0x22E7, r30	; 0x8022e7 <pxOverflowTimerList>
    1f60:	f0 93 e8 22 	sts	0x22E8, r31	; 0x8022e8 <pxOverflowTimerList+0x1>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	f6 01       	movw	r30, r12
    1f68:	80 83       	st	Z, r24
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <prvSampleTimeNow+0xbc>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    1f70:	e0 92 e1 22 	sts	0x22E1, r14	; 0x8022e1 <xLastTime.4399>
    1f74:	f0 92 e2 22 	sts	0x22E2, r15	; 0x8022e2 <xLastTime.4399+0x1>

        return xTimeNow;
    }
    1f78:	c7 01       	movw	r24, r14
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	bf 90       	pop	r11
    1f8c:	af 90       	pop	r10
    1f8e:	08 95       	ret

00001f90 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <prvTimerTask+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <prvTimerTask+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	5c 01       	movw	r10, r24
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1fa2:	e8 2e       	mov	r14, r24
    1fa4:	fb 2c       	mov	r15, r11
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1fa6:	e0 91 e9 22 	lds	r30, 0x22E9	; 0x8022e9 <pxCurrentTimerList>
    1faa:	f0 91 ea 22 	lds	r31, 0x22EA	; 0x8022ea <pxCurrentTimerList+0x1>
    1fae:	80 81       	ld	r24, Z

        if( *pxListWasEmpty == pdFALSE )
    1fb0:	88 23       	and	r24, r24
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <prvTimerTask+0x26>
    1fb4:	cf c0       	rjmp	.+414    	; 0x2154 <prvTimerTask+0x1c4>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1fb6:	05 80       	ldd	r0, Z+5	; 0x05
    1fb8:	f6 81       	ldd	r31, Z+6	; 0x06
    1fba:	e0 2d       	mov	r30, r0
    1fbc:	c0 80       	ld	r12, Z
    1fbe:	d1 80       	ldd	r13, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1fc0:	47 dc       	rcall	.-1906   	; 0x1850 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1fc2:	c5 01       	movw	r24, r10
    1fc4:	77 df       	rcall	.-274    	; 0x1eb4 <prvSampleTimeNow>
    1fc6:	8c 01       	movw	r16, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	81 11       	cpse	r24, r1
    1fcc:	46 c0       	rjmp	.+140    	; 0x205a <prvTimerTask+0xca>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1fce:	0c 15       	cp	r16, r12
    1fd0:	1d 05       	cpc	r17, r13
                {
                    ( void ) xTaskResumeAll();
    1fd2:	a0 f1       	brcs	.+104    	; 0x203c <prvTimerTask+0xac>
    1fd4:	05 dd       	rcall	.-1526   	; 0x19e0 <xTaskResumeAll>

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1fd6:	e0 91 e9 22 	lds	r30, 0x22E9	; 0x8022e9 <pxCurrentTimerList>
    1fda:	f0 91 ea 22 	lds	r31, 0x22EA	; 0x8022ea <pxCurrentTimerList+0x1>
    1fde:	05 80       	ldd	r0, Z+5	; 0x05
    1fe0:	f6 81       	ldd	r31, Z+6	; 0x06
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	86 80       	ldd	r8, Z+6	; 0x06
    1fe6:	97 80       	ldd	r9, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1fe8:	c4 01       	movw	r24, r8
    1fea:	02 96       	adiw	r24, 0x02	; 2
    1fec:	0e 94 ed 05 	call	0xbda	; 0xbda <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1ff0:	d4 01       	movw	r26, r8
    1ff2:	52 96       	adiw	r26, 0x12	; 18
    1ff4:	8c 91       	ld	r24, X
    1ff6:	52 97       	sbiw	r26, 0x12	; 18
    1ff8:	82 ff       	sbrs	r24, 2
    1ffa:	15 c0       	rjmp	.+42     	; 0x2026 <prvTimerTask+0x96>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1ffc:	1c 96       	adiw	r26, 0x0c	; 12
    1ffe:	6d 91       	ld	r22, X+
    2000:	7c 91       	ld	r23, X
    2002:	1d 97       	sbiw	r26, 0x0d	; 13
    2004:	6c 0d       	add	r22, r12
    2006:	7d 1d       	adc	r23, r13
    2008:	96 01       	movw	r18, r12
    200a:	a8 01       	movw	r20, r16
    200c:	c4 01       	movw	r24, r8
    200e:	99 de       	rcall	.-718    	; 0x1d42 <prvInsertTimerInActiveList>
    2010:	88 23       	and	r24, r24
    2012:	61 f0       	breq	.+24     	; 0x202c <prvTimerTask+0x9c>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2014:	00 e0       	ldi	r16, 0x00	; 0
    2016:	10 e0       	ldi	r17, 0x00	; 0
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	a6 01       	movw	r20, r12
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	c4 01       	movw	r24, r8
    2022:	06 df       	rcall	.-500    	; 0x1e30 <xTimerGenericCommand>
    2024:	03 c0       	rjmp	.+6      	; 0x202c <prvTimerTask+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2026:	8e 7f       	andi	r24, 0xFE	; 254
    2028:	f4 01       	movw	r30, r8
    202a:	82 8b       	std	Z+18, r24	; 0x12
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    202c:	d4 01       	movw	r26, r8
    202e:	50 96       	adiw	r26, 0x10	; 16
    2030:	ed 91       	ld	r30, X+
    2032:	fc 91       	ld	r31, X
    2034:	51 97       	sbiw	r26, 0x11	; 17
    2036:	c4 01       	movw	r24, r8
    2038:	19 95       	eicall
    203a:	80 c0       	rjmp	.+256    	; 0x213c <prvTimerTask+0x1ac>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    203c:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    203e:	b6 01       	movw	r22, r12
    2040:	60 1b       	sub	r22, r16
    2042:	71 0b       	sbc	r23, r17
    2044:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <xTimerQueue>
    2048:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <xTimerQueue+0x1>

                    if( xTaskResumeAll() == pdFALSE )
    204c:	53 da       	rcall	.-2906   	; 0x14f4 <vQueueWaitForMessageRestricted>
    204e:	c8 dc       	rcall	.-1648   	; 0x19e0 <xTaskResumeAll>
    2050:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2052:	74 c0       	rjmp	.+232    	; 0x213c <prvTimerTask+0x1ac>
    2054:	0e 94 d0 06 	call	0xda0	; 0xda0 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2058:	71 c0       	rjmp	.+226    	; 0x213c <prvTimerTask+0x1ac>
    205a:	c2 dc       	rcall	.-1660   	; 0x19e0 <xTaskResumeAll>
    205c:	6f c0       	rjmp	.+222    	; 0x213c <prvTimerTask+0x1ac>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	88 23       	and	r24, r24
    2062:	0c f4       	brge	.+2      	; 0x2066 <prvTimerTask+0xd6>
    2064:	6b c0       	rjmp	.+214    	; 0x213c <prvTimerTask+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2066:	cc 80       	ldd	r12, Y+4	; 0x04
    2068:	dd 80       	ldd	r13, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    206a:	f6 01       	movw	r30, r12
    206c:	82 85       	ldd	r24, Z+10	; 0x0a
    206e:	93 85       	ldd	r25, Z+11	; 0x0b
    2070:	89 2b       	or	r24, r25
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2072:	21 f0       	breq	.+8      	; 0x207c <prvTimerTask+0xec>
    2074:	c6 01       	movw	r24, r12
    2076:	02 96       	adiw	r24, 0x02	; 2
    2078:	0e 94 ed 05 	call	0xbda	; 0xbda <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    207c:	ce 01       	movw	r24, r28
    207e:	06 96       	adiw	r24, 0x06	; 6
    2080:	19 df       	rcall	.-462    	; 0x1eb4 <prvSampleTimeNow>
    2082:	ac 01       	movw	r20, r24

                switch( xMessage.xMessageID )
    2084:	e9 81       	ldd	r30, Y+1	; 0x01
    2086:	0e 2e       	mov	r0, r30
    2088:	00 0c       	add	r0, r0
    208a:	ff 0b       	sbc	r31, r31
    208c:	ea 30       	cpi	r30, 0x0A	; 10
    208e:	f1 05       	cpc	r31, r1
    2090:	08 f0       	brcs	.+2      	; 0x2094 <prvTimerTask+0x104>
    2092:	54 c0       	rjmp	.+168    	; 0x213c <prvTimerTask+0x1ac>
    2094:	88 27       	eor	r24, r24
    2096:	e2 50       	subi	r30, 0x02	; 2
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	8f 4f       	sbci	r24, 0xFF	; 255
    209c:	b6 c6       	rjmp	.+3436   	; 0x2e0a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    209e:	d6 01       	movw	r26, r12
    20a0:	52 96       	adiw	r26, 0x12	; 18
    20a2:	8c 91       	ld	r24, X
    20a4:	52 97       	sbiw	r26, 0x12	; 18
    20a6:	81 60       	ori	r24, 0x01	; 1
    20a8:	52 96       	adiw	r26, 0x12	; 18
    20aa:	8c 93       	st	X, r24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    20ac:	52 97       	sbiw	r26, 0x12	; 18
    20ae:	2a 81       	ldd	r18, Y+2	; 0x02
    20b0:	3b 81       	ldd	r19, Y+3	; 0x03
    20b2:	1c 96       	adiw	r26, 0x0c	; 12
    20b4:	6d 91       	ld	r22, X+
    20b6:	7c 91       	ld	r23, X
    20b8:	1d 97       	sbiw	r26, 0x0d	; 13
    20ba:	62 0f       	add	r22, r18
    20bc:	73 1f       	adc	r23, r19
    20be:	c6 01       	movw	r24, r12
    20c0:	40 de       	rcall	.-896    	; 0x1d42 <prvInsertTimerInActiveList>
    20c2:	88 23       	and	r24, r24
    20c4:	d9 f1       	breq	.+118    	; 0x213c <prvTimerTask+0x1ac>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    20c6:	d6 01       	movw	r26, r12
    20c8:	50 96       	adiw	r26, 0x10	; 16
    20ca:	ed 91       	ld	r30, X+
    20cc:	fc 91       	ld	r31, X
    20ce:	51 97       	sbiw	r26, 0x11	; 17
    20d0:	c6 01       	movw	r24, r12
    20d2:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    20d4:	f6 01       	movw	r30, r12
    20d6:	82 89       	ldd	r24, Z+18	; 0x12
    20d8:	82 ff       	sbrs	r24, 2
    20da:	30 c0       	rjmp	.+96     	; 0x213c <prvTimerTask+0x1ac>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    20dc:	4a 81       	ldd	r20, Y+2	; 0x02
    20de:	5b 81       	ldd	r21, Y+3	; 0x03
    20e0:	84 85       	ldd	r24, Z+12	; 0x0c
    20e2:	95 85       	ldd	r25, Z+13	; 0x0d
    20e4:	48 0f       	add	r20, r24
    20e6:	59 1f       	adc	r21, r25
    20e8:	00 e0       	ldi	r16, 0x00	; 0
    20ea:	10 e0       	ldi	r17, 0x00	; 0
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	c6 01       	movw	r24, r12
    20f4:	9d de       	rcall	.-710    	; 0x1e30 <xTimerGenericCommand>
    20f6:	22 c0       	rjmp	.+68     	; 0x213c <prvTimerTask+0x1ac>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    20f8:	d6 01       	movw	r26, r12
    20fa:	52 96       	adiw	r26, 0x12	; 18
    20fc:	8c 91       	ld	r24, X
    20fe:	52 97       	sbiw	r26, 0x12	; 18
    2100:	8e 7f       	andi	r24, 0xFE	; 254
    2102:	52 96       	adiw	r26, 0x12	; 18
    2104:	8c 93       	st	X, r24
    2106:	1a c0       	rjmp	.+52     	; 0x213c <prvTimerTask+0x1ac>
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2108:	f6 01       	movw	r30, r12
    210a:	82 89       	ldd	r24, Z+18	; 0x12
    210c:	81 60       	ori	r24, 0x01	; 1
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    210e:	82 8b       	std	Z+18, r24	; 0x12
    2110:	6a 81       	ldd	r22, Y+2	; 0x02
    2112:	7b 81       	ldd	r23, Y+3	; 0x03
    2114:	64 87       	std	Z+12, r22	; 0x0c
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2116:	75 87       	std	Z+13, r23	; 0x0d
    2118:	64 0f       	add	r22, r20
    211a:	75 1f       	adc	r23, r21
    211c:	9a 01       	movw	r18, r20
    211e:	c6 01       	movw	r24, r12
    2120:	10 de       	rcall	.-992    	; 0x1d42 <prvInsertTimerInActiveList>
    2122:	0c c0       	rjmp	.+24     	; 0x213c <prvTimerTask+0x1ac>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2124:	d6 01       	movw	r26, r12
    2126:	52 96       	adiw	r26, 0x12	; 18
    2128:	8c 91       	ld	r24, X
    212a:	81 fd       	sbrc	r24, 1
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <prvTimerTask+0x1a6>
                                {
                                    vPortFree( pxTimer );
    212e:	c6 01       	movw	r24, r12
    2130:	0e 94 8f 07 	call	0xf1e	; 0xf1e <vPortFree>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2134:	03 c0       	rjmp	.+6      	; 0x213c <prvTimerTask+0x1ac>
    2136:	8e 7f       	andi	r24, 0xFE	; 254
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2138:	f6 01       	movw	r30, r12
    213a:	82 8b       	std	Z+18, r24	; 0x12
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	6e 2d       	mov	r22, r14
    2142:	7f 2d       	mov	r23, r15
    2144:	80 91 e5 22 	lds	r24, 0x22E5	; 0x8022e5 <xTimerQueue>
    2148:	90 91 e6 22 	lds	r25, 0x22E6	; 0x8022e6 <xTimerQueue+0x1>
    214c:	d6 d8       	rcall	.-3668   	; 0x12fa <xQueueReceive>
    214e:	81 11       	cpse	r24, r1
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2150:	86 cf       	rjmp	.-244    	; 0x205e <prvTimerTask+0xce>
    2152:	29 cf       	rjmp	.-430    	; 0x1fa6 <prvTimerTask+0x16>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2154:	7d db       	rcall	.-2310   	; 0x1850 <vTaskSuspendAll>
    2156:	c5 01       	movw	r24, r10
    2158:	ad de       	rcall	.-678    	; 0x1eb4 <prvSampleTimeNow>
    215a:	8c 01       	movw	r16, r24

            if( xTimerListsWereSwitched == pdFALSE )
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	81 11       	cpse	r24, r1
    2160:	7c cf       	rjmp	.-264    	; 0x205a <prvTimerTask+0xca>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2162:	e0 91 e7 22 	lds	r30, 0x22E7	; 0x8022e7 <pxOverflowTimerList>
    2166:	f0 91 e8 22 	lds	r31, 0x22E8	; 0x8022e8 <pxOverflowTimerList+0x1>
    216a:	80 81       	ld	r24, Z
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	81 11       	cpse	r24, r1
    2170:	40 e0       	ldi	r20, 0x00	; 0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    2172:	c1 2c       	mov	r12, r1
    2174:	d1 2c       	mov	r13, r1
    2176:	63 cf       	rjmp	.-314    	; 0x203e <prvTimerTask+0xae>

00002178 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    218a:	d9 01       	movw	r26, r18
    218c:	c8 01       	movw	r24, r16
    218e:	b6 95       	lsr	r27
    2190:	a7 95       	ror	r26
    2192:	97 95       	ror	r25
    2194:	87 95       	ror	r24
    2196:	48 17       	cp	r20, r24
    2198:	59 07       	cpc	r21, r25
    219a:	6a 07       	cpc	r22, r26
    219c:	7b 07       	cpc	r23, r27
    219e:	70 f4       	brcc	.+28     	; 0x21bc <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    21a0:	6a 01       	movw	r12, r20
    21a2:	7b 01       	movw	r14, r22
    21a4:	cc 0c       	add	r12, r12
    21a6:	dd 1c       	adc	r13, r13
    21a8:	ee 1c       	adc	r14, r14
    21aa:	ff 1c       	adc	r15, r15
    21ac:	c9 01       	movw	r24, r18
    21ae:	b8 01       	movw	r22, r16
    21b0:	a7 01       	movw	r20, r14
    21b2:	96 01       	movw	r18, r12
    21b4:	08 d6       	rcall	.+3088   	; 0x2dc6 <__udivmodsi4>
    21b6:	21 50       	subi	r18, 0x01	; 1
    21b8:	31 09       	sbc	r19, r1
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    21c0:	83 2f       	mov	r24, r19
    21c2:	8f 70       	andi	r24, 0x0F	; 15
    21c4:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    21c6:	2e 83       	std	Y+6, r18	; 0x06
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	df 90       	pop	r13
    21d6:	cf 90       	pop	r12
    21d8:	08 95       	ret

000021da <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	1f 92       	push	r1
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	7c 01       	movw	r14, r24
    21f0:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <usart_init_spi+0x1e>
    21f6:	b2 c1       	rjmp	.+868    	; 0x255c <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    21f8:	80 3c       	cpi	r24, 0xC0	; 192
    21fa:	91 05       	cpc	r25, r1
    21fc:	21 f4       	brne	.+8      	; 0x2206 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    21fe:	60 e1       	ldi	r22, 0x10	; 16
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	e7 d2       	rcall	.+1486   	; 0x27d2 <sysclk_enable_module>
    2204:	ab c1       	rjmp	.+854    	; 0x255c <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2206:	80 e8       	ldi	r24, 0x80	; 128
    2208:	e8 16       	cp	r14, r24
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	f8 06       	cpc	r15, r24
    220e:	21 f4       	brne	.+8      	; 0x2218 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2210:	62 e0       	ldi	r22, 0x02	; 2
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	de d2       	rcall	.+1468   	; 0x27d2 <sysclk_enable_module>
    2216:	a2 c1       	rjmp	.+836    	; 0x255c <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2218:	e1 14       	cp	r14, r1
    221a:	e1 e0       	ldi	r30, 0x01	; 1
    221c:	fe 06       	cpc	r15, r30
    221e:	21 f4       	brne	.+8      	; 0x2228 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	d6 d2       	rcall	.+1452   	; 0x27d2 <sysclk_enable_module>
    2226:	9a c1       	rjmp	.+820    	; 0x255c <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2228:	f0 e8       	ldi	r31, 0x80	; 128
    222a:	ef 16       	cp	r14, r31
    222c:	f3 e0       	ldi	r31, 0x03	; 3
    222e:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2230:	21 f4       	brne	.+8      	; 0x223a <usart_init_spi+0x60>
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	cd d2       	rcall	.+1434   	; 0x27d2 <sysclk_enable_module>
    2238:	91 c1       	rjmp	.+802    	; 0x255c <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    223a:	30 e9       	ldi	r19, 0x90	; 144
    223c:	e3 16       	cp	r14, r19
    223e:	33 e0       	ldi	r19, 0x03	; 3
    2240:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2242:	21 f4       	brne	.+8      	; 0x224c <usart_init_spi+0x72>
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	c4 d2       	rcall	.+1416   	; 0x27d2 <sysclk_enable_module>
    224a:	88 c1       	rjmp	.+784    	; 0x255c <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    224c:	e1 14       	cp	r14, r1
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2252:	21 f4       	brne	.+8      	; 0x225c <usart_init_spi+0x82>
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	bc d2       	rcall	.+1400   	; 0x27d2 <sysclk_enable_module>
    225a:	80 c1       	rjmp	.+768    	; 0x255c <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    225c:	e0 e4       	ldi	r30, 0x40	; 64
    225e:	ee 16       	cp	r14, r30
    2260:	e2 e0       	ldi	r30, 0x02	; 2
    2262:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2264:	21 f4       	brne	.+8      	; 0x226e <usart_init_spi+0x94>
    2266:	62 e0       	ldi	r22, 0x02	; 2
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	b3 d2       	rcall	.+1382   	; 0x27d2 <sysclk_enable_module>
    226c:	77 c1       	rjmp	.+750    	; 0x255c <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    226e:	f0 e2       	ldi	r31, 0x20	; 32
    2270:	ef 16       	cp	r14, r31
    2272:	f3 e0       	ldi	r31, 0x03	; 3
    2274:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2276:	21 f4       	brne	.+8      	; 0x2280 <usart_init_spi+0xa6>
    2278:	64 e0       	ldi	r22, 0x04	; 4
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	aa d2       	rcall	.+1364   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    227e:	6e c1       	rjmp	.+732    	; 0x255c <usart_init_spi+0x382>
    2280:	e1 14       	cp	r14, r1
    2282:	38 e0       	ldi	r19, 0x08	; 8
    2284:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2286:	21 f4       	brne	.+8      	; 0x2290 <usart_init_spi+0xb6>
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	a2 d2       	rcall	.+1348   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    228e:	66 c1       	rjmp	.+716    	; 0x255c <usart_init_spi+0x382>
    2290:	e1 14       	cp	r14, r1
    2292:	89 e0       	ldi	r24, 0x09	; 9
    2294:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2296:	21 f4       	brne	.+8      	; 0x22a0 <usart_init_spi+0xc6>
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	9a d2       	rcall	.+1332   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    229e:	5e c1       	rjmp	.+700    	; 0x255c <usart_init_spi+0x382>
    22a0:	e1 14       	cp	r14, r1
    22a2:	ea e0       	ldi	r30, 0x0A	; 10
    22a4:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    22a6:	21 f4       	brne	.+8      	; 0x22b0 <usart_init_spi+0xd6>
    22a8:	61 e0       	ldi	r22, 0x01	; 1
    22aa:	85 e0       	ldi	r24, 0x05	; 5
    22ac:	92 d2       	rcall	.+1316   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    22ae:	56 c1       	rjmp	.+684    	; 0x255c <usart_init_spi+0x382>
    22b0:	e1 14       	cp	r14, r1
    22b2:	fb e0       	ldi	r31, 0x0B	; 11
    22b4:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    22b6:	21 f4       	brne	.+8      	; 0x22c0 <usart_init_spi+0xe6>
    22b8:	61 e0       	ldi	r22, 0x01	; 1
    22ba:	86 e0       	ldi	r24, 0x06	; 6
    22bc:	8a d2       	rcall	.+1300   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    22be:	4e c1       	rjmp	.+668    	; 0x255c <usart_init_spi+0x382>
    22c0:	30 e4       	ldi	r19, 0x40	; 64
    22c2:	e3 16       	cp	r14, r19
    22c4:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    22c6:	f3 06       	cpc	r15, r19
    22c8:	21 f4       	brne	.+8      	; 0x22d2 <usart_init_spi+0xf8>
    22ca:	62 e0       	ldi	r22, 0x02	; 2
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	81 d2       	rcall	.+1282   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    22d0:	45 c1       	rjmp	.+650    	; 0x255c <usart_init_spi+0x382>
    22d2:	80 e4       	ldi	r24, 0x40	; 64
    22d4:	e8 16       	cp	r14, r24
    22d6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    22d8:	f8 06       	cpc	r15, r24
    22da:	21 f4       	brne	.+8      	; 0x22e4 <usart_init_spi+0x10a>
    22dc:	62 e0       	ldi	r22, 0x02	; 2
    22de:	84 e0       	ldi	r24, 0x04	; 4
    22e0:	78 d2       	rcall	.+1264   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    22e2:	3c c1       	rjmp	.+632    	; 0x255c <usart_init_spi+0x382>
    22e4:	e0 e4       	ldi	r30, 0x40	; 64
    22e6:	ee 16       	cp	r14, r30
    22e8:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    22ea:	fe 06       	cpc	r15, r30
    22ec:	21 f4       	brne	.+8      	; 0x22f6 <usart_init_spi+0x11c>
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	85 e0       	ldi	r24, 0x05	; 5
    22f2:	6f d2       	rcall	.+1246   	; 0x27d2 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    22f4:	33 c1       	rjmp	.+614    	; 0x255c <usart_init_spi+0x382>
    22f6:	f0 e9       	ldi	r31, 0x90	; 144
    22f8:	ef 16       	cp	r14, r31
    22fa:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    22fc:	ff 06       	cpc	r15, r31
    22fe:	21 f4       	brne	.+8      	; 0x2308 <usart_init_spi+0x12e>
    2300:	64 e0       	ldi	r22, 0x04	; 4
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	66 d2       	rcall	.+1228   	; 0x27d2 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2306:	2a c1       	rjmp	.+596    	; 0x255c <usart_init_spi+0x382>
    2308:	30 e9       	ldi	r19, 0x90	; 144
    230a:	e3 16       	cp	r14, r19
    230c:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    230e:	f3 06       	cpc	r15, r19
    2310:	21 f4       	brne	.+8      	; 0x231a <usart_init_spi+0x140>
    2312:	64 e0       	ldi	r22, 0x04	; 4
    2314:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2316:	5d d2       	rcall	.+1210   	; 0x27d2 <sysclk_enable_module>
    2318:	21 c1       	rjmp	.+578    	; 0x255c <usart_init_spi+0x382>
    231a:	80 e9       	ldi	r24, 0x90	; 144
    231c:	e8 16       	cp	r14, r24
    231e:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2320:	f8 06       	cpc	r15, r24
    2322:	21 f4       	brne	.+8      	; 0x232c <usart_init_spi+0x152>
    2324:	64 e0       	ldi	r22, 0x04	; 4
    2326:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2328:	54 d2       	rcall	.+1192   	; 0x27d2 <sysclk_enable_module>
    232a:	18 c1       	rjmp	.+560    	; 0x255c <usart_init_spi+0x382>
    232c:	e0 e9       	ldi	r30, 0x90	; 144
    232e:	ee 16       	cp	r14, r30
    2330:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2332:	fe 06       	cpc	r15, r30
    2334:	21 f4       	brne	.+8      	; 0x233e <usart_init_spi+0x164>
    2336:	64 e0       	ldi	r22, 0x04	; 4
    2338:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    233a:	4b d2       	rcall	.+1174   	; 0x27d2 <sysclk_enable_module>
    233c:	0f c1       	rjmp	.+542    	; 0x255c <usart_init_spi+0x382>
    233e:	f0 ec       	ldi	r31, 0xC0	; 192
    2340:	ef 16       	cp	r14, r31
    2342:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2344:	ff 06       	cpc	r15, r31
    2346:	21 f4       	brne	.+8      	; 0x2350 <usart_init_spi+0x176>
    2348:	68 e0       	ldi	r22, 0x08	; 8
    234a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    234c:	42 d2       	rcall	.+1156   	; 0x27d2 <sysclk_enable_module>
    234e:	06 c1       	rjmp	.+524    	; 0x255c <usart_init_spi+0x382>
    2350:	30 ec       	ldi	r19, 0xC0	; 192
    2352:	e3 16       	cp	r14, r19
    2354:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2356:	f3 06       	cpc	r15, r19
    2358:	21 f4       	brne	.+8      	; 0x2362 <usart_init_spi+0x188>
    235a:	68 e0       	ldi	r22, 0x08	; 8
    235c:	84 e0       	ldi	r24, 0x04	; 4
    235e:	39 d2       	rcall	.+1138   	; 0x27d2 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2360:	fd c0       	rjmp	.+506    	; 0x255c <usart_init_spi+0x382>
    2362:	80 ea       	ldi	r24, 0xA0	; 160
    2364:	e8 16       	cp	r14, r24
    2366:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2368:	f8 06       	cpc	r15, r24
    236a:	61 f4       	brne	.+24     	; 0x2384 <usart_init_spi+0x1aa>
    236c:	60 e1       	ldi	r22, 0x10	; 16
    236e:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2370:	30 d2       	rcall	.+1120   	; 0x27d2 <sysclk_enable_module>
    2372:	e0 ea       	ldi	r30, 0xA0	; 160
    2374:	f8 e0       	ldi	r31, 0x08	; 8
    2376:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2378:	8f 7e       	andi	r24, 0xEF	; 239
    237a:	84 83       	std	Z+4, r24	; 0x04
    237c:	f8 01       	movw	r30, r16
    237e:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2380:	22 50       	subi	r18, 0x02	; 2
    2382:	4c c0       	rjmp	.+152    	; 0x241c <usart_init_spi+0x242>
    2384:	f0 ea       	ldi	r31, 0xA0	; 160
    2386:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2388:	f9 e0       	ldi	r31, 0x09	; 9
    238a:	ff 06       	cpc	r15, r31
    238c:	21 f4       	brne	.+8      	; 0x2396 <usart_init_spi+0x1bc>
    238e:	60 e1       	ldi	r22, 0x10	; 16
    2390:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2392:	1f d2       	rcall	.+1086   	; 0x27d2 <sysclk_enable_module>
    2394:	e3 c0       	rjmp	.+454    	; 0x255c <usart_init_spi+0x382>
    2396:	30 ea       	ldi	r19, 0xA0	; 160
    2398:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    239a:	3a e0       	ldi	r19, 0x0A	; 10
    239c:	f3 06       	cpc	r15, r19
    239e:	21 f4       	brne	.+8      	; 0x23a8 <usart_init_spi+0x1ce>
    23a0:	60 e1       	ldi	r22, 0x10	; 16
    23a2:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    23a4:	16 d2       	rcall	.+1068   	; 0x27d2 <sysclk_enable_module>
    23a6:	da c0       	rjmp	.+436    	; 0x255c <usart_init_spi+0x382>
    23a8:	80 ea       	ldi	r24, 0xA0	; 160
    23aa:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    23ac:	8b e0       	ldi	r24, 0x0B	; 11
    23ae:	f8 06       	cpc	r15, r24
    23b0:	21 f4       	brne	.+8      	; 0x23ba <usart_init_spi+0x1e0>
    23b2:	60 e1       	ldi	r22, 0x10	; 16
    23b4:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    23b6:	0d d2       	rcall	.+1050   	; 0x27d2 <sysclk_enable_module>
    23b8:	d1 c0       	rjmp	.+418    	; 0x255c <usart_init_spi+0x382>
    23ba:	e0 eb       	ldi	r30, 0xB0	; 176
    23bc:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    23be:	e8 e0       	ldi	r30, 0x08	; 8
    23c0:	fe 06       	cpc	r15, r30
    23c2:	21 f4       	brne	.+8      	; 0x23cc <usart_init_spi+0x1f2>
    23c4:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	04 d2       	rcall	.+1032   	; 0x27d2 <sysclk_enable_module>
    23ca:	c8 c0       	rjmp	.+400    	; 0x255c <usart_init_spi+0x382>
    23cc:	f0 eb       	ldi	r31, 0xB0	; 176
    23ce:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    23d0:	f9 e0       	ldi	r31, 0x09	; 9
    23d2:	ff 06       	cpc	r15, r31
    23d4:	21 f4       	brne	.+8      	; 0x23de <usart_init_spi+0x204>
    23d6:	60 e2       	ldi	r22, 0x20	; 32
    23d8:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    23da:	fb d1       	rcall	.+1014   	; 0x27d2 <sysclk_enable_module>
    23dc:	bf c0       	rjmp	.+382    	; 0x255c <usart_init_spi+0x382>
    23de:	30 e8       	ldi	r19, 0x80	; 128
    23e0:	e3 16       	cp	r14, r19
    23e2:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    23e4:	f3 06       	cpc	r15, r19
    23e6:	21 f4       	brne	.+8      	; 0x23f0 <usart_init_spi+0x216>
    23e8:	60 e4       	ldi	r22, 0x40	; 64
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	f2 d1       	rcall	.+996    	; 0x27d2 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    23ee:	b6 c0       	rjmp	.+364    	; 0x255c <usart_init_spi+0x382>
    23f0:	80 ea       	ldi	r24, 0xA0	; 160
    23f2:	e8 16       	cp	r14, r24
    23f4:	84 e0       	ldi	r24, 0x04	; 4
    23f6:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    23f8:	21 f4       	brne	.+8      	; 0x2402 <usart_init_spi+0x228>
    23fa:	60 e4       	ldi	r22, 0x40	; 64
    23fc:	85 e0       	ldi	r24, 0x05	; 5
    23fe:	e9 d1       	rcall	.+978    	; 0x27d2 <sysclk_enable_module>
    2400:	ad c0       	rjmp	.+346    	; 0x255c <usart_init_spi+0x382>
    2402:	f7 01       	movw	r30, r14
    2404:	84 81       	ldd	r24, Z+4	; 0x04
    2406:	8f 7e       	andi	r24, 0xEF	; 239
    2408:	84 83       	std	Z+4, r24	; 0x04
    240a:	fb 01       	movw	r30, r22
    240c:	24 81       	ldd	r18, Z+4	; 0x04
    240e:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2410:	c7 01       	movw	r24, r14
    2412:	f0 ea       	ldi	r31, 0xA0	; 160
    2414:	ef 16       	cp	r14, r31
    2416:	f8 e0       	ldi	r31, 0x08	; 8
    2418:	ff 06       	cpc	r15, r31
    241a:	49 f4       	brne	.+18     	; 0x242e <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    241c:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
    2420:	84 fd       	sbrc	r24, 4
    2422:	a5 c0       	rjmp	.+330    	; 0x256e <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    2424:	0f 2e       	mov	r0, r31
    2426:	f1 e1       	ldi	r31, 0x11	; 17
    2428:	df 2e       	mov	r13, r31
    242a:	f0 2d       	mov	r31, r0
    242c:	a4 c0       	rjmp	.+328    	; 0x2576 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    242e:	80 3b       	cpi	r24, 0xB0	; 176
    2430:	38 e0       	ldi	r19, 0x08	; 8
    2432:	93 07       	cpc	r25, r19
    2434:	91 f0       	breq	.+36     	; 0x245a <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    2436:	80 3a       	cpi	r24, 0xA0	; 160
    2438:	e9 e0       	ldi	r30, 0x09	; 9
    243a:	9e 07       	cpc	r25, r30
    243c:	49 f4       	brne	.+18     	; 0x2450 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    243e:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
    2442:	34 fd       	sbrc	r19, 4
    2444:	9b c0       	rjmp	.+310    	; 0x257c <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    2446:	0f 2e       	mov	r0, r31
    2448:	f9 e1       	ldi	r31, 0x19	; 25
    244a:	df 2e       	mov	r13, r31
    244c:	f0 2d       	mov	r31, r0
    244e:	16 c0       	rjmp	.+44     	; 0x247c <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    2450:	80 3b       	cpi	r24, 0xB0	; 176
    2452:	f9 e0       	ldi	r31, 0x09	; 9
    2454:	9f 07       	cpc	r25, r31
    2456:	f1 f0       	breq	.+60     	; 0x2494 <usart_init_spi+0x2ba>
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    245a:	0f 2e       	mov	r0, r31
    245c:	f5 e1       	ldi	r31, 0x15	; 21
    245e:	df 2e       	mov	r13, r31
    2460:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    2462:	80 3a       	cpi	r24, 0xA0	; 160
    2464:	3a e0       	ldi	r19, 0x0A	; 10
    2466:	93 07       	cpc	r25, r19
    2468:	49 f4       	brne	.+18     	; 0x247c <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    246a:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
    246e:	84 fd       	sbrc	r24, 4
    2470:	8a c0       	rjmp	.+276    	; 0x2586 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    2472:	0f 2e       	mov	r0, r31
    2474:	f1 e2       	ldi	r31, 0x21	; 33
    2476:	df 2e       	mov	r13, r31
    2478:	f0 2d       	mov	r31, r0
    247a:	15 c0       	rjmp	.+42     	; 0x24a6 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    247c:	80 3a       	cpi	r24, 0xA0	; 160
    247e:	9b 40       	sbci	r25, 0x0B	; 11
    2480:	91 f4       	brne	.+36     	; 0x24a6 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    2482:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
    2486:	84 fd       	sbrc	r24, 4
    2488:	0a c0       	rjmp	.+20     	; 0x249e <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    248a:	0f 2e       	mov	r0, r31
    248c:	f9 e2       	ldi	r31, 0x29	; 41
    248e:	df 2e       	mov	r13, r31
    2490:	f0 2d       	mov	r31, r0
    2492:	09 c0       	rjmp	.+18     	; 0x24a6 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    2494:	0f 2e       	mov	r0, r31
    2496:	fd e1       	ldi	r31, 0x1D	; 29
    2498:	df 2e       	mov	r13, r31
    249a:	f0 2d       	mov	r31, r0
    249c:	04 c0       	rjmp	.+8      	; 0x24a6 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    249e:	0f 2e       	mov	r0, r31
    24a0:	fd e2       	ldi	r31, 0x2D	; 45
    24a2:	df 2e       	mov	r13, r31
    24a4:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    24a6:	ed 2d       	mov	r30, r13
    24a8:	e6 95       	lsr	r30
    24aa:	e6 95       	lsr	r30
    24ac:	e6 95       	lsr	r30
    24ae:	30 e2       	ldi	r19, 0x20	; 32
    24b0:	e3 9f       	mul	r30, r19
    24b2:	f0 01       	movw	r30, r0
    24b4:	11 24       	eor	r1, r1
    24b6:	fa 5f       	subi	r31, 0xFA	; 250
    24b8:	3d 2d       	mov	r19, r13
    24ba:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	03 2e       	mov	r0, r19
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <usart_init_spi+0x2ee>
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    24cc:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    24ce:	22 30       	cpi	r18, 0x02	; 2
    24d0:	10 f0       	brcs	.+4      	; 0x24d6 <usart_init_spi+0x2fc>
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <usart_init_spi+0x2fe>
    24d6:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    24d8:	df 01       	movw	r26, r30
    24da:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    24dc:	a3 0f       	add	r26, r19
    24de:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24e0:	9f b7       	in	r25, 0x3f	; 63
    24e2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    24e4:	f8 94       	cli
	return flags;
    24e6:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    24e8:	2c 91       	ld	r18, X
    24ea:	27 70       	andi	r18, 0x07	; 7
    24ec:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    24ee:	9c 91       	ld	r25, X
    24f0:	94 2b       	or	r25, r20
    24f2:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    24f4:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    24f6:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    24f8:	f7 01       	movw	r30, r14
    24fa:	85 81       	ldd	r24, Z+5	; 0x05
    24fc:	80 6c       	ori	r24, 0xC0	; 192
    24fe:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    2500:	f8 01       	movw	r30, r16
    2502:	84 81       	ldd	r24, Z+4	; 0x04
    2504:	8d 7f       	andi	r24, 0xFD	; 253
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	29 f4       	brne	.+10     	; 0x2514 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    250a:	f7 01       	movw	r30, r14
    250c:	85 81       	ldd	r24, Z+5	; 0x05
    250e:	82 60       	ori	r24, 0x02	; 2
    2510:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    2512:	04 c0       	rjmp	.+8      	; 0x251c <usart_init_spi+0x342>
    2514:	f7 01       	movw	r30, r14
    2516:	85 81       	ldd	r24, Z+5	; 0x05
    2518:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    251a:	85 83       	std	Z+5, r24	; 0x05
    251c:	f8 01       	movw	r30, r16
    251e:	85 81       	ldd	r24, Z+5	; 0x05
    2520:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    2522:	29 f0       	breq	.+10     	; 0x252e <usart_init_spi+0x354>
    2524:	f7 01       	movw	r30, r14
    2526:	85 81       	ldd	r24, Z+5	; 0x05
    2528:	84 60       	ori	r24, 0x04	; 4
    252a:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <usart_init_spi+0x35c>
    252e:	f7 01       	movw	r30, r14
    2530:	85 81       	ldd	r24, Z+5	; 0x05
    2532:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2534:	85 83       	std	Z+5, r24	; 0x05
    2536:	f8 01       	movw	r30, r16
    2538:	40 81       	ld	r20, Z
    253a:	51 81       	ldd	r21, Z+1	; 0x01
    253c:	62 81       	ldd	r22, Z+2	; 0x02
    253e:	73 81       	ldd	r23, Z+3	; 0x03
    2540:	00 e8       	ldi	r16, 0x80	; 128
    2542:	14 e8       	ldi	r17, 0x84	; 132
    2544:	2e e1       	ldi	r18, 0x1E	; 30
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	c7 01       	movw	r24, r14
    254a:	16 de       	rcall	.-980    	; 0x2178 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    254c:	f7 01       	movw	r30, r14
    254e:	84 81       	ldd	r24, Z+4	; 0x04
    2550:	88 60       	ori	r24, 0x08	; 8
    2552:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2554:	84 81       	ldd	r24, Z+4	; 0x04
    2556:	80 61       	ori	r24, 0x10	; 16
    2558:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    255a:	1a c0       	rjmp	.+52     	; 0x2590 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    255c:	f7 01       	movw	r30, r14
    255e:	84 81       	ldd	r24, Z+4	; 0x04
    2560:	8f 7e       	andi	r24, 0xEF	; 239
    2562:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2564:	f8 01       	movw	r30, r16
    2566:	24 81       	ldd	r18, Z+4	; 0x04
    2568:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    256a:	c7 01       	movw	r24, r14
    256c:	60 cf       	rjmp	.-320    	; 0x242e <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    256e:	0f 2e       	mov	r0, r31
    2570:	f5 e1       	ldi	r31, 0x15	; 21
    2572:	df 2e       	mov	r13, r31
    2574:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    2576:	80 ea       	ldi	r24, 0xA0	; 160
    2578:	98 e0       	ldi	r25, 0x08	; 8
    257a:	6a cf       	rjmp	.-300    	; 0x2450 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    257c:	0f 2e       	mov	r0, r31
    257e:	fd e1       	ldi	r31, 0x1D	; 29
    2580:	df 2e       	mov	r13, r31
    2582:	f0 2d       	mov	r31, r0
    2584:	7b cf       	rjmp	.-266    	; 0x247c <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    2586:	0f 2e       	mov	r0, r31
    2588:	f5 e2       	ldi	r31, 0x25	; 37
    258a:	df 2e       	mov	r13, r31
    258c:	f0 2d       	mov	r31, r0
    258e:	8b cf       	rjmp	.-234    	; 0x24a6 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    2590:	0f 90       	pop	r0
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	ff 90       	pop	r15
    259c:	ef 90       	pop	r14
    259e:	df 90       	pop	r13
    25a0:	08 95       	ret

000025a2 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    25a2:	80 3a       	cpi	r24, 0xA0	; 160
    25a4:	28 e0       	ldi	r18, 0x08	; 8
    25a6:	92 07       	cpc	r25, r18
    25a8:	21 f4       	brne	.+8      	; 0x25b2 <usart_spi_init+0x10>
    25aa:	60 e1       	ldi	r22, 0x10	; 16
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	11 c1       	rjmp	.+546    	; 0x27d2 <sysclk_enable_module>
    25b0:	08 95       	ret
    25b2:	80 3b       	cpi	r24, 0xB0	; 176
    25b4:	28 e0       	ldi	r18, 0x08	; 8
    25b6:	92 07       	cpc	r25, r18
    25b8:	21 f4       	brne	.+8      	; 0x25c2 <usart_spi_init+0x20>
    25ba:	60 e2       	ldi	r22, 0x20	; 32
    25bc:	83 e0       	ldi	r24, 0x03	; 3
    25be:	09 c1       	rjmp	.+530    	; 0x27d2 <sysclk_enable_module>
    25c0:	08 95       	ret
    25c2:	80 3a       	cpi	r24, 0xA0	; 160
    25c4:	29 e0       	ldi	r18, 0x09	; 9
    25c6:	92 07       	cpc	r25, r18
    25c8:	21 f4       	brne	.+8      	; 0x25d2 <usart_spi_init+0x30>
    25ca:	60 e1       	ldi	r22, 0x10	; 16
    25cc:	84 e0       	ldi	r24, 0x04	; 4
    25ce:	01 c1       	rjmp	.+514    	; 0x27d2 <sysclk_enable_module>
    25d0:	08 95       	ret
    25d2:	80 3b       	cpi	r24, 0xB0	; 176
    25d4:	29 e0       	ldi	r18, 0x09	; 9
    25d6:	92 07       	cpc	r25, r18
    25d8:	21 f4       	brne	.+8      	; 0x25e2 <usart_spi_init+0x40>
    25da:	60 e2       	ldi	r22, 0x20	; 32
    25dc:	84 e0       	ldi	r24, 0x04	; 4
    25de:	f9 c0       	rjmp	.+498    	; 0x27d2 <sysclk_enable_module>
    25e0:	08 95       	ret
    25e2:	80 3a       	cpi	r24, 0xA0	; 160
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	92 07       	cpc	r25, r18
    25e8:	21 f4       	brne	.+8      	; 0x25f2 <usart_spi_init+0x50>
    25ea:	60 e1       	ldi	r22, 0x10	; 16
    25ec:	85 e0       	ldi	r24, 0x05	; 5
    25ee:	f1 c0       	rjmp	.+482    	; 0x27d2 <sysclk_enable_module>
    25f0:	08 95       	ret
    25f2:	80 3a       	cpi	r24, 0xA0	; 160
    25f4:	9b 40       	sbci	r25, 0x0B	; 11
    25f6:	19 f4       	brne	.+6      	; 0x25fe <usart_spi_init+0x5c>
    25f8:	60 e1       	ldi	r22, 0x10	; 16
    25fa:	86 e0       	ldi	r24, 0x06	; 6
    25fc:	ea c0       	rjmp	.+468    	; 0x27d2 <sysclk_enable_module>
    25fe:	08 95       	ret

00002600 <usart_spi_setup_device>:
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	00 d0       	rcall	.+0      	; 0x260a <usart_spi_setup_device+0xa>
    260a:	00 d0       	rcall	.+0      	; 0x260c <usart_spi_setup_device+0xc>
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	09 83       	std	Y+1, r16	; 0x01
    2612:	1a 83       	std	Y+2, r17	; 0x02
    2614:	2b 83       	std	Y+3, r18	; 0x03
    2616:	3c 83       	std	Y+4, r19	; 0x04
    2618:	4d 83       	std	Y+5, r20	; 0x05
    261a:	1e 82       	std	Y+6, r1	; 0x06
    261c:	be 01       	movw	r22, r28
    261e:	6f 5f       	subi	r22, 0xFF	; 255
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	db dd       	rcall	.-1098   	; 0x21da <usart_init_spi>
    2624:	26 96       	adiw	r28, 0x06	; 6
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

00002634 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    2634:	fb 01       	movw	r30, r22
    2636:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2638:	e8 2f       	mov	r30, r24
    263a:	e6 95       	lsr	r30
    263c:	e6 95       	lsr	r30
    263e:	e6 95       	lsr	r30
    2640:	40 e2       	ldi	r20, 0x20	; 32
    2642:	e4 9f       	mul	r30, r20
    2644:	f0 01       	movw	r30, r0
    2646:	11 24       	eor	r1, r1
    2648:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    264a:	87 70       	andi	r24, 0x07	; 7
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	a9 01       	movw	r20, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <usart_spi_select_device+0x24>
    2654:	44 0f       	add	r20, r20
    2656:	55 1f       	adc	r21, r21
    2658:	8a 95       	dec	r24
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    265c:	46 83       	std	Z+6, r20	; 0x06
    265e:	08 95       	ret

00002660 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    2660:	fb 01       	movw	r30, r22
    2662:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2664:	e8 2f       	mov	r30, r24
    2666:	e6 95       	lsr	r30
    2668:	e6 95       	lsr	r30
    266a:	e6 95       	lsr	r30
    266c:	40 e2       	ldi	r20, 0x20	; 32
    266e:	e4 9f       	mul	r30, r20
    2670:	f0 01       	movw	r30, r0
    2672:	11 24       	eor	r1, r1
    2674:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2676:	87 70       	andi	r24, 0x07	; 7
    2678:	21 e0       	ldi	r18, 0x01	; 1
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	a9 01       	movw	r20, r18
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <usart_spi_deselect_device+0x24>
    2680:	44 0f       	add	r20, r20
    2682:	55 1f       	adc	r21, r21
    2684:	8a 95       	dec	r24
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2688:	45 83       	std	Z+5, r20	; 0x05
    268a:	08 95       	ret

0000268c <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    268c:	80 93 fd 22 	sts	0x22FD, r24	; 0x8022fd <fbpointer>
    2690:	90 93 fe 22 	sts	0x22FE, r25	; 0x8022fe <fbpointer+0x1>
    2694:	08 95       	ret

00002696 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    2696:	20 91 fd 22 	lds	r18, 0x22FD	; 0x8022fd <fbpointer>
    269a:	30 91 fe 22 	lds	r19, 0x22FE	; 0x8022fe <fbpointer+0x1>
    269e:	90 e8       	ldi	r25, 0x80	; 128
    26a0:	89 9f       	mul	r24, r25
    26a2:	20 0d       	add	r18, r0
    26a4:	31 1d       	adc	r19, r1
    26a6:	11 24       	eor	r1, r1
    26a8:	f9 01       	movw	r30, r18
    26aa:	e6 0f       	add	r30, r22
    26ac:	f1 1d       	adc	r31, r1
    26ae:	40 83       	st	Z, r20
    26b0:	08 95       	ret

000026b2 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    26b2:	20 91 fd 22 	lds	r18, 0x22FD	; 0x8022fd <fbpointer>
    26b6:	30 91 fe 22 	lds	r19, 0x22FE	; 0x8022fe <fbpointer+0x1>
    26ba:	90 e8       	ldi	r25, 0x80	; 128
    26bc:	89 9f       	mul	r24, r25
    26be:	20 0d       	add	r18, r0
    26c0:	31 1d       	adc	r19, r1
    26c2:	11 24       	eor	r1, r1
    26c4:	f9 01       	movw	r30, r18
    26c6:	e6 0f       	add	r30, r22
    26c8:	f1 1d       	adc	r31, r1
}
    26ca:	80 81       	ld	r24, Z
    26cc:	08 95       	ret

000026ce <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	e4 2f       	mov	r30, r20
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	e8 0f       	add	r30, r24
    26de:	f1 1d       	adc	r31, r1
    26e0:	e1 38       	cpi	r30, 0x81	; 129
    26e2:	f1 05       	cpc	r31, r1
    26e4:	1c f0       	brlt	.+6      	; 0x26ec <gfx_mono_generic_draw_horizontal_line+0x1e>
    26e6:	c0 e8       	ldi	r28, 0x80	; 128
    26e8:	4c 2f       	mov	r20, r28
    26ea:	48 1b       	sub	r20, r24
    26ec:	44 23       	and	r20, r20
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <gfx_mono_generic_draw_horizontal_line+0x24>
    26f0:	50 c0       	rjmp	.+160    	; 0x2792 <gfx_mono_generic_draw_horizontal_line+0xc4>
    26f2:	d6 2f       	mov	r29, r22
    26f4:	d6 95       	lsr	r29
    26f6:	d6 95       	lsr	r29
    26f8:	d6 95       	lsr	r29
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	98 e0       	ldi	r25, 0x08	; 8
    26fe:	d9 9f       	mul	r29, r25
    2700:	60 19       	sub	r22, r0
    2702:	71 09       	sbc	r23, r1
    2704:	11 24       	eor	r1, r1
    2706:	e1 e0       	ldi	r30, 0x01	; 1
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	df 01       	movw	r26, r30
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <gfx_mono_generic_draw_horizontal_line+0x44>
    270e:	aa 0f       	add	r26, r26
    2710:	bb 1f       	adc	r27, r27
    2712:	6a 95       	dec	r22
    2714:	e2 f7       	brpl	.-8      	; 0x270e <gfx_mono_generic_draw_horizontal_line+0x40>
    2716:	fa 2e       	mov	r15, r26
    2718:	21 30       	cpi	r18, 0x01	; 1
    271a:	21 f0       	breq	.+8      	; 0x2724 <gfx_mono_generic_draw_horizontal_line+0x56>
    271c:	a8 f0       	brcs	.+42     	; 0x2748 <gfx_mono_generic_draw_horizontal_line+0x7a>
    271e:	22 30       	cpi	r18, 0x02	; 2
    2720:	39 f1       	breq	.+78     	; 0x2770 <gfx_mono_generic_draw_horizontal_line+0xa2>
    2722:	37 c0       	rjmp	.+110    	; 0x2792 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2724:	c4 2f       	mov	r28, r20
    2726:	1f ef       	ldi	r17, 0xFF	; 255
    2728:	18 0f       	add	r17, r24
    272a:	01 2f       	mov	r16, r17
    272c:	0c 0f       	add	r16, r28
    272e:	60 2f       	mov	r22, r16
    2730:	8d 2f       	mov	r24, r29
    2732:	0e 94 86 05 	call	0xb0c	; 0xb0c <gfx_mono_st7565r_get_byte>
    2736:	4f 2d       	mov	r20, r15
    2738:	48 2b       	or	r20, r24
    273a:	60 2f       	mov	r22, r16
    273c:	8d 2f       	mov	r24, r29
    273e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <gfx_mono_st7565r_put_byte>
    2742:	c1 50       	subi	r28, 0x01	; 1
    2744:	91 f7       	brne	.-28     	; 0x272a <gfx_mono_generic_draw_horizontal_line+0x5c>
    2746:	25 c0       	rjmp	.+74     	; 0x2792 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2748:	c4 2f       	mov	r28, r20
    274a:	1f ef       	ldi	r17, 0xFF	; 255
    274c:	18 0f       	add	r17, r24
    274e:	fa 2e       	mov	r15, r26
    2750:	f0 94       	com	r15
    2752:	01 2f       	mov	r16, r17
    2754:	0c 0f       	add	r16, r28
    2756:	60 2f       	mov	r22, r16
    2758:	8d 2f       	mov	r24, r29
    275a:	0e 94 86 05 	call	0xb0c	; 0xb0c <gfx_mono_st7565r_get_byte>
    275e:	4f 2d       	mov	r20, r15
    2760:	48 23       	and	r20, r24
    2762:	60 2f       	mov	r22, r16
    2764:	8d 2f       	mov	r24, r29
    2766:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <gfx_mono_st7565r_put_byte>
    276a:	c1 50       	subi	r28, 0x01	; 1
    276c:	91 f7       	brne	.-28     	; 0x2752 <gfx_mono_generic_draw_horizontal_line+0x84>
    276e:	11 c0       	rjmp	.+34     	; 0x2792 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2770:	c4 2f       	mov	r28, r20
    2772:	1f ef       	ldi	r17, 0xFF	; 255
    2774:	18 0f       	add	r17, r24
    2776:	01 2f       	mov	r16, r17
    2778:	0c 0f       	add	r16, r28
    277a:	60 2f       	mov	r22, r16
    277c:	8d 2f       	mov	r24, r29
    277e:	0e 94 86 05 	call	0xb0c	; 0xb0c <gfx_mono_st7565r_get_byte>
    2782:	4f 2d       	mov	r20, r15
    2784:	48 27       	eor	r20, r24
    2786:	60 2f       	mov	r22, r16
    2788:	8d 2f       	mov	r24, r29
    278a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <gfx_mono_st7565r_put_byte>
    278e:	c1 50       	subi	r28, 0x01	; 1
    2790:	91 f7       	brne	.-28     	; 0x2776 <gfx_mono_generic_draw_horizontal_line+0xa8>
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	08 95       	ret

0000279e <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    279e:	ff 92       	push	r15
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
	if (height == 0) {
    27a8:	22 23       	and	r18, r18
    27aa:	69 f0       	breq	.+26     	; 0x27c6 <gfx_mono_generic_draw_filled_rect+0x28>
    27ac:	f4 2e       	mov	r15, r20
    27ae:	18 2f       	mov	r17, r24
    27b0:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    27b2:	df ef       	ldi	r29, 0xFF	; 255
    27b4:	d6 0f       	add	r29, r22
    27b6:	6d 2f       	mov	r22, r29
    27b8:	6c 0f       	add	r22, r28
    27ba:	20 2f       	mov	r18, r16
    27bc:	4f 2d       	mov	r20, r15
    27be:	81 2f       	mov	r24, r17
    27c0:	86 df       	rcall	.-244    	; 0x26ce <gfx_mono_generic_draw_horizontal_line>
    27c2:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    27c4:	c1 f7       	brne	.-16     	; 0x27b6 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	08 95       	ret

000027d2 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	1f 92       	push	r1
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    27dc:	9f b7       	in	r25, 0x3f	; 63
    27de:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    27e0:	f8 94       	cli
	return flags;
    27e2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    27e4:	e8 2f       	mov	r30, r24
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	e0 59       	subi	r30, 0x90	; 144
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	60 95       	com	r22
    27ee:	80 81       	ld	r24, Z
    27f0:	68 23       	and	r22, r24
    27f2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    27f4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    27f6:	0f 90       	pop	r0
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	08 95       	ret

000027fe <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    27fe:	af 92       	push	r10
    2800:	bf 92       	push	r11
    2802:	cf 92       	push	r12
    2804:	df 92       	push	r13
    2806:	ef 92       	push	r14
    2808:	ff 92       	push	r15
    280a:	0f 93       	push	r16
    280c:	1f 93       	push	r17
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	c8 2f       	mov	r28, r24
    2814:	e6 2e       	mov	r14, r22
    2816:	b4 2e       	mov	r11, r20
    2818:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    281a:	00 e0       	ldi	r16, 0x00	; 0
    281c:	f9 01       	movw	r30, r18
    281e:	24 81       	ldd	r18, Z+4	; 0x04
    2820:	43 81       	ldd	r20, Z+3	; 0x03
    2822:	6b 2d       	mov	r22, r11
    2824:	8e 2d       	mov	r24, r14
    2826:	bb df       	rcall	.-138    	; 0x279e <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    2828:	f6 01       	movw	r30, r12
    282a:	80 81       	ld	r24, Z
    282c:	81 11       	cpse	r24, r1
    282e:	3a c0       	rjmp	.+116    	; 0x28a4 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    2830:	83 81       	ldd	r24, Z+3	; 0x03
    2832:	28 2f       	mov	r18, r24
    2834:	26 95       	lsr	r18
    2836:	26 95       	lsr	r18
    2838:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    283a:	87 70       	andi	r24, 0x07	; 7
    283c:	09 f0       	breq	.+2      	; 0x2840 <gfx_mono_draw_char+0x42>
		char_row_size++;
    283e:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    2840:	f6 01       	movw	r30, r12
    2842:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    2844:	8c 2f       	mov	r24, r28
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	35 81       	ldd	r19, Z+5	; 0x05
    284a:	83 1b       	sub	r24, r19
    284c:	91 09       	sbc	r25, r1
    284e:	2a 9d       	mul	r18, r10
    2850:	90 01       	movw	r18, r0
    2852:	11 24       	eor	r1, r1
    2854:	82 9f       	mul	r24, r18
    2856:	a0 01       	movw	r20, r0
    2858:	83 9f       	mul	r24, r19
    285a:	50 0d       	add	r21, r0
    285c:	92 9f       	mul	r25, r18
    285e:	50 0d       	add	r21, r0
    2860:	11 24       	eor	r1, r1
    2862:	01 81       	ldd	r16, Z+1	; 0x01
    2864:	12 81       	ldd	r17, Z+2	; 0x02
    2866:	04 0f       	add	r16, r20
    2868:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    286a:	f6 01       	movw	r30, r12
    286c:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    286e:	ff 20       	and	r15, r15
    2870:	a9 f0       	breq	.+42     	; 0x289c <gfx_mono_draw_char+0x9e>
    2872:	d0 e0       	ldi	r29, 0x00	; 0
    2874:	c0 e0       	ldi	r28, 0x00	; 0
    2876:	8e 2d       	mov	r24, r14
    2878:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    287a:	9c 2f       	mov	r25, r28
    287c:	97 70       	andi	r25, 0x07	; 7
    287e:	21 f4       	brne	.+8      	; 0x2888 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    2880:	f8 01       	movw	r30, r16
    2882:	d4 91       	lpm	r29, Z
				glyph_data++;
    2884:	0f 5f       	subi	r16, 0xFF	; 255
    2886:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    2888:	dd 23       	and	r29, r29
    288a:	24 f4       	brge	.+8      	; 0x2894 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	6b 2d       	mov	r22, r11
    2890:	0e 94 4f 05 	call	0xa9e	; 0xa9e <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2894:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2896:	cf 5f       	subi	r28, 0xFF	; 255
    2898:	fc 12       	cpse	r15, r28
    289a:	ed cf       	rjmp	.-38     	; 0x2876 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    289c:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    289e:	aa 94       	dec	r10
	} while (rows_left > 0);
    28a0:	a1 10       	cpse	r10, r1
    28a2:	e3 cf       	rjmp	.-58     	; 0x286a <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	bf 90       	pop	r11
    28b6:	af 90       	pop	r10
    28b8:	08 95       	ret

000028ba <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    28ba:	df 92       	push	r13
    28bc:	ef 92       	push	r14
    28be:	ff 92       	push	r15
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	d6 2e       	mov	r13, r22
    28ca:	04 2f       	mov	r16, r20
    28cc:	79 01       	movw	r14, r18
    28ce:	ec 01       	movw	r28, r24
    28d0:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    28d2:	89 91       	ld	r24, Y+
    28d4:	8a 30       	cpi	r24, 0x0A	; 10
    28d6:	31 f4       	brne	.+12     	; 0x28e4 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    28d8:	f7 01       	movw	r30, r14
    28da:	84 81       	ldd	r24, Z+4	; 0x04
    28dc:	8f 5f       	subi	r24, 0xFF	; 255
    28de:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    28e0:	1d 2d       	mov	r17, r13
    28e2:	09 c0       	rjmp	.+18     	; 0x28f6 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    28e4:	8d 30       	cpi	r24, 0x0D	; 13
    28e6:	39 f0       	breq	.+14     	; 0x28f6 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    28e8:	97 01       	movw	r18, r14
    28ea:	40 2f       	mov	r20, r16
    28ec:	61 2f       	mov	r22, r17
    28ee:	87 df       	rcall	.-242    	; 0x27fe <gfx_mono_draw_char>
			x += font->width;
    28f0:	f7 01       	movw	r30, r14
    28f2:	83 81       	ldd	r24, Z+3	; 0x03
    28f4:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    28f6:	88 81       	ld	r24, Y
    28f8:	81 11       	cpse	r24, r1
    28fa:	eb cf       	rjmp	.-42     	; 0x28d2 <gfx_mono_draw_string+0x18>
}
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	df 90       	pop	r13
    290a:	08 95       	ret

0000290c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2916:	c6 2f       	mov	r28, r22
    2918:	d0 e0       	ldi	r29, 0x00	; 0
    291a:	de 01       	movw	r26, r28
    291c:	02 2e       	mov	r0, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <ioport_configure_port_pin+0x18>
    2920:	b5 95       	asr	r27
    2922:	a7 95       	ror	r26
    2924:	0a 94       	dec	r0
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <ioport_configure_port_pin+0x14>
    2928:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    292a:	50 8b       	std	Z+16, r21	; 0x10
    292c:	2f 5f       	subi	r18, 0xFF	; 255
    292e:	3f 4f       	sbci	r19, 0xFF	; 255
    2930:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2932:	28 30       	cpi	r18, 0x08	; 8
    2934:	31 05       	cpc	r19, r1
    2936:	89 f7       	brne	.-30     	; 0x291a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2938:	40 ff       	sbrs	r20, 0
    293a:	0a c0       	rjmp	.+20     	; 0x2950 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    293c:	41 ff       	sbrs	r20, 1
    293e:	03 c0       	rjmp	.+6      	; 0x2946 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2940:	fc 01       	movw	r30, r24
    2942:	65 83       	std	Z+5, r22	; 0x05
    2944:	02 c0       	rjmp	.+4      	; 0x294a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2946:	fc 01       	movw	r30, r24
    2948:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    294a:	fc 01       	movw	r30, r24
    294c:	61 83       	std	Z+1, r22	; 0x01
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2950:	fc 01       	movw	r30, r24
    2952:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	08 95       	ret

0000295a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    295a:	43 e0       	ldi	r20, 0x03	; 3
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	80 ee       	ldi	r24, 0xE0	; 224
    2962:	97 e0       	ldi	r25, 0x07	; 7
    2964:	d3 df       	rcall	.-90     	; 0x290c <ioport_configure_port_pin>
    2966:	43 e0       	ldi	r20, 0x03	; 3
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	62 e0       	ldi	r22, 0x02	; 2
    296c:	80 ee       	ldi	r24, 0xE0	; 224
    296e:	97 e0       	ldi	r25, 0x07	; 7
    2970:	cd df       	rcall	.-102    	; 0x290c <ioport_configure_port_pin>
    2972:	43 e0       	ldi	r20, 0x03	; 3
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	60 e1       	ldi	r22, 0x10	; 16
    2978:	80 e6       	ldi	r24, 0x60	; 96
    297a:	96 e0       	ldi	r25, 0x06	; 6
    297c:	c7 df       	rcall	.-114    	; 0x290c <ioport_configure_port_pin>
    297e:	41 e0       	ldi	r20, 0x01	; 1
    2980:	50 e4       	ldi	r21, 0x40	; 64
    2982:	60 e2       	ldi	r22, 0x20	; 32
    2984:	80 e6       	ldi	r24, 0x60	; 96
    2986:	96 e0       	ldi	r25, 0x06	; 6
    2988:	c1 df       	rcall	.-126    	; 0x290c <ioport_configure_port_pin>
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	5b e1       	ldi	r21, 0x1B	; 27
    298e:	60 e2       	ldi	r22, 0x20	; 32
    2990:	80 e8       	ldi	r24, 0x80	; 128
    2992:	96 e0       	ldi	r25, 0x06	; 6
    2994:	bb df       	rcall	.-138    	; 0x290c <ioport_configure_port_pin>
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	5b e1       	ldi	r21, 0x1B	; 27
    299a:	62 e0       	ldi	r22, 0x02	; 2
    299c:	80 ea       	ldi	r24, 0xA0	; 160
    299e:	96 e0       	ldi	r25, 0x06	; 6
    29a0:	b5 df       	rcall	.-150    	; 0x290c <ioport_configure_port_pin>
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	5b e1       	ldi	r21, 0x1B	; 27
    29a6:	64 e0       	ldi	r22, 0x04	; 4
    29a8:	80 ea       	ldi	r24, 0xA0	; 160
    29aa:	96 e0       	ldi	r25, 0x06	; 6
    29ac:	af df       	rcall	.-162    	; 0x290c <ioport_configure_port_pin>
    29ae:	43 e0       	ldi	r20, 0x03	; 3
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	62 e0       	ldi	r22, 0x02	; 2
    29b4:	80 e6       	ldi	r24, 0x60	; 96
    29b6:	96 e0       	ldi	r25, 0x06	; 6
    29b8:	a9 df       	rcall	.-174    	; 0x290c <ioport_configure_port_pin>
    29ba:	43 e0       	ldi	r20, 0x03	; 3
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	68 e0       	ldi	r22, 0x08	; 8
    29c0:	80 e6       	ldi	r24, 0x60	; 96
    29c2:	96 e0       	ldi	r25, 0x06	; 6
    29c4:	a3 df       	rcall	.-186    	; 0x290c <ioport_configure_port_pin>
    29c6:	43 e0       	ldi	r20, 0x03	; 3
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	68 e0       	ldi	r22, 0x08	; 8
    29cc:	80 ea       	ldi	r24, 0xA0	; 160
    29ce:	96 e0       	ldi	r25, 0x06	; 6
    29d0:	9d df       	rcall	.-198    	; 0x290c <ioport_configure_port_pin>
    29d2:	43 e0       	ldi	r20, 0x03	; 3
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	80 e6       	ldi	r24, 0x60	; 96
    29da:	96 e0       	ldi	r25, 0x06	; 6
    29dc:	97 df       	rcall	.-210    	; 0x290c <ioport_configure_port_pin>
    29de:	43 e0       	ldi	r20, 0x03	; 3
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	68 e0       	ldi	r22, 0x08	; 8
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	96 e0       	ldi	r25, 0x06	; 6
    29e8:	91 df       	rcall	.-222    	; 0x290c <ioport_configure_port_pin>
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	60 e1       	ldi	r22, 0x10	; 16
    29f0:	80 e8       	ldi	r24, 0x80	; 128
    29f2:	96 e0       	ldi	r25, 0x06	; 6
    29f4:	8b df       	rcall	.-234    	; 0x290c <ioport_configure_port_pin>
    29f6:	43 e0       	ldi	r20, 0x03	; 3
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	62 e0       	ldi	r22, 0x02	; 2
    29fc:	80 e6       	ldi	r24, 0x60	; 96
    29fe:	96 e0       	ldi	r25, 0x06	; 6
    2a00:	85 df       	rcall	.-246    	; 0x290c <ioport_configure_port_pin>
    2a02:	43 e0       	ldi	r20, 0x03	; 3
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	68 e0       	ldi	r22, 0x08	; 8
    2a08:	80 e6       	ldi	r24, 0x60	; 96
    2a0a:	96 e0       	ldi	r25, 0x06	; 6
    2a0c:	7f df       	rcall	.-258    	; 0x290c <ioport_configure_port_pin>
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	64 e0       	ldi	r22, 0x04	; 4
    2a14:	80 e6       	ldi	r24, 0x60	; 96
    2a16:	96 e0       	ldi	r25, 0x06	; 6
    2a18:	79 df       	rcall	.-270    	; 0x290c <ioport_configure_port_pin>
    2a1a:	43 e0       	ldi	r20, 0x03	; 3
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	60 e1       	ldi	r22, 0x10	; 16
    2a20:	80 ea       	ldi	r24, 0xA0	; 160
    2a22:	96 e0       	ldi	r25, 0x06	; 6
    2a24:	73 df       	rcall	.-282    	; 0x290c <ioport_configure_port_pin>
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	96 e0       	ldi	r25, 0x06	; 6
    2a30:	6d df       	rcall	.-294    	; 0x290c <ioport_configure_port_pin>
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	64 e0       	ldi	r22, 0x04	; 4
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	96 e0       	ldi	r25, 0x06	; 6
    2a3c:	67 df       	rcall	.-306    	; 0x290c <ioport_configure_port_pin>
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	62 e0       	ldi	r22, 0x02	; 2
    2a44:	80 e2       	ldi	r24, 0x20	; 32
    2a46:	96 e0       	ldi	r25, 0x06	; 6
    2a48:	61 df       	rcall	.-318    	; 0x290c <ioport_configure_port_pin>
    2a4a:	43 e0       	ldi	r20, 0x03	; 3
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	68 e0       	ldi	r22, 0x08	; 8
    2a50:	80 e4       	ldi	r24, 0x40	; 64
    2a52:	96 e0       	ldi	r25, 0x06	; 6
    2a54:	5b df       	rcall	.-330    	; 0x290c <ioport_configure_port_pin>
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	64 e0       	ldi	r22, 0x04	; 4
    2a5c:	80 e4       	ldi	r24, 0x40	; 64
    2a5e:	96 e0       	ldi	r25, 0x06	; 6
    2a60:	55 df       	rcall	.-342    	; 0x290c <ioport_configure_port_pin>
    2a62:	43 e0       	ldi	r20, 0x03	; 3
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	68 e0       	ldi	r22, 0x08	; 8
    2a68:	80 e6       	ldi	r24, 0x60	; 96
    2a6a:	96 e0       	ldi	r25, 0x06	; 6
    2a6c:	4f df       	rcall	.-354    	; 0x290c <ioport_configure_port_pin>
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	64 e0       	ldi	r22, 0x04	; 4
    2a74:	80 e6       	ldi	r24, 0x60	; 96
    2a76:	96 e0       	ldi	r25, 0x06	; 6
    2a78:	49 df       	rcall	.-366    	; 0x290c <ioport_configure_port_pin>
    2a7a:	43 e0       	ldi	r20, 0x03	; 3
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	68 e0       	ldi	r22, 0x08	; 8
    2a80:	80 e8       	ldi	r24, 0x80	; 128
    2a82:	96 e0       	ldi	r25, 0x06	; 6
    2a84:	43 df       	rcall	.-378    	; 0x290c <ioport_configure_port_pin>
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	50 e0       	ldi	r21, 0x00	; 0
    2a8a:	64 e0       	ldi	r22, 0x04	; 4
    2a8c:	80 e8       	ldi	r24, 0x80	; 128
    2a8e:	96 e0       	ldi	r25, 0x06	; 6
    2a90:	3d cf       	rjmp	.-390    	; 0x290c <ioport_configure_port_pin>
    2a92:	08 95       	ret

00002a94 <vCounter>:
		
		vTaskDelay(10/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vCounter, r_) {
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	c0 58       	subi	r28, 0x80	; 128
    2a9e:	d1 09       	sbc	r29, r1
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	de bf       	out	0x3e, r29	; 62
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
			counter++;
			snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
    2aa4:	0f 2e       	mov	r0, r31
    2aa6:	fb e1       	ldi	r31, 0x1B	; 27
    2aa8:	ef 2e       	mov	r14, r31
    2aaa:	f0 e2       	ldi	r31, 0x20	; 32
    2aac:	ff 2e       	mov	r15, r31
    2aae:	f0 2d       	mov	r31, r0
    2ab0:	68 94       	set
    2ab2:	bb 24       	eor	r11, r11
    2ab4:	b7 f8       	bld	r11, 7
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	0f 5f       	subi	r16, 0xFF	; 255
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2abc:	0f 2e       	mov	r0, r31
    2abe:	f0 e4       	ldi	r31, 0x40	; 64
    2ac0:	cf 2e       	mov	r12, r31
    2ac2:	f6 e0       	ldi	r31, 0x06	; 6
    2ac4:	df 2e       	mov	r13, r31
    2ac6:	f0 2d       	mov	r31, r0
    2ac8:	aa 24       	eor	r10, r10
    2aca:	a3 94       	inc	r10
static portTASK_FUNCTION(vCounter, r_) {
	char strbuf[128];
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2acc:	6a e0       	ldi	r22, 0x0A	; 10
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <xSemaphore>
    2ad4:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <xSemaphore+0x1>
    2ad8:	0e 94 01 0a 	call	0x1402	; 0x1402 <xQueueSemaphoreTake>
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	71 f5       	brne	.+92     	; 0x2b3c <vCounter+0xa8>
			counter++;
    2ae0:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <counter>
    2ae4:	90 91 02 23 	lds	r25, 0x2302	; 0x802302 <counter+0x1>
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	80 93 01 23 	sts	0x2301, r24	; 0x802301 <counter>
    2aee:	90 93 02 23 	sts	0x2302, r25	; 0x802302 <counter+0x1>
			snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
    2af2:	9f 93       	push	r25
    2af4:	8f 93       	push	r24
    2af6:	ff 92       	push	r15
    2af8:	ef 92       	push	r14
    2afa:	1f 92       	push	r1
    2afc:	bf 92       	push	r11
    2afe:	1f 93       	push	r17
    2b00:	0f 93       	push	r16
    2b02:	b5 d2       	rcall	.+1386   	; 0x306e <snprintf>
			gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2b04:	27 e0       	ldi	r18, 0x07	; 7
    2b06:	30 e2       	ldi	r19, 0x20	; 32
    2b08:	48 e0       	ldi	r20, 0x08	; 8
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	c8 01       	movw	r24, r16
    2b0e:	d5 de       	rcall	.-598    	; 0x28ba <gfx_mono_draw_string>
SemaphoreHandle_t xSemaphore;
uint16_t counter = 0;
int flagText = 0;

static void buzzerEvenOdd() {
	if (counter % 2 == 0) {
    2b10:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <counter>
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	80 fd       	sbrc	r24, 0
    2b1a:	03 c0       	rjmp	.+6      	; 0x2b22 <vCounter+0x8e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2b1c:	f6 01       	movw	r30, r12
    2b1e:	a5 82       	std	Z+5, r10	; 0x05
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <vCounter+0x92>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b22:	f6 01       	movw	r30, r12
    2b24:	a6 82       	std	Z+6, r10	; 0x06
			snprintf(strbuf, sizeof(strbuf), "Counter : %d ", counter);
			gfx_mono_draw_string(strbuf,0, 8, &sysfont);
			
			buzzerEvenOdd();
			
			xSemaphoreGive(xSemaphore);
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <xSemaphore>
    2b34:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <xSemaphore+0x1>
    2b38:	0e 94 b6 08 	call	0x116c	; 0x116c <xQueueGenericSend>
		}
		
		vTaskDelay(100/portTICK_PERIOD_MS);
    2b3c:	82 e3       	ldi	r24, 0x32	; 50
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vTaskDelay>
	}
    2b44:	c3 cf       	rjmp	.-122    	; 0x2acc <vCounter+0x38>

00002b46 <vPushButton1>:
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
		vTaskDelay(200/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vPushButton1, s_) {
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	c0 58       	subi	r28, 0x80	; 128
    2b50:	d1 09       	sbc	r29, r1
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	de bf       	out	0x3e, r29	; 62

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2b56:	00 ea       	ldi	r16, 0xA0	; 160
    2b58:	16 e0       	ldi	r17, 0x06	; 6
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	80 85       	ldd	r24, Z+8	; 0x08
	char strbuf[128];
	
	while(1) {
		
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1)==0){
    2b5e:	81 fd       	sbrc	r24, 1
    2b60:	3b c0       	rjmp	.+118    	; 0x2bd8 <vPushButton1+0x92>
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2b62:	6a e0       	ldi	r22, 0x0A	; 10
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <xSemaphore>
    2b6a:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <xSemaphore+0x1>
    2b6e:	0e 94 01 0a 	call	0x1402	; 0x1402 <xQueueSemaphoreTake>
    2b72:	81 30       	cpi	r24, 0x01	; 1
    2b74:	89 f5       	brne	.+98     	; 0x2bd8 <vPushButton1+0x92>
				flagText = (flagText==0)? 1:0;
    2b76:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <flagText>
    2b7a:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <flagText+0x1>
    2b7e:	21 e0       	ldi	r18, 0x01	; 1
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	11 f0       	breq	.+4      	; 0x2b8a <vPushButton1+0x44>
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	20 93 ff 22 	sts	0x22FF, r18	; 0x8022ff <flagText>
    2b8e:	30 93 00 23 	sts	0x2300, r19	; 0x802300 <flagText+0x1>
				if(flagText==0) {
    2b92:	89 2b       	or	r24, r25
    2b94:	41 f0       	breq	.+16     	; 0x2ba6 <vPushButton1+0x60>
					gfx_mono_draw_string("Praktikum 5 RTOS  ", 0, 0, &sysfont);
    2b96:	27 e0       	ldi	r18, 0x07	; 7
    2b98:	30 e2       	ldi	r19, 0x20	; 32
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	89 e2       	ldi	r24, 0x29	; 41
    2ba0:	90 e2       	ldi	r25, 0x20	; 32
    2ba2:	8b de       	rcall	.-746    	; 0x28ba <gfx_mono_draw_string>
    2ba4:	07 c0       	rjmp	.+14     	; 0x2bb4 <vPushButton1+0x6e>
				} else {
					gfx_mono_draw_string("Samuel 1906285592 ", 0, 0, &sysfont);
    2ba6:	27 e0       	ldi	r18, 0x07	; 7
    2ba8:	30 e2       	ldi	r19, 0x20	; 32
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	8c e3       	ldi	r24, 0x3C	; 60
    2bb0:	90 e2       	ldi	r25, 0x20	; 32
    2bb2:	83 de       	rcall	.-762    	; 0x28ba <gfx_mono_draw_string>
				}
				gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2bb4:	27 e0       	ldi	r18, 0x07	; 7
    2bb6:	30 e2       	ldi	r19, 0x20	; 32
    2bb8:	48 e0       	ldi	r20, 0x08	; 8
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	7c de       	rcall	.-776    	; 0x28ba <gfx_mono_draw_string>
				xSemaphoreGive(xSemaphore);
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <xSemaphore>
    2bd0:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <xSemaphore+0x1>
    2bd4:	0e 94 b6 08 	call	0x116c	; 0x116c <xQueueGenericSend>
			}
		}
		
		vTaskDelay(10/portTICK_PERIOD_MS);
    2bd8:	85 e0       	ldi	r24, 0x05	; 5
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vTaskDelay>
	}
    2be0:	bc cf       	rjmp	.-136    	; 0x2b5a <vPushButton1+0x14>

00002be2 <vBlinkLed1>:
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
		vTaskDelay(100/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vBlinkLed1, q_) {
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	c0 58       	subi	r28, 0x80	; 128
    2bec:	d1 09       	sbc	r29, r1
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	de bf       	out	0x3e, r29	; 62
	char strbuf[128];
	int flagLed1 = 0;
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2bf6:	0f 2e       	mov	r0, r31
    2bf8:	f0 ee       	ldi	r31, 0xE0	; 224
    2bfa:	af 2e       	mov	r10, r31
    2bfc:	f7 e0       	ldi	r31, 0x07	; 7
    2bfe:	bf 2e       	mov	r11, r31
    2c00:	f0 2d       	mov	r31, r0
    2c02:	68 94       	set
    2c04:	88 24       	eor	r8, r8
    2c06:	81 f8       	bld	r8, 1
	
	while(1) {
		flagLed1 = !flagLed1;
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d ", !flagLed1);
    2c08:	0f 2e       	mov	r0, r31
    2c0a:	ff e4       	ldi	r31, 0x4F	; 79
    2c0c:	cf 2e       	mov	r12, r31
    2c0e:	f0 e2       	ldi	r31, 0x20	; 32
    2c10:	df 2e       	mov	r13, r31
    2c12:	f0 2d       	mov	r31, r0
    2c14:	68 94       	set
    2c16:	99 24       	eor	r9, r9
    2c18:	97 f8       	bld	r9, 7
    2c1a:	9e 01       	movw	r18, r28
    2c1c:	2f 5f       	subi	r18, 0xFF	; 255
    2c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c20:	79 01       	movw	r14, r18
static portTASK_FUNCTION(vBlinkLed1, q_) {
	char strbuf[128];
	int flagLed1 = 0;
	
	while(1) {
		flagLed1 = !flagLed1;
    2c22:	01 e0       	ldi	r16, 0x01	; 1
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	09 f0       	breq	.+2      	; 0x2c2a <vBlinkLed1+0x48>
    2c28:	00 e0       	ldi	r16, 0x00	; 0
    2c2a:	10 e0       	ldi	r17, 0x00	; 0
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	19 f4       	brne	.+6      	; 0x2c36 <vBlinkLed1+0x54>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2c30:	f5 01       	movw	r30, r10
    2c32:	85 82       	std	Z+5, r8	; 0x05
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <vBlinkLed1+0x58>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2c36:	f5 01       	movw	r30, r10
    2c38:	86 82       	std	Z+6, r8	; 0x06
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d ", !flagLed1);
    2c3a:	21 e0       	ldi	r18, 0x01	; 1
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	89 2b       	or	r24, r25
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <vBlinkLed1+0x62>
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	3f 93       	push	r19
    2c46:	2f 93       	push	r18
    2c48:	df 92       	push	r13
    2c4a:	cf 92       	push	r12
    2c4c:	1f 92       	push	r1
    2c4e:	9f 92       	push	r9
    2c50:	ff 92       	push	r15
    2c52:	ef 92       	push	r14
    2c54:	0c d2       	rcall	.+1048   	; 0x306e <snprintf>
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
    2c56:	27 e0       	ldi	r18, 0x07	; 7
    2c58:	30 e2       	ldi	r19, 0x20	; 32
    2c5a:	48 e1       	ldi	r20, 0x18	; 24
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	c7 01       	movw	r24, r14
    2c60:	2c de       	rcall	.-936    	; 0x28ba <gfx_mono_draw_string>
		vTaskDelay(200/portTICK_PERIOD_MS);
    2c62:	84 e6       	ldi	r24, 0x64	; 100
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vTaskDelay>
	}
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	de bf       	out	0x3e, r29	; 62
static portTASK_FUNCTION(vBlinkLed1, q_) {
	char strbuf[128];
	int flagLed1 = 0;
	
	while(1) {
		flagLed1 = !flagLed1;
    2c6e:	c8 01       	movw	r24, r16
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		snprintf(strbuf, sizeof(strbuf), "LED 1 : %d ", !flagLed1);
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
		vTaskDelay(200/portTICK_PERIOD_MS);
	}
    2c70:	d8 cf       	rjmp	.-80     	; 0x2c22 <vBlinkLed1+0x40>

00002c72 <vBlinkLed0>:
	/* Start the task */
	
	vTaskStartScheduler();
}

static portTASK_FUNCTION(vBlinkLed0, p_) {
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	c0 58       	subi	r28, 0x80	; 128
    2c7c:	d1 09       	sbc	r29, r1
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	de bf       	out	0x3e, r29	; 62
	char strbuf[128];
	int flagLed0 = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0f 2e       	mov	r0, r31
    2c88:	f0 ee       	ldi	r31, 0xE0	; 224
    2c8a:	af 2e       	mov	r10, r31
    2c8c:	f7 e0       	ldi	r31, 0x07	; 7
    2c8e:	bf 2e       	mov	r11, r31
    2c90:	f0 2d       	mov	r31, r0
	
	while(1) {
		flagLed0 = !flagLed0;
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d ", !flagLed0);
    2c92:	0f 2e       	mov	r0, r31
    2c94:	fb e5       	ldi	r31, 0x5B	; 91
    2c96:	cf 2e       	mov	r12, r31
    2c98:	f0 e2       	ldi	r31, 0x20	; 32
    2c9a:	df 2e       	mov	r13, r31
    2c9c:	f0 2d       	mov	r31, r0
    2c9e:	68 94       	set
    2ca0:	99 24       	eor	r9, r9
    2ca2:	97 f8       	bld	r9, 7
    2ca4:	9e 01       	movw	r18, r28
    2ca6:	2f 5f       	subi	r18, 0xFF	; 255
    2ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    2caa:	79 01       	movw	r14, r18
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2cac:	01 e0       	ldi	r16, 0x01	; 1
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <vBlinkLed0+0x42>
    2cb2:	00 e0       	ldi	r16, 0x00	; 0
    2cb4:	10 e0       	ldi	r17, 0x00	; 0
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	21 f4       	brne	.+8      	; 0x2cc2 <vBlinkLed0+0x50>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2cba:	21 e0       	ldi	r18, 0x01	; 1
    2cbc:	f5 01       	movw	r30, r10
    2cbe:	25 83       	std	Z+5, r18	; 0x05
    2cc0:	03 c0       	rjmp	.+6      	; 0x2cc8 <vBlinkLed0+0x56>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2cc2:	21 e0       	ldi	r18, 0x01	; 1
    2cc4:	f5 01       	movw	r30, r10
    2cc6:	26 83       	std	Z+6, r18	; 0x06
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d ", !flagLed0);
    2cc8:	21 e0       	ldi	r18, 0x01	; 1
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	89 2b       	or	r24, r25
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <vBlinkLed0+0x60>
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	3f 93       	push	r19
    2cd4:	2f 93       	push	r18
    2cd6:	df 92       	push	r13
    2cd8:	cf 92       	push	r12
    2cda:	1f 92       	push	r1
    2cdc:	9f 92       	push	r9
    2cde:	ff 92       	push	r15
    2ce0:	ef 92       	push	r14
    2ce2:	c5 d1       	rcall	.+906    	; 0x306e <snprintf>
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    2ce4:	27 e0       	ldi	r18, 0x07	; 7
    2ce6:	30 e2       	ldi	r19, 0x20	; 32
    2ce8:	40 e1       	ldi	r20, 0x10	; 16
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	c7 01       	movw	r24, r14
    2cee:	e5 dd       	rcall	.-1078   	; 0x28ba <gfx_mono_draw_string>
		vTaskDelay(100/portTICK_PERIOD_MS);
    2cf0:	82 e3       	ldi	r24, 0x32	; 50
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vTaskDelay>
	}
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	de bf       	out	0x3e, r29	; 62
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2cfc:	c8 01       	movw	r24, r16
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d ", !flagLed0);
		gfx_mono_draw_string(strbuf,0, 16, &sysfont);
		vTaskDelay(100/portTICK_PERIOD_MS);
	}
    2cfe:	d6 cf       	rjmp	.-84     	; 0x2cac <vBlinkLed0+0x3a>

00002d00 <main>:
		ioport_set_pin_level(J1_PIN0, 0);
	}
}

int main (void)
{
    2d00:	ef 92       	push	r14
    2d02:	ff 92       	push	r15
    2d04:	0f 93       	push	r16
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
	//set J1 Pin 0 to output
	ioport_set_pin_dir(J1_PIN0, IOPORT_DIR_OUTPUT);

	board_init();
    2d0c:	26 de       	rcall	.-948    	; 0x295a <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	pmic_init();
	gfx_mono_init();
    2d14:	0e 94 0a 05 	call	0xa14	; 0xa14 <gfx_mono_st7565r_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2d18:	80 e1       	ldi	r24, 0x10	; 16
    2d1a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	gfx_mono_draw_string("Praktikum 5 RTOS", 0, 0, &sysfont);
    2d1e:	27 e0       	ldi	r18, 0x07	; 7
    2d20:	30 e2       	ldi	r19, 0x20	; 32
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	87 e6       	ldi	r24, 0x67	; 103
    2d28:	90 e2       	ldi	r25, 0x20	; 32
    2d2a:	c7 dd       	rcall	.-1138   	; 0x28ba <gfx_mono_draw_string>
	gfx_mono_draw_string("Counter : 0", 0, 8, &sysfont);
    2d2c:	27 e0       	ldi	r18, 0x07	; 7
    2d2e:	30 e2       	ldi	r19, 0x20	; 32
    2d30:	48 e0       	ldi	r20, 0x08	; 8
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	88 e7       	ldi	r24, 0x78	; 120
    2d36:	90 e2       	ldi	r25, 0x20	; 32
    2d38:	c0 dd       	rcall	.-1152   	; 0x28ba <gfx_mono_draw_string>

	/* Create the task */
	
	xTaskCreate(vBlinkLed0, "", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);	// higher priority
    2d3a:	e1 2c       	mov	r14, r1
    2d3c:	f1 2c       	mov	r15, r1
    2d3e:	01 e0       	ldi	r16, 0x01	; 1
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	48 ee       	ldi	r20, 0xE8	; 232
    2d46:	53 e0       	ldi	r21, 0x03	; 3
    2d48:	6b e3       	ldi	r22, 0x3B	; 59
    2d4a:	70 e2       	ldi	r23, 0x20	; 32
    2d4c:	89 e3       	ldi	r24, 0x39	; 57
    2d4e:	96 e1       	ldi	r25, 0x16	; 22
    2d50:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <xTaskCreate>
	xTaskCreate(vBlinkLed1, "", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);	// higher priority
    2d54:	02 e0       	ldi	r16, 0x02	; 2
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	48 ee       	ldi	r20, 0xE8	; 232
    2d5c:	53 e0       	ldi	r21, 0x03	; 3
    2d5e:	6b e3       	ldi	r22, 0x3B	; 59
    2d60:	70 e2       	ldi	r23, 0x20	; 32
    2d62:	81 ef       	ldi	r24, 0xF1	; 241
    2d64:	95 e1       	ldi	r25, 0x15	; 21
    2d66:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <xTaskCreate>
	xTaskCreate(vPushButton1, "", 1000, NULL, tskIDLE_PRIORITY + 3, NULL);	// higher priority
    2d6a:	03 e0       	ldi	r16, 0x03	; 3
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	48 ee       	ldi	r20, 0xE8	; 232
    2d72:	53 e0       	ldi	r21, 0x03	; 3
    2d74:	6b e3       	ldi	r22, 0x3B	; 59
    2d76:	70 e2       	ldi	r23, 0x20	; 32
    2d78:	83 ea       	ldi	r24, 0xA3	; 163
    2d7a:	95 e1       	ldi	r25, 0x15	; 21
    2d7c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <xTaskCreate>
	xTaskCreate(vCounter, "", 1000, NULL, tskIDLE_PRIORITY, NULL);			// low priority
    2d80:	00 e0       	ldi	r16, 0x00	; 0
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	48 ee       	ldi	r20, 0xE8	; 232
    2d88:	53 e0       	ldi	r21, 0x03	; 3
    2d8a:	6b e3       	ldi	r22, 0x3B	; 59
    2d8c:	70 e2       	ldi	r23, 0x20	; 32
    2d8e:	8a e4       	ldi	r24, 0x4A	; 74
    2d90:	95 e1       	ldi	r25, 0x15	; 21
    2d92:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <xTaskCreate>
	
	/* Semaphore */
	xSemaphore = xSemaphoreCreateBinary();
    2d96:	43 e0       	ldi	r20, 0x03	; 3
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	0e 94 95 08 	call	0x112a	; 0x112a <xQueueGenericCreate>
    2da0:	80 93 03 23 	sts	0x2303, r24	; 0x802303 <xSemaphore>
    2da4:	90 93 04 23 	sts	0x2304, r25	; 0x802304 <xSemaphore+0x1>
	xSemaphoreGive(xSemaphore);
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	0e 94 b6 08 	call	0x116c	; 0x116c <xQueueGenericSend>
	
	/* Start the task */
	
	vTaskStartScheduler();
    2db6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vTaskStartScheduler>
}
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	08 95       	ret

00002dc6 <__udivmodsi4>:
    2dc6:	a1 e2       	ldi	r26, 0x21	; 33
    2dc8:	1a 2e       	mov	r1, r26
    2dca:	aa 1b       	sub	r26, r26
    2dcc:	bb 1b       	sub	r27, r27
    2dce:	fd 01       	movw	r30, r26
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <__udivmodsi4_ep>

00002dd2 <__udivmodsi4_loop>:
    2dd2:	aa 1f       	adc	r26, r26
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	ee 1f       	adc	r30, r30
    2dd8:	ff 1f       	adc	r31, r31
    2dda:	a2 17       	cp	r26, r18
    2ddc:	b3 07       	cpc	r27, r19
    2dde:	e4 07       	cpc	r30, r20
    2de0:	f5 07       	cpc	r31, r21
    2de2:	20 f0       	brcs	.+8      	; 0x2dec <__udivmodsi4_ep>
    2de4:	a2 1b       	sub	r26, r18
    2de6:	b3 0b       	sbc	r27, r19
    2de8:	e4 0b       	sbc	r30, r20
    2dea:	f5 0b       	sbc	r31, r21

00002dec <__udivmodsi4_ep>:
    2dec:	66 1f       	adc	r22, r22
    2dee:	77 1f       	adc	r23, r23
    2df0:	88 1f       	adc	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	1a 94       	dec	r1
    2df6:	69 f7       	brne	.-38     	; 0x2dd2 <__udivmodsi4_loop>
    2df8:	60 95       	com	r22
    2dfa:	70 95       	com	r23
    2dfc:	80 95       	com	r24
    2dfe:	90 95       	com	r25
    2e00:	9b 01       	movw	r18, r22
    2e02:	ac 01       	movw	r20, r24
    2e04:	bd 01       	movw	r22, r26
    2e06:	cf 01       	movw	r24, r30
    2e08:	08 95       	ret

00002e0a <__tablejump2__>:
    2e0a:	ee 0f       	add	r30, r30
    2e0c:	ff 1f       	adc	r31, r31
    2e0e:	88 1f       	adc	r24, r24
    2e10:	8b bf       	out	0x3b, r24	; 59
    2e12:	07 90       	elpm	r0, Z+
    2e14:	f6 91       	elpm	r31, Z
    2e16:	e0 2d       	mov	r30, r0
    2e18:	19 94       	eijmp

00002e1a <malloc>:
    2e1a:	0f 93       	push	r16
    2e1c:	1f 93       	push	r17
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
    2e22:	82 30       	cpi	r24, 0x02	; 2
    2e24:	91 05       	cpc	r25, r1
    2e26:	10 f4       	brcc	.+4      	; 0x2e2c <malloc+0x12>
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	e0 91 07 23 	lds	r30, 0x2307	; 0x802307 <__flp>
    2e30:	f0 91 08 23 	lds	r31, 0x2308	; 0x802308 <__flp+0x1>
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	a0 e0       	ldi	r26, 0x00	; 0
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	30 97       	sbiw	r30, 0x00	; 0
    2e3e:	19 f1       	breq	.+70     	; 0x2e86 <malloc+0x6c>
    2e40:	40 81       	ld	r20, Z
    2e42:	51 81       	ldd	r21, Z+1	; 0x01
    2e44:	02 81       	ldd	r16, Z+2	; 0x02
    2e46:	13 81       	ldd	r17, Z+3	; 0x03
    2e48:	48 17       	cp	r20, r24
    2e4a:	59 07       	cpc	r21, r25
    2e4c:	c8 f0       	brcs	.+50     	; 0x2e80 <malloc+0x66>
    2e4e:	84 17       	cp	r24, r20
    2e50:	95 07       	cpc	r25, r21
    2e52:	69 f4       	brne	.+26     	; 0x2e6e <malloc+0x54>
    2e54:	10 97       	sbiw	r26, 0x00	; 0
    2e56:	31 f0       	breq	.+12     	; 0x2e64 <malloc+0x4a>
    2e58:	12 96       	adiw	r26, 0x02	; 2
    2e5a:	0c 93       	st	X, r16
    2e5c:	12 97       	sbiw	r26, 0x02	; 2
    2e5e:	13 96       	adiw	r26, 0x03	; 3
    2e60:	1c 93       	st	X, r17
    2e62:	27 c0       	rjmp	.+78     	; 0x2eb2 <malloc+0x98>
    2e64:	00 93 07 23 	sts	0x2307, r16	; 0x802307 <__flp>
    2e68:	10 93 08 23 	sts	0x2308, r17	; 0x802308 <__flp+0x1>
    2e6c:	22 c0       	rjmp	.+68     	; 0x2eb2 <malloc+0x98>
    2e6e:	21 15       	cp	r18, r1
    2e70:	31 05       	cpc	r19, r1
    2e72:	19 f0       	breq	.+6      	; 0x2e7a <malloc+0x60>
    2e74:	42 17       	cp	r20, r18
    2e76:	53 07       	cpc	r21, r19
    2e78:	18 f4       	brcc	.+6      	; 0x2e80 <malloc+0x66>
    2e7a:	9a 01       	movw	r18, r20
    2e7c:	bd 01       	movw	r22, r26
    2e7e:	ef 01       	movw	r28, r30
    2e80:	df 01       	movw	r26, r30
    2e82:	f8 01       	movw	r30, r16
    2e84:	db cf       	rjmp	.-74     	; 0x2e3c <malloc+0x22>
    2e86:	21 15       	cp	r18, r1
    2e88:	31 05       	cpc	r19, r1
    2e8a:	f9 f0       	breq	.+62     	; 0x2eca <malloc+0xb0>
    2e8c:	28 1b       	sub	r18, r24
    2e8e:	39 0b       	sbc	r19, r25
    2e90:	24 30       	cpi	r18, 0x04	; 4
    2e92:	31 05       	cpc	r19, r1
    2e94:	80 f4       	brcc	.+32     	; 0x2eb6 <malloc+0x9c>
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9a:	61 15       	cp	r22, r1
    2e9c:	71 05       	cpc	r23, r1
    2e9e:	21 f0       	breq	.+8      	; 0x2ea8 <malloc+0x8e>
    2ea0:	fb 01       	movw	r30, r22
    2ea2:	82 83       	std	Z+2, r24	; 0x02
    2ea4:	93 83       	std	Z+3, r25	; 0x03
    2ea6:	04 c0       	rjmp	.+8      	; 0x2eb0 <malloc+0x96>
    2ea8:	80 93 07 23 	sts	0x2307, r24	; 0x802307 <__flp>
    2eac:	90 93 08 23 	sts	0x2308, r25	; 0x802308 <__flp+0x1>
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	32 96       	adiw	r30, 0x02	; 2
    2eb4:	44 c0       	rjmp	.+136    	; 0x2f3e <malloc+0x124>
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e2 0f       	add	r30, r18
    2eba:	f3 1f       	adc	r31, r19
    2ebc:	81 93       	st	Z+, r24
    2ebe:	91 93       	st	Z+, r25
    2ec0:	22 50       	subi	r18, 0x02	; 2
    2ec2:	31 09       	sbc	r19, r1
    2ec4:	28 83       	st	Y, r18
    2ec6:	39 83       	std	Y+1, r19	; 0x01
    2ec8:	3a c0       	rjmp	.+116    	; 0x2f3e <malloc+0x124>
    2eca:	20 91 05 23 	lds	r18, 0x2305	; 0x802305 <__brkval>
    2ece:	30 91 06 23 	lds	r19, 0x2306	; 0x802306 <__brkval+0x1>
    2ed2:	23 2b       	or	r18, r19
    2ed4:	41 f4       	brne	.+16     	; 0x2ee6 <malloc+0xcc>
    2ed6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2eda:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2ede:	20 93 05 23 	sts	0x2305, r18	; 0x802305 <__brkval>
    2ee2:	30 93 06 23 	sts	0x2306, r19	; 0x802306 <__brkval+0x1>
    2ee6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2eea:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2eee:	21 15       	cp	r18, r1
    2ef0:	31 05       	cpc	r19, r1
    2ef2:	41 f4       	brne	.+16     	; 0x2f04 <malloc+0xea>
    2ef4:	2d b7       	in	r18, 0x3d	; 61
    2ef6:	3e b7       	in	r19, 0x3e	; 62
    2ef8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2efc:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2f00:	24 1b       	sub	r18, r20
    2f02:	35 0b       	sbc	r19, r21
    2f04:	e0 91 05 23 	lds	r30, 0x2305	; 0x802305 <__brkval>
    2f08:	f0 91 06 23 	lds	r31, 0x2306	; 0x802306 <__brkval+0x1>
    2f0c:	e2 17       	cp	r30, r18
    2f0e:	f3 07       	cpc	r31, r19
    2f10:	a0 f4       	brcc	.+40     	; 0x2f3a <malloc+0x120>
    2f12:	2e 1b       	sub	r18, r30
    2f14:	3f 0b       	sbc	r19, r31
    2f16:	28 17       	cp	r18, r24
    2f18:	39 07       	cpc	r19, r25
    2f1a:	78 f0       	brcs	.+30     	; 0x2f3a <malloc+0x120>
    2f1c:	ac 01       	movw	r20, r24
    2f1e:	4e 5f       	subi	r20, 0xFE	; 254
    2f20:	5f 4f       	sbci	r21, 0xFF	; 255
    2f22:	24 17       	cp	r18, r20
    2f24:	35 07       	cpc	r19, r21
    2f26:	48 f0       	brcs	.+18     	; 0x2f3a <malloc+0x120>
    2f28:	4e 0f       	add	r20, r30
    2f2a:	5f 1f       	adc	r21, r31
    2f2c:	40 93 05 23 	sts	0x2305, r20	; 0x802305 <__brkval>
    2f30:	50 93 06 23 	sts	0x2306, r21	; 0x802306 <__brkval+0x1>
    2f34:	81 93       	st	Z+, r24
    2f36:	91 93       	st	Z+, r25
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <malloc+0x124>
    2f3a:	e0 e0       	ldi	r30, 0x00	; 0
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	cf 01       	movw	r24, r30
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	08 95       	ret

00002f4a <free>:
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <free+0xa>
    2f52:	81 c0       	rjmp	.+258    	; 0x3056 <free+0x10c>
    2f54:	fc 01       	movw	r30, r24
    2f56:	32 97       	sbiw	r30, 0x02	; 2
    2f58:	12 82       	std	Z+2, r1	; 0x02
    2f5a:	13 82       	std	Z+3, r1	; 0x03
    2f5c:	a0 91 07 23 	lds	r26, 0x2307	; 0x802307 <__flp>
    2f60:	b0 91 08 23 	lds	r27, 0x2308	; 0x802308 <__flp+0x1>
    2f64:	10 97       	sbiw	r26, 0x00	; 0
    2f66:	81 f4       	brne	.+32     	; 0x2f88 <free+0x3e>
    2f68:	20 81       	ld	r18, Z
    2f6a:	31 81       	ldd	r19, Z+1	; 0x01
    2f6c:	82 0f       	add	r24, r18
    2f6e:	93 1f       	adc	r25, r19
    2f70:	20 91 05 23 	lds	r18, 0x2305	; 0x802305 <__brkval>
    2f74:	30 91 06 23 	lds	r19, 0x2306	; 0x802306 <__brkval+0x1>
    2f78:	28 17       	cp	r18, r24
    2f7a:	39 07       	cpc	r19, r25
    2f7c:	51 f5       	brne	.+84     	; 0x2fd2 <free+0x88>
    2f7e:	e0 93 05 23 	sts	0x2305, r30	; 0x802305 <__brkval>
    2f82:	f0 93 06 23 	sts	0x2306, r31	; 0x802306 <__brkval+0x1>
    2f86:	67 c0       	rjmp	.+206    	; 0x3056 <free+0x10c>
    2f88:	ed 01       	movw	r28, r26
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	ce 17       	cp	r28, r30
    2f90:	df 07       	cpc	r29, r31
    2f92:	40 f4       	brcc	.+16     	; 0x2fa4 <free+0x5a>
    2f94:	4a 81       	ldd	r20, Y+2	; 0x02
    2f96:	5b 81       	ldd	r21, Y+3	; 0x03
    2f98:	9e 01       	movw	r18, r28
    2f9a:	41 15       	cp	r20, r1
    2f9c:	51 05       	cpc	r21, r1
    2f9e:	f1 f0       	breq	.+60     	; 0x2fdc <free+0x92>
    2fa0:	ea 01       	movw	r28, r20
    2fa2:	f5 cf       	rjmp	.-22     	; 0x2f8e <free+0x44>
    2fa4:	c2 83       	std	Z+2, r28	; 0x02
    2fa6:	d3 83       	std	Z+3, r29	; 0x03
    2fa8:	40 81       	ld	r20, Z
    2faa:	51 81       	ldd	r21, Z+1	; 0x01
    2fac:	84 0f       	add	r24, r20
    2fae:	95 1f       	adc	r25, r21
    2fb0:	c8 17       	cp	r28, r24
    2fb2:	d9 07       	cpc	r29, r25
    2fb4:	59 f4       	brne	.+22     	; 0x2fcc <free+0x82>
    2fb6:	88 81       	ld	r24, Y
    2fb8:	99 81       	ldd	r25, Y+1	; 0x01
    2fba:	84 0f       	add	r24, r20
    2fbc:	95 1f       	adc	r25, r21
    2fbe:	02 96       	adiw	r24, 0x02	; 2
    2fc0:	80 83       	st	Z, r24
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc8:	82 83       	std	Z+2, r24	; 0x02
    2fca:	93 83       	std	Z+3, r25	; 0x03
    2fcc:	21 15       	cp	r18, r1
    2fce:	31 05       	cpc	r19, r1
    2fd0:	29 f4       	brne	.+10     	; 0x2fdc <free+0x92>
    2fd2:	e0 93 07 23 	sts	0x2307, r30	; 0x802307 <__flp>
    2fd6:	f0 93 08 23 	sts	0x2308, r31	; 0x802308 <__flp+0x1>
    2fda:	3d c0       	rjmp	.+122    	; 0x3056 <free+0x10c>
    2fdc:	e9 01       	movw	r28, r18
    2fde:	ea 83       	std	Y+2, r30	; 0x02
    2fe0:	fb 83       	std	Y+3, r31	; 0x03
    2fe2:	49 91       	ld	r20, Y+
    2fe4:	59 91       	ld	r21, Y+
    2fe6:	c4 0f       	add	r28, r20
    2fe8:	d5 1f       	adc	r29, r21
    2fea:	ec 17       	cp	r30, r28
    2fec:	fd 07       	cpc	r31, r29
    2fee:	61 f4       	brne	.+24     	; 0x3008 <free+0xbe>
    2ff0:	80 81       	ld	r24, Z
    2ff2:	91 81       	ldd	r25, Z+1	; 0x01
    2ff4:	84 0f       	add	r24, r20
    2ff6:	95 1f       	adc	r25, r21
    2ff8:	02 96       	adiw	r24, 0x02	; 2
    2ffa:	e9 01       	movw	r28, r18
    2ffc:	88 83       	st	Y, r24
    2ffe:	99 83       	std	Y+1, r25	; 0x01
    3000:	82 81       	ldd	r24, Z+2	; 0x02
    3002:	93 81       	ldd	r25, Z+3	; 0x03
    3004:	8a 83       	std	Y+2, r24	; 0x02
    3006:	9b 83       	std	Y+3, r25	; 0x03
    3008:	e0 e0       	ldi	r30, 0x00	; 0
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	12 96       	adiw	r26, 0x02	; 2
    300e:	8d 91       	ld	r24, X+
    3010:	9c 91       	ld	r25, X
    3012:	13 97       	sbiw	r26, 0x03	; 3
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	19 f0       	breq	.+6      	; 0x301e <free+0xd4>
    3018:	fd 01       	movw	r30, r26
    301a:	dc 01       	movw	r26, r24
    301c:	f7 cf       	rjmp	.-18     	; 0x300c <free+0xc2>
    301e:	8d 91       	ld	r24, X+
    3020:	9c 91       	ld	r25, X
    3022:	11 97       	sbiw	r26, 0x01	; 1
    3024:	9d 01       	movw	r18, r26
    3026:	2e 5f       	subi	r18, 0xFE	; 254
    3028:	3f 4f       	sbci	r19, 0xFF	; 255
    302a:	82 0f       	add	r24, r18
    302c:	93 1f       	adc	r25, r19
    302e:	20 91 05 23 	lds	r18, 0x2305	; 0x802305 <__brkval>
    3032:	30 91 06 23 	lds	r19, 0x2306	; 0x802306 <__brkval+0x1>
    3036:	28 17       	cp	r18, r24
    3038:	39 07       	cpc	r19, r25
    303a:	69 f4       	brne	.+26     	; 0x3056 <free+0x10c>
    303c:	30 97       	sbiw	r30, 0x00	; 0
    303e:	29 f4       	brne	.+10     	; 0x304a <free+0x100>
    3040:	10 92 07 23 	sts	0x2307, r1	; 0x802307 <__flp>
    3044:	10 92 08 23 	sts	0x2308, r1	; 0x802308 <__flp+0x1>
    3048:	02 c0       	rjmp	.+4      	; 0x304e <free+0x104>
    304a:	12 82       	std	Z+2, r1	; 0x02
    304c:	13 82       	std	Z+3, r1	; 0x03
    304e:	a0 93 05 23 	sts	0x2305, r26	; 0x802305 <__brkval>
    3052:	b0 93 06 23 	sts	0x2306, r27	; 0x802306 <__brkval+0x1>
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	08 95       	ret

0000305c <memcpy>:
    305c:	fb 01       	movw	r30, r22
    305e:	dc 01       	movw	r26, r24
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <memcpy+0xa>
    3062:	01 90       	ld	r0, Z+
    3064:	0d 92       	st	X+, r0
    3066:	41 50       	subi	r20, 0x01	; 1
    3068:	50 40       	sbci	r21, 0x00	; 0
    306a:	d8 f7       	brcc	.-10     	; 0x3062 <memcpy+0x6>
    306c:	08 95       	ret

0000306e <snprintf>:
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	2e 97       	sbiw	r28, 0x0e	; 14
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	de bf       	out	0x3e, r29	; 62
    3080:	0e 89       	ldd	r16, Y+22	; 0x16
    3082:	1f 89       	ldd	r17, Y+23	; 0x17
    3084:	88 8d       	ldd	r24, Y+24	; 0x18
    3086:	99 8d       	ldd	r25, Y+25	; 0x19
    3088:	26 e0       	ldi	r18, 0x06	; 6
    308a:	2c 83       	std	Y+4, r18	; 0x04
    308c:	09 83       	std	Y+1, r16	; 0x01
    308e:	1a 83       	std	Y+2, r17	; 0x02
    3090:	97 ff       	sbrs	r25, 7
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <snprintf+0x2a>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e8       	ldi	r25, 0x80	; 128
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	8d 83       	std	Y+5, r24	; 0x05
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	ae 01       	movw	r20, r28
    30a0:	44 5e       	subi	r20, 0xE4	; 228
    30a2:	5f 4f       	sbci	r21, 0xFF	; 255
    30a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    30a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    30a8:	ce 01       	movw	r24, r28
    30aa:	01 96       	adiw	r24, 0x01	; 1
    30ac:	16 d0       	rcall	.+44     	; 0x30da <vfprintf>
    30ae:	4d 81       	ldd	r20, Y+5	; 0x05
    30b0:	5e 81       	ldd	r21, Y+6	; 0x06
    30b2:	57 fd       	sbrc	r21, 7
    30b4:	0a c0       	rjmp	.+20     	; 0x30ca <snprintf+0x5c>
    30b6:	2f 81       	ldd	r18, Y+7	; 0x07
    30b8:	38 85       	ldd	r19, Y+8	; 0x08
    30ba:	42 17       	cp	r20, r18
    30bc:	53 07       	cpc	r21, r19
    30be:	0c f4       	brge	.+2      	; 0x30c2 <snprintf+0x54>
    30c0:	9a 01       	movw	r18, r20
    30c2:	f8 01       	movw	r30, r16
    30c4:	e2 0f       	add	r30, r18
    30c6:	f3 1f       	adc	r31, r19
    30c8:	10 82       	st	Z, r1
    30ca:	2e 96       	adiw	r28, 0x0e	; 14
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <vfprintf>:
    30da:	2f 92       	push	r2
    30dc:	3f 92       	push	r3
    30de:	4f 92       	push	r4
    30e0:	5f 92       	push	r5
    30e2:	6f 92       	push	r6
    30e4:	7f 92       	push	r7
    30e6:	8f 92       	push	r8
    30e8:	9f 92       	push	r9
    30ea:	af 92       	push	r10
    30ec:	bf 92       	push	r11
    30ee:	cf 92       	push	r12
    30f0:	df 92       	push	r13
    30f2:	ef 92       	push	r14
    30f4:	ff 92       	push	r15
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	2b 97       	sbiw	r28, 0x0b	; 11
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	6c 01       	movw	r12, r24
    310a:	7b 01       	movw	r14, r22
    310c:	8a 01       	movw	r16, r20
    310e:	fc 01       	movw	r30, r24
    3110:	16 82       	std	Z+6, r1	; 0x06
    3112:	17 82       	std	Z+7, r1	; 0x07
    3114:	83 81       	ldd	r24, Z+3	; 0x03
    3116:	81 ff       	sbrs	r24, 1
    3118:	bf c1       	rjmp	.+894    	; 0x3498 <vfprintf+0x3be>
    311a:	ce 01       	movw	r24, r28
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	3c 01       	movw	r6, r24
    3120:	f6 01       	movw	r30, r12
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	f7 01       	movw	r30, r14
    3126:	93 fd       	sbrc	r25, 3
    3128:	85 91       	lpm	r24, Z+
    312a:	93 ff       	sbrs	r25, 3
    312c:	81 91       	ld	r24, Z+
    312e:	7f 01       	movw	r14, r30
    3130:	88 23       	and	r24, r24
    3132:	09 f4       	brne	.+2      	; 0x3136 <vfprintf+0x5c>
    3134:	ad c1       	rjmp	.+858    	; 0x3490 <vfprintf+0x3b6>
    3136:	85 32       	cpi	r24, 0x25	; 37
    3138:	39 f4       	brne	.+14     	; 0x3148 <vfprintf+0x6e>
    313a:	93 fd       	sbrc	r25, 3
    313c:	85 91       	lpm	r24, Z+
    313e:	93 ff       	sbrs	r25, 3
    3140:	81 91       	ld	r24, Z+
    3142:	7f 01       	movw	r14, r30
    3144:	85 32       	cpi	r24, 0x25	; 37
    3146:	21 f4       	brne	.+8      	; 0x3150 <vfprintf+0x76>
    3148:	b6 01       	movw	r22, r12
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	d3 d1       	rcall	.+934    	; 0x34f4 <fputc>
    314e:	e8 cf       	rjmp	.-48     	; 0x3120 <vfprintf+0x46>
    3150:	91 2c       	mov	r9, r1
    3152:	21 2c       	mov	r2, r1
    3154:	31 2c       	mov	r3, r1
    3156:	ff e1       	ldi	r31, 0x1F	; 31
    3158:	f3 15       	cp	r31, r3
    315a:	d8 f0       	brcs	.+54     	; 0x3192 <vfprintf+0xb8>
    315c:	8b 32       	cpi	r24, 0x2B	; 43
    315e:	79 f0       	breq	.+30     	; 0x317e <vfprintf+0xa4>
    3160:	38 f4       	brcc	.+14     	; 0x3170 <vfprintf+0x96>
    3162:	80 32       	cpi	r24, 0x20	; 32
    3164:	79 f0       	breq	.+30     	; 0x3184 <vfprintf+0xaa>
    3166:	83 32       	cpi	r24, 0x23	; 35
    3168:	a1 f4       	brne	.+40     	; 0x3192 <vfprintf+0xb8>
    316a:	23 2d       	mov	r18, r3
    316c:	20 61       	ori	r18, 0x10	; 16
    316e:	1d c0       	rjmp	.+58     	; 0x31aa <vfprintf+0xd0>
    3170:	8d 32       	cpi	r24, 0x2D	; 45
    3172:	61 f0       	breq	.+24     	; 0x318c <vfprintf+0xb2>
    3174:	80 33       	cpi	r24, 0x30	; 48
    3176:	69 f4       	brne	.+26     	; 0x3192 <vfprintf+0xb8>
    3178:	23 2d       	mov	r18, r3
    317a:	21 60       	ori	r18, 0x01	; 1
    317c:	16 c0       	rjmp	.+44     	; 0x31aa <vfprintf+0xd0>
    317e:	83 2d       	mov	r24, r3
    3180:	82 60       	ori	r24, 0x02	; 2
    3182:	38 2e       	mov	r3, r24
    3184:	e3 2d       	mov	r30, r3
    3186:	e4 60       	ori	r30, 0x04	; 4
    3188:	3e 2e       	mov	r3, r30
    318a:	2a c0       	rjmp	.+84     	; 0x31e0 <vfprintf+0x106>
    318c:	f3 2d       	mov	r31, r3
    318e:	f8 60       	ori	r31, 0x08	; 8
    3190:	1d c0       	rjmp	.+58     	; 0x31cc <vfprintf+0xf2>
    3192:	37 fc       	sbrc	r3, 7
    3194:	2d c0       	rjmp	.+90     	; 0x31f0 <vfprintf+0x116>
    3196:	20 ed       	ldi	r18, 0xD0	; 208
    3198:	28 0f       	add	r18, r24
    319a:	2a 30       	cpi	r18, 0x0A	; 10
    319c:	40 f0       	brcs	.+16     	; 0x31ae <vfprintf+0xd4>
    319e:	8e 32       	cpi	r24, 0x2E	; 46
    31a0:	b9 f4       	brne	.+46     	; 0x31d0 <vfprintf+0xf6>
    31a2:	36 fc       	sbrc	r3, 6
    31a4:	75 c1       	rjmp	.+746    	; 0x3490 <vfprintf+0x3b6>
    31a6:	23 2d       	mov	r18, r3
    31a8:	20 64       	ori	r18, 0x40	; 64
    31aa:	32 2e       	mov	r3, r18
    31ac:	19 c0       	rjmp	.+50     	; 0x31e0 <vfprintf+0x106>
    31ae:	36 fe       	sbrs	r3, 6
    31b0:	06 c0       	rjmp	.+12     	; 0x31be <vfprintf+0xe4>
    31b2:	8a e0       	ldi	r24, 0x0A	; 10
    31b4:	98 9e       	mul	r9, r24
    31b6:	20 0d       	add	r18, r0
    31b8:	11 24       	eor	r1, r1
    31ba:	92 2e       	mov	r9, r18
    31bc:	11 c0       	rjmp	.+34     	; 0x31e0 <vfprintf+0x106>
    31be:	ea e0       	ldi	r30, 0x0A	; 10
    31c0:	2e 9e       	mul	r2, r30
    31c2:	20 0d       	add	r18, r0
    31c4:	11 24       	eor	r1, r1
    31c6:	22 2e       	mov	r2, r18
    31c8:	f3 2d       	mov	r31, r3
    31ca:	f0 62       	ori	r31, 0x20	; 32
    31cc:	3f 2e       	mov	r3, r31
    31ce:	08 c0       	rjmp	.+16     	; 0x31e0 <vfprintf+0x106>
    31d0:	8c 36       	cpi	r24, 0x6C	; 108
    31d2:	21 f4       	brne	.+8      	; 0x31dc <vfprintf+0x102>
    31d4:	83 2d       	mov	r24, r3
    31d6:	80 68       	ori	r24, 0x80	; 128
    31d8:	38 2e       	mov	r3, r24
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <vfprintf+0x106>
    31dc:	88 36       	cpi	r24, 0x68	; 104
    31de:	41 f4       	brne	.+16     	; 0x31f0 <vfprintf+0x116>
    31e0:	f7 01       	movw	r30, r14
    31e2:	93 fd       	sbrc	r25, 3
    31e4:	85 91       	lpm	r24, Z+
    31e6:	93 ff       	sbrs	r25, 3
    31e8:	81 91       	ld	r24, Z+
    31ea:	7f 01       	movw	r14, r30
    31ec:	81 11       	cpse	r24, r1
    31ee:	b3 cf       	rjmp	.-154    	; 0x3156 <vfprintf+0x7c>
    31f0:	98 2f       	mov	r25, r24
    31f2:	9f 7d       	andi	r25, 0xDF	; 223
    31f4:	95 54       	subi	r25, 0x45	; 69
    31f6:	93 30       	cpi	r25, 0x03	; 3
    31f8:	28 f4       	brcc	.+10     	; 0x3204 <vfprintf+0x12a>
    31fa:	0c 5f       	subi	r16, 0xFC	; 252
    31fc:	1f 4f       	sbci	r17, 0xFF	; 255
    31fe:	9f e3       	ldi	r25, 0x3F	; 63
    3200:	99 83       	std	Y+1, r25	; 0x01
    3202:	0d c0       	rjmp	.+26     	; 0x321e <vfprintf+0x144>
    3204:	83 36       	cpi	r24, 0x63	; 99
    3206:	31 f0       	breq	.+12     	; 0x3214 <vfprintf+0x13a>
    3208:	83 37       	cpi	r24, 0x73	; 115
    320a:	71 f0       	breq	.+28     	; 0x3228 <vfprintf+0x14e>
    320c:	83 35       	cpi	r24, 0x53	; 83
    320e:	09 f0       	breq	.+2      	; 0x3212 <vfprintf+0x138>
    3210:	55 c0       	rjmp	.+170    	; 0x32bc <vfprintf+0x1e2>
    3212:	20 c0       	rjmp	.+64     	; 0x3254 <vfprintf+0x17a>
    3214:	f8 01       	movw	r30, r16
    3216:	80 81       	ld	r24, Z
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	0e 5f       	subi	r16, 0xFE	; 254
    321c:	1f 4f       	sbci	r17, 0xFF	; 255
    321e:	88 24       	eor	r8, r8
    3220:	83 94       	inc	r8
    3222:	91 2c       	mov	r9, r1
    3224:	53 01       	movw	r10, r6
    3226:	12 c0       	rjmp	.+36     	; 0x324c <vfprintf+0x172>
    3228:	28 01       	movw	r4, r16
    322a:	f2 e0       	ldi	r31, 0x02	; 2
    322c:	4f 0e       	add	r4, r31
    322e:	51 1c       	adc	r5, r1
    3230:	f8 01       	movw	r30, r16
    3232:	a0 80       	ld	r10, Z
    3234:	b1 80       	ldd	r11, Z+1	; 0x01
    3236:	36 fe       	sbrs	r3, 6
    3238:	03 c0       	rjmp	.+6      	; 0x3240 <vfprintf+0x166>
    323a:	69 2d       	mov	r22, r9
    323c:	70 e0       	ldi	r23, 0x00	; 0
    323e:	02 c0       	rjmp	.+4      	; 0x3244 <vfprintf+0x16a>
    3240:	6f ef       	ldi	r22, 0xFF	; 255
    3242:	7f ef       	ldi	r23, 0xFF	; 255
    3244:	c5 01       	movw	r24, r10
    3246:	4b d1       	rcall	.+662    	; 0x34de <strnlen>
    3248:	4c 01       	movw	r8, r24
    324a:	82 01       	movw	r16, r4
    324c:	f3 2d       	mov	r31, r3
    324e:	ff 77       	andi	r31, 0x7F	; 127
    3250:	3f 2e       	mov	r3, r31
    3252:	15 c0       	rjmp	.+42     	; 0x327e <vfprintf+0x1a4>
    3254:	28 01       	movw	r4, r16
    3256:	22 e0       	ldi	r18, 0x02	; 2
    3258:	42 0e       	add	r4, r18
    325a:	51 1c       	adc	r5, r1
    325c:	f8 01       	movw	r30, r16
    325e:	a0 80       	ld	r10, Z
    3260:	b1 80       	ldd	r11, Z+1	; 0x01
    3262:	36 fe       	sbrs	r3, 6
    3264:	03 c0       	rjmp	.+6      	; 0x326c <vfprintf+0x192>
    3266:	69 2d       	mov	r22, r9
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <vfprintf+0x196>
    326c:	6f ef       	ldi	r22, 0xFF	; 255
    326e:	7f ef       	ldi	r23, 0xFF	; 255
    3270:	c5 01       	movw	r24, r10
    3272:	2a d1       	rcall	.+596    	; 0x34c8 <strnlen_P>
    3274:	4c 01       	movw	r8, r24
    3276:	f3 2d       	mov	r31, r3
    3278:	f0 68       	ori	r31, 0x80	; 128
    327a:	3f 2e       	mov	r3, r31
    327c:	82 01       	movw	r16, r4
    327e:	33 fc       	sbrc	r3, 3
    3280:	19 c0       	rjmp	.+50     	; 0x32b4 <vfprintf+0x1da>
    3282:	82 2d       	mov	r24, r2
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	88 16       	cp	r8, r24
    3288:	99 06       	cpc	r9, r25
    328a:	a0 f4       	brcc	.+40     	; 0x32b4 <vfprintf+0x1da>
    328c:	b6 01       	movw	r22, r12
    328e:	80 e2       	ldi	r24, 0x20	; 32
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	30 d1       	rcall	.+608    	; 0x34f4 <fputc>
    3294:	2a 94       	dec	r2
    3296:	f5 cf       	rjmp	.-22     	; 0x3282 <vfprintf+0x1a8>
    3298:	f5 01       	movw	r30, r10
    329a:	37 fc       	sbrc	r3, 7
    329c:	85 91       	lpm	r24, Z+
    329e:	37 fe       	sbrs	r3, 7
    32a0:	81 91       	ld	r24, Z+
    32a2:	5f 01       	movw	r10, r30
    32a4:	b6 01       	movw	r22, r12
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	25 d1       	rcall	.+586    	; 0x34f4 <fputc>
    32aa:	21 10       	cpse	r2, r1
    32ac:	2a 94       	dec	r2
    32ae:	21 e0       	ldi	r18, 0x01	; 1
    32b0:	82 1a       	sub	r8, r18
    32b2:	91 08       	sbc	r9, r1
    32b4:	81 14       	cp	r8, r1
    32b6:	91 04       	cpc	r9, r1
    32b8:	79 f7       	brne	.-34     	; 0x3298 <vfprintf+0x1be>
    32ba:	e1 c0       	rjmp	.+450    	; 0x347e <vfprintf+0x3a4>
    32bc:	84 36       	cpi	r24, 0x64	; 100
    32be:	11 f0       	breq	.+4      	; 0x32c4 <vfprintf+0x1ea>
    32c0:	89 36       	cpi	r24, 0x69	; 105
    32c2:	39 f5       	brne	.+78     	; 0x3312 <vfprintf+0x238>
    32c4:	f8 01       	movw	r30, r16
    32c6:	37 fe       	sbrs	r3, 7
    32c8:	07 c0       	rjmp	.+14     	; 0x32d8 <vfprintf+0x1fe>
    32ca:	60 81       	ld	r22, Z
    32cc:	71 81       	ldd	r23, Z+1	; 0x01
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	93 81       	ldd	r25, Z+3	; 0x03
    32d2:	0c 5f       	subi	r16, 0xFC	; 252
    32d4:	1f 4f       	sbci	r17, 0xFF	; 255
    32d6:	08 c0       	rjmp	.+16     	; 0x32e8 <vfprintf+0x20e>
    32d8:	60 81       	ld	r22, Z
    32da:	71 81       	ldd	r23, Z+1	; 0x01
    32dc:	07 2e       	mov	r0, r23
    32de:	00 0c       	add	r0, r0
    32e0:	88 0b       	sbc	r24, r24
    32e2:	99 0b       	sbc	r25, r25
    32e4:	0e 5f       	subi	r16, 0xFE	; 254
    32e6:	1f 4f       	sbci	r17, 0xFF	; 255
    32e8:	f3 2d       	mov	r31, r3
    32ea:	ff 76       	andi	r31, 0x6F	; 111
    32ec:	3f 2e       	mov	r3, r31
    32ee:	97 ff       	sbrs	r25, 7
    32f0:	09 c0       	rjmp	.+18     	; 0x3304 <vfprintf+0x22a>
    32f2:	90 95       	com	r25
    32f4:	80 95       	com	r24
    32f6:	70 95       	com	r23
    32f8:	61 95       	neg	r22
    32fa:	7f 4f       	sbci	r23, 0xFF	; 255
    32fc:	8f 4f       	sbci	r24, 0xFF	; 255
    32fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3300:	f0 68       	ori	r31, 0x80	; 128
    3302:	3f 2e       	mov	r3, r31
    3304:	2a e0       	ldi	r18, 0x0A	; 10
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	a3 01       	movw	r20, r6
    330a:	30 d1       	rcall	.+608    	; 0x356c <__ultoa_invert>
    330c:	88 2e       	mov	r8, r24
    330e:	86 18       	sub	r8, r6
    3310:	44 c0       	rjmp	.+136    	; 0x339a <vfprintf+0x2c0>
    3312:	85 37       	cpi	r24, 0x75	; 117
    3314:	31 f4       	brne	.+12     	; 0x3322 <vfprintf+0x248>
    3316:	23 2d       	mov	r18, r3
    3318:	2f 7e       	andi	r18, 0xEF	; 239
    331a:	b2 2e       	mov	r11, r18
    331c:	2a e0       	ldi	r18, 0x0A	; 10
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	25 c0       	rjmp	.+74     	; 0x336c <vfprintf+0x292>
    3322:	93 2d       	mov	r25, r3
    3324:	99 7f       	andi	r25, 0xF9	; 249
    3326:	b9 2e       	mov	r11, r25
    3328:	8f 36       	cpi	r24, 0x6F	; 111
    332a:	c1 f0       	breq	.+48     	; 0x335c <vfprintf+0x282>
    332c:	18 f4       	brcc	.+6      	; 0x3334 <vfprintf+0x25a>
    332e:	88 35       	cpi	r24, 0x58	; 88
    3330:	79 f0       	breq	.+30     	; 0x3350 <vfprintf+0x276>
    3332:	ae c0       	rjmp	.+348    	; 0x3490 <vfprintf+0x3b6>
    3334:	80 37       	cpi	r24, 0x70	; 112
    3336:	19 f0       	breq	.+6      	; 0x333e <vfprintf+0x264>
    3338:	88 37       	cpi	r24, 0x78	; 120
    333a:	21 f0       	breq	.+8      	; 0x3344 <vfprintf+0x26a>
    333c:	a9 c0       	rjmp	.+338    	; 0x3490 <vfprintf+0x3b6>
    333e:	e9 2f       	mov	r30, r25
    3340:	e0 61       	ori	r30, 0x10	; 16
    3342:	be 2e       	mov	r11, r30
    3344:	b4 fe       	sbrs	r11, 4
    3346:	0d c0       	rjmp	.+26     	; 0x3362 <vfprintf+0x288>
    3348:	fb 2d       	mov	r31, r11
    334a:	f4 60       	ori	r31, 0x04	; 4
    334c:	bf 2e       	mov	r11, r31
    334e:	09 c0       	rjmp	.+18     	; 0x3362 <vfprintf+0x288>
    3350:	34 fe       	sbrs	r3, 4
    3352:	0a c0       	rjmp	.+20     	; 0x3368 <vfprintf+0x28e>
    3354:	29 2f       	mov	r18, r25
    3356:	26 60       	ori	r18, 0x06	; 6
    3358:	b2 2e       	mov	r11, r18
    335a:	06 c0       	rjmp	.+12     	; 0x3368 <vfprintf+0x28e>
    335c:	28 e0       	ldi	r18, 0x08	; 8
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	05 c0       	rjmp	.+10     	; 0x336c <vfprintf+0x292>
    3362:	20 e1       	ldi	r18, 0x10	; 16
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	02 c0       	rjmp	.+4      	; 0x336c <vfprintf+0x292>
    3368:	20 e1       	ldi	r18, 0x10	; 16
    336a:	32 e0       	ldi	r19, 0x02	; 2
    336c:	f8 01       	movw	r30, r16
    336e:	b7 fe       	sbrs	r11, 7
    3370:	07 c0       	rjmp	.+14     	; 0x3380 <vfprintf+0x2a6>
    3372:	60 81       	ld	r22, Z
    3374:	71 81       	ldd	r23, Z+1	; 0x01
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	93 81       	ldd	r25, Z+3	; 0x03
    337a:	0c 5f       	subi	r16, 0xFC	; 252
    337c:	1f 4f       	sbci	r17, 0xFF	; 255
    337e:	06 c0       	rjmp	.+12     	; 0x338c <vfprintf+0x2b2>
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	0e 5f       	subi	r16, 0xFE	; 254
    338a:	1f 4f       	sbci	r17, 0xFF	; 255
    338c:	a3 01       	movw	r20, r6
    338e:	ee d0       	rcall	.+476    	; 0x356c <__ultoa_invert>
    3390:	88 2e       	mov	r8, r24
    3392:	86 18       	sub	r8, r6
    3394:	fb 2d       	mov	r31, r11
    3396:	ff 77       	andi	r31, 0x7F	; 127
    3398:	3f 2e       	mov	r3, r31
    339a:	36 fe       	sbrs	r3, 6
    339c:	0d c0       	rjmp	.+26     	; 0x33b8 <vfprintf+0x2de>
    339e:	23 2d       	mov	r18, r3
    33a0:	2e 7f       	andi	r18, 0xFE	; 254
    33a2:	a2 2e       	mov	r10, r18
    33a4:	89 14       	cp	r8, r9
    33a6:	58 f4       	brcc	.+22     	; 0x33be <vfprintf+0x2e4>
    33a8:	34 fe       	sbrs	r3, 4
    33aa:	0b c0       	rjmp	.+22     	; 0x33c2 <vfprintf+0x2e8>
    33ac:	32 fc       	sbrc	r3, 2
    33ae:	09 c0       	rjmp	.+18     	; 0x33c2 <vfprintf+0x2e8>
    33b0:	83 2d       	mov	r24, r3
    33b2:	8e 7e       	andi	r24, 0xEE	; 238
    33b4:	a8 2e       	mov	r10, r24
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <vfprintf+0x2e8>
    33b8:	b8 2c       	mov	r11, r8
    33ba:	a3 2c       	mov	r10, r3
    33bc:	03 c0       	rjmp	.+6      	; 0x33c4 <vfprintf+0x2ea>
    33be:	b8 2c       	mov	r11, r8
    33c0:	01 c0       	rjmp	.+2      	; 0x33c4 <vfprintf+0x2ea>
    33c2:	b9 2c       	mov	r11, r9
    33c4:	a4 fe       	sbrs	r10, 4
    33c6:	0f c0       	rjmp	.+30     	; 0x33e6 <vfprintf+0x30c>
    33c8:	fe 01       	movw	r30, r28
    33ca:	e8 0d       	add	r30, r8
    33cc:	f1 1d       	adc	r31, r1
    33ce:	80 81       	ld	r24, Z
    33d0:	80 33       	cpi	r24, 0x30	; 48
    33d2:	21 f4       	brne	.+8      	; 0x33dc <vfprintf+0x302>
    33d4:	9a 2d       	mov	r25, r10
    33d6:	99 7e       	andi	r25, 0xE9	; 233
    33d8:	a9 2e       	mov	r10, r25
    33da:	09 c0       	rjmp	.+18     	; 0x33ee <vfprintf+0x314>
    33dc:	a2 fe       	sbrs	r10, 2
    33de:	06 c0       	rjmp	.+12     	; 0x33ec <vfprintf+0x312>
    33e0:	b3 94       	inc	r11
    33e2:	b3 94       	inc	r11
    33e4:	04 c0       	rjmp	.+8      	; 0x33ee <vfprintf+0x314>
    33e6:	8a 2d       	mov	r24, r10
    33e8:	86 78       	andi	r24, 0x86	; 134
    33ea:	09 f0       	breq	.+2      	; 0x33ee <vfprintf+0x314>
    33ec:	b3 94       	inc	r11
    33ee:	a3 fc       	sbrc	r10, 3
    33f0:	10 c0       	rjmp	.+32     	; 0x3412 <vfprintf+0x338>
    33f2:	a0 fe       	sbrs	r10, 0
    33f4:	06 c0       	rjmp	.+12     	; 0x3402 <vfprintf+0x328>
    33f6:	b2 14       	cp	r11, r2
    33f8:	80 f4       	brcc	.+32     	; 0x341a <vfprintf+0x340>
    33fa:	28 0c       	add	r2, r8
    33fc:	92 2c       	mov	r9, r2
    33fe:	9b 18       	sub	r9, r11
    3400:	0d c0       	rjmp	.+26     	; 0x341c <vfprintf+0x342>
    3402:	b2 14       	cp	r11, r2
    3404:	58 f4       	brcc	.+22     	; 0x341c <vfprintf+0x342>
    3406:	b6 01       	movw	r22, r12
    3408:	80 e2       	ldi	r24, 0x20	; 32
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	73 d0       	rcall	.+230    	; 0x34f4 <fputc>
    340e:	b3 94       	inc	r11
    3410:	f8 cf       	rjmp	.-16     	; 0x3402 <vfprintf+0x328>
    3412:	b2 14       	cp	r11, r2
    3414:	18 f4       	brcc	.+6      	; 0x341c <vfprintf+0x342>
    3416:	2b 18       	sub	r2, r11
    3418:	02 c0       	rjmp	.+4      	; 0x341e <vfprintf+0x344>
    341a:	98 2c       	mov	r9, r8
    341c:	21 2c       	mov	r2, r1
    341e:	a4 fe       	sbrs	r10, 4
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <vfprintf+0x366>
    3422:	b6 01       	movw	r22, r12
    3424:	80 e3       	ldi	r24, 0x30	; 48
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	65 d0       	rcall	.+202    	; 0x34f4 <fputc>
    342a:	a2 fe       	sbrs	r10, 2
    342c:	16 c0       	rjmp	.+44     	; 0x345a <vfprintf+0x380>
    342e:	a1 fc       	sbrc	r10, 1
    3430:	03 c0       	rjmp	.+6      	; 0x3438 <vfprintf+0x35e>
    3432:	88 e7       	ldi	r24, 0x78	; 120
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	02 c0       	rjmp	.+4      	; 0x343c <vfprintf+0x362>
    3438:	88 e5       	ldi	r24, 0x58	; 88
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	b6 01       	movw	r22, r12
    343e:	0c c0       	rjmp	.+24     	; 0x3458 <vfprintf+0x37e>
    3440:	8a 2d       	mov	r24, r10
    3442:	86 78       	andi	r24, 0x86	; 134
    3444:	51 f0       	breq	.+20     	; 0x345a <vfprintf+0x380>
    3446:	a1 fe       	sbrs	r10, 1
    3448:	02 c0       	rjmp	.+4      	; 0x344e <vfprintf+0x374>
    344a:	8b e2       	ldi	r24, 0x2B	; 43
    344c:	01 c0       	rjmp	.+2      	; 0x3450 <vfprintf+0x376>
    344e:	80 e2       	ldi	r24, 0x20	; 32
    3450:	a7 fc       	sbrc	r10, 7
    3452:	8d e2       	ldi	r24, 0x2D	; 45
    3454:	b6 01       	movw	r22, r12
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	4d d0       	rcall	.+154    	; 0x34f4 <fputc>
    345a:	89 14       	cp	r8, r9
    345c:	30 f4       	brcc	.+12     	; 0x346a <vfprintf+0x390>
    345e:	b6 01       	movw	r22, r12
    3460:	80 e3       	ldi	r24, 0x30	; 48
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	47 d0       	rcall	.+142    	; 0x34f4 <fputc>
    3466:	9a 94       	dec	r9
    3468:	f8 cf       	rjmp	.-16     	; 0x345a <vfprintf+0x380>
    346a:	8a 94       	dec	r8
    346c:	f3 01       	movw	r30, r6
    346e:	e8 0d       	add	r30, r8
    3470:	f1 1d       	adc	r31, r1
    3472:	80 81       	ld	r24, Z
    3474:	b6 01       	movw	r22, r12
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	3d d0       	rcall	.+122    	; 0x34f4 <fputc>
    347a:	81 10       	cpse	r8, r1
    347c:	f6 cf       	rjmp	.-20     	; 0x346a <vfprintf+0x390>
    347e:	22 20       	and	r2, r2
    3480:	09 f4       	brne	.+2      	; 0x3484 <vfprintf+0x3aa>
    3482:	4e ce       	rjmp	.-868    	; 0x3120 <vfprintf+0x46>
    3484:	b6 01       	movw	r22, r12
    3486:	80 e2       	ldi	r24, 0x20	; 32
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	34 d0       	rcall	.+104    	; 0x34f4 <fputc>
    348c:	2a 94       	dec	r2
    348e:	f7 cf       	rjmp	.-18     	; 0x347e <vfprintf+0x3a4>
    3490:	f6 01       	movw	r30, r12
    3492:	86 81       	ldd	r24, Z+6	; 0x06
    3494:	97 81       	ldd	r25, Z+7	; 0x07
    3496:	02 c0       	rjmp	.+4      	; 0x349c <vfprintf+0x3c2>
    3498:	8f ef       	ldi	r24, 0xFF	; 255
    349a:	9f ef       	ldi	r25, 0xFF	; 255
    349c:	2b 96       	adiw	r28, 0x0b	; 11
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	df 90       	pop	r13
    34b0:	cf 90       	pop	r12
    34b2:	bf 90       	pop	r11
    34b4:	af 90       	pop	r10
    34b6:	9f 90       	pop	r9
    34b8:	8f 90       	pop	r8
    34ba:	7f 90       	pop	r7
    34bc:	6f 90       	pop	r6
    34be:	5f 90       	pop	r5
    34c0:	4f 90       	pop	r4
    34c2:	3f 90       	pop	r3
    34c4:	2f 90       	pop	r2
    34c6:	08 95       	ret

000034c8 <strnlen_P>:
    34c8:	fc 01       	movw	r30, r24
    34ca:	05 90       	lpm	r0, Z+
    34cc:	61 50       	subi	r22, 0x01	; 1
    34ce:	70 40       	sbci	r23, 0x00	; 0
    34d0:	01 10       	cpse	r0, r1
    34d2:	d8 f7       	brcc	.-10     	; 0x34ca <strnlen_P+0x2>
    34d4:	80 95       	com	r24
    34d6:	90 95       	com	r25
    34d8:	8e 0f       	add	r24, r30
    34da:	9f 1f       	adc	r25, r31
    34dc:	08 95       	ret

000034de <strnlen>:
    34de:	fc 01       	movw	r30, r24
    34e0:	61 50       	subi	r22, 0x01	; 1
    34e2:	70 40       	sbci	r23, 0x00	; 0
    34e4:	01 90       	ld	r0, Z+
    34e6:	01 10       	cpse	r0, r1
    34e8:	d8 f7       	brcc	.-10     	; 0x34e0 <strnlen+0x2>
    34ea:	80 95       	com	r24
    34ec:	90 95       	com	r25
    34ee:	8e 0f       	add	r24, r30
    34f0:	9f 1f       	adc	r25, r31
    34f2:	08 95       	ret

000034f4 <fputc>:
    34f4:	0f 93       	push	r16
    34f6:	1f 93       	push	r17
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	fb 01       	movw	r30, r22
    34fe:	23 81       	ldd	r18, Z+3	; 0x03
    3500:	21 fd       	sbrc	r18, 1
    3502:	03 c0       	rjmp	.+6      	; 0x350a <fputc+0x16>
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	9f ef       	ldi	r25, 0xFF	; 255
    3508:	2c c0       	rjmp	.+88     	; 0x3562 <fputc+0x6e>
    350a:	22 ff       	sbrs	r18, 2
    350c:	16 c0       	rjmp	.+44     	; 0x353a <fputc+0x46>
    350e:	46 81       	ldd	r20, Z+6	; 0x06
    3510:	57 81       	ldd	r21, Z+7	; 0x07
    3512:	24 81       	ldd	r18, Z+4	; 0x04
    3514:	35 81       	ldd	r19, Z+5	; 0x05
    3516:	42 17       	cp	r20, r18
    3518:	53 07       	cpc	r21, r19
    351a:	44 f4       	brge	.+16     	; 0x352c <fputc+0x38>
    351c:	a0 81       	ld	r26, Z
    351e:	b1 81       	ldd	r27, Z+1	; 0x01
    3520:	9d 01       	movw	r18, r26
    3522:	2f 5f       	subi	r18, 0xFF	; 255
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	20 83       	st	Z, r18
    3528:	31 83       	std	Z+1, r19	; 0x01
    352a:	8c 93       	st	X, r24
    352c:	26 81       	ldd	r18, Z+6	; 0x06
    352e:	37 81       	ldd	r19, Z+7	; 0x07
    3530:	2f 5f       	subi	r18, 0xFF	; 255
    3532:	3f 4f       	sbci	r19, 0xFF	; 255
    3534:	26 83       	std	Z+6, r18	; 0x06
    3536:	37 83       	std	Z+7, r19	; 0x07
    3538:	14 c0       	rjmp	.+40     	; 0x3562 <fputc+0x6e>
    353a:	8b 01       	movw	r16, r22
    353c:	ec 01       	movw	r28, r24
    353e:	fb 01       	movw	r30, r22
    3540:	00 84       	ldd	r0, Z+8	; 0x08
    3542:	f1 85       	ldd	r31, Z+9	; 0x09
    3544:	e0 2d       	mov	r30, r0
    3546:	19 95       	eicall
    3548:	89 2b       	or	r24, r25
    354a:	e1 f6       	brne	.-72     	; 0x3504 <fputc+0x10>
    354c:	d8 01       	movw	r26, r16
    354e:	16 96       	adiw	r26, 0x06	; 6
    3550:	8d 91       	ld	r24, X+
    3552:	9c 91       	ld	r25, X
    3554:	17 97       	sbiw	r26, 0x07	; 7
    3556:	01 96       	adiw	r24, 0x01	; 1
    3558:	16 96       	adiw	r26, 0x06	; 6
    355a:	8d 93       	st	X+, r24
    355c:	9c 93       	st	X, r25
    355e:	17 97       	sbiw	r26, 0x07	; 7
    3560:	ce 01       	movw	r24, r28
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <__ultoa_invert>:
    356c:	fa 01       	movw	r30, r20
    356e:	aa 27       	eor	r26, r26
    3570:	28 30       	cpi	r18, 0x08	; 8
    3572:	51 f1       	breq	.+84     	; 0x35c8 <__ultoa_invert+0x5c>
    3574:	20 31       	cpi	r18, 0x10	; 16
    3576:	81 f1       	breq	.+96     	; 0x35d8 <__ultoa_invert+0x6c>
    3578:	e8 94       	clt
    357a:	6f 93       	push	r22
    357c:	6e 7f       	andi	r22, 0xFE	; 254
    357e:	6e 5f       	subi	r22, 0xFE	; 254
    3580:	7f 4f       	sbci	r23, 0xFF	; 255
    3582:	8f 4f       	sbci	r24, 0xFF	; 255
    3584:	9f 4f       	sbci	r25, 0xFF	; 255
    3586:	af 4f       	sbci	r26, 0xFF	; 255
    3588:	b1 e0       	ldi	r27, 0x01	; 1
    358a:	3e d0       	rcall	.+124    	; 0x3608 <__ultoa_invert+0x9c>
    358c:	b4 e0       	ldi	r27, 0x04	; 4
    358e:	3c d0       	rcall	.+120    	; 0x3608 <__ultoa_invert+0x9c>
    3590:	67 0f       	add	r22, r23
    3592:	78 1f       	adc	r23, r24
    3594:	89 1f       	adc	r24, r25
    3596:	9a 1f       	adc	r25, r26
    3598:	a1 1d       	adc	r26, r1
    359a:	68 0f       	add	r22, r24
    359c:	79 1f       	adc	r23, r25
    359e:	8a 1f       	adc	r24, r26
    35a0:	91 1d       	adc	r25, r1
    35a2:	a1 1d       	adc	r26, r1
    35a4:	6a 0f       	add	r22, r26
    35a6:	71 1d       	adc	r23, r1
    35a8:	81 1d       	adc	r24, r1
    35aa:	91 1d       	adc	r25, r1
    35ac:	a1 1d       	adc	r26, r1
    35ae:	20 d0       	rcall	.+64     	; 0x35f0 <__ultoa_invert+0x84>
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <__ultoa_invert+0x48>
    35b2:	68 94       	set
    35b4:	3f 91       	pop	r19
    35b6:	2a e0       	ldi	r18, 0x0A	; 10
    35b8:	26 9f       	mul	r18, r22
    35ba:	11 24       	eor	r1, r1
    35bc:	30 19       	sub	r19, r0
    35be:	30 5d       	subi	r19, 0xD0	; 208
    35c0:	31 93       	st	Z+, r19
    35c2:	de f6       	brtc	.-74     	; 0x357a <__ultoa_invert+0xe>
    35c4:	cf 01       	movw	r24, r30
    35c6:	08 95       	ret
    35c8:	46 2f       	mov	r20, r22
    35ca:	47 70       	andi	r20, 0x07	; 7
    35cc:	40 5d       	subi	r20, 0xD0	; 208
    35ce:	41 93       	st	Z+, r20
    35d0:	b3 e0       	ldi	r27, 0x03	; 3
    35d2:	0f d0       	rcall	.+30     	; 0x35f2 <__ultoa_invert+0x86>
    35d4:	c9 f7       	brne	.-14     	; 0x35c8 <__ultoa_invert+0x5c>
    35d6:	f6 cf       	rjmp	.-20     	; 0x35c4 <__ultoa_invert+0x58>
    35d8:	46 2f       	mov	r20, r22
    35da:	4f 70       	andi	r20, 0x0F	; 15
    35dc:	40 5d       	subi	r20, 0xD0	; 208
    35de:	4a 33       	cpi	r20, 0x3A	; 58
    35e0:	18 f0       	brcs	.+6      	; 0x35e8 <__ultoa_invert+0x7c>
    35e2:	49 5d       	subi	r20, 0xD9	; 217
    35e4:	31 fd       	sbrc	r19, 1
    35e6:	40 52       	subi	r20, 0x20	; 32
    35e8:	41 93       	st	Z+, r20
    35ea:	02 d0       	rcall	.+4      	; 0x35f0 <__ultoa_invert+0x84>
    35ec:	a9 f7       	brne	.-22     	; 0x35d8 <__ultoa_invert+0x6c>
    35ee:	ea cf       	rjmp	.-44     	; 0x35c4 <__ultoa_invert+0x58>
    35f0:	b4 e0       	ldi	r27, 0x04	; 4
    35f2:	a6 95       	lsr	r26
    35f4:	97 95       	ror	r25
    35f6:	87 95       	ror	r24
    35f8:	77 95       	ror	r23
    35fa:	67 95       	ror	r22
    35fc:	ba 95       	dec	r27
    35fe:	c9 f7       	brne	.-14     	; 0x35f2 <__ultoa_invert+0x86>
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	61 05       	cpc	r22, r1
    3604:	71 05       	cpc	r23, r1
    3606:	08 95       	ret
    3608:	9b 01       	movw	r18, r22
    360a:	ac 01       	movw	r20, r24
    360c:	0a 2e       	mov	r0, r26
    360e:	06 94       	lsr	r0
    3610:	57 95       	ror	r21
    3612:	47 95       	ror	r20
    3614:	37 95       	ror	r19
    3616:	27 95       	ror	r18
    3618:	ba 95       	dec	r27
    361a:	c9 f7       	brne	.-14     	; 0x360e <__ultoa_invert+0xa2>
    361c:	62 0f       	add	r22, r18
    361e:	73 1f       	adc	r23, r19
    3620:	84 1f       	adc	r24, r20
    3622:	95 1f       	adc	r25, r21
    3624:	a0 1d       	adc	r26, r0
    3626:	08 95       	ret

00003628 <_exit>:
    3628:	f8 94       	cli

0000362a <__stop_program>:
    362a:	ff cf       	rjmp	.-2      	; 0x362a <__stop_program>
